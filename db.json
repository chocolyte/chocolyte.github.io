{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/inext/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/inext/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/inext/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/inext/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/inext/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/inext/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/inext/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/inext/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/inext/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/inext/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/inext/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/inext/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/inext/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/inext/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/inext/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/inext/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/inext/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/inext/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/inext/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/inext/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/inext/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/inext/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/inext/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/inext/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/inext/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/inext/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/inext/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/inext/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/inext/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/inext/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/gitalk/gitalk.css","path":"lib/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/gitalk/gitalk.css.map","path":"lib/gitalk/gitalk.css.map","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/inext/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/gitalk/gitalk.min.js","path":"lib/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/gitalk/gitalk-component.js","path":"lib/gitalk/gitalk-component.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/gitalk/gitalk-component.js.map","path":"lib/gitalk/gitalk-component.js.map","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/gitalk/gitalk.js","path":"lib/gitalk/gitalk.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/gitalk/gitalk.js.map","path":"lib/gitalk/gitalk.js.map","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/inext/source/lib/gitalk/gitalk.min.js.map","path":"lib/gitalk/gitalk.min.js.map","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"dc28d0f826b22766ff56b02416e69ea7c5d69ca9","modified":1553845391210},{"_id":"themes/inext/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1553843070551},{"_id":"themes/inext/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1553843070551},{"_id":"themes/inext/.DS_Store","hash":"32440d851a2c8ab1a9029b2fca2aca31e324cc67","modified":1553847519107},{"_id":"themes/inext/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1553843070551},{"_id":"themes/inext/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1553843070554},{"_id":"themes/inext/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1553843070554},{"_id":"themes/inext/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1553843070554},{"_id":"themes/inext/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1553843070555},{"_id":"themes/inext/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1553843070554},{"_id":"themes/inext/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1553843070555},{"_id":"themes/inext/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1553843070557},{"_id":"themes/inext/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1553843070555},{"_id":"themes/inext/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1553843070558},{"_id":"themes/inext/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1553843070559},{"_id":"themes/inext/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1553843070559},{"_id":"themes/inext/_config.yml","hash":"cc9180853bc7fbcc5318b22f10339fd56e0dcf60","modified":1553849811006},{"_id":"themes/inext/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1553843070590},{"_id":"source/_posts/CSRF.md","hash":"d0c58c90c25950c79624d64d8b019503e9df1cde","modified":1591691731224},{"_id":"source/_posts/hash-intro.md","hash":"8a85daa0712e34efcd8a23479f44efd0bb648bad","modified":1563519185860},{"_id":"source/_posts/gradle-docker.md","hash":"cb1d3eea0b9b40332bc28e37485695aeeaf2409a","modified":1560917293203},{"_id":"source/_posts/class-loader.md","hash":"e84c76222e53091c12585dbb222762bafece609f","modified":1560917316237},{"_id":"source/_posts/java-lang-system-diy.md","hash":"46e7562bc707897ff0f27a08848a92fce855e02f","modified":1563433007235},{"_id":"source/_posts/hotspot-jvm.md","hash":"b51b8af9c5fab85a8d0ff2ccad731928e19ac650","modified":1553852732789},{"_id":"source/about/index.md","hash":"df06f904431e2cda53936b0801ff93a7d00d140e","modified":1553850023715},{"_id":"source/categories/index.md","hash":"a50738e43ca414335acfa0d224d0cb046d1fdb37","modified":1557304497164},{"_id":"source/tags/index.md","hash":"b496eaf18c638f54435d7639cab74600e5a551ec","modified":1557304485283},{"_id":"themes/inext/.git/COMMIT_EDITMSG","hash":"990062362e258e02e857bfa550cac3c20297695a","modified":1560917099120},{"_id":"themes/inext/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1553843070540},{"_id":"themes/inext/.git/config","hash":"a33539305f85ea695520b496f67659d5751acff8","modified":1553843070545},{"_id":"themes/inext/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1553843044153},{"_id":"themes/inext/.git/index","hash":"ebd677d43f2929fffa3e1b9b94228c3514624c1f","modified":1560917099118},{"_id":"themes/inext/.git/packed-refs","hash":"ae421c3c59b504716340fe85ae852ebd4aed1b8d","modified":1553843070536},{"_id":"themes/inext/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1553843070552},{"_id":"themes/inext/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1553843070552},{"_id":"themes/inext/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1553843070553},{"_id":"themes/inext/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1553843070553},{"_id":"themes/inext/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1553843070560},{"_id":"themes/inext/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1553843070560},{"_id":"themes/inext/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1553843070561},{"_id":"themes/inext/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1553843070561},{"_id":"themes/inext/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1553843070560},{"_id":"themes/inext/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1553843070561},{"_id":"themes/inext/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1553843070561},{"_id":"themes/inext/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1553843070562},{"_id":"themes/inext/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1553843070562},{"_id":"themes/inext/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1553843070562},{"_id":"themes/inext/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1553843070563},{"_id":"themes/inext/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1553843070563},{"_id":"themes/inext/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1553843070564},{"_id":"themes/inext/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1553843070563},{"_id":"themes/inext/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1553843070564},{"_id":"themes/inext/languages/zh-CN.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1553843126148},{"_id":"themes/inext/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1553843070564},{"_id":"themes/inext/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1553843070566},{"_id":"themes/inext/layout/.DS_Store","hash":"575be3ca7b05534795ba6e085ffce90da3bd9acf","modified":1553847806527},{"_id":"themes/inext/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1553843070586},{"_id":"themes/inext/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1553843070587},{"_id":"themes/inext/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1553843070589},{"_id":"themes/inext/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1553843070588},{"_id":"themes/inext/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1553843070590},{"_id":"themes/inext/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1553843070589},{"_id":"themes/inext/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1553843070590},{"_id":"themes/inext/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1553843070591},{"_id":"themes/inext/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1553843070591},{"_id":"themes/inext/source/.DS_Store","hash":"92d55be82bc6545d710fa431c570c2c6d697987f","modified":1553847484833},{"_id":"themes/inext/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1553843070680},{"_id":"themes/inext/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1553843070680},{"_id":"themes/inext/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1553843070680},{"_id":"themes/inext/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553843070627},{"_id":"themes/inext/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1553843044153},{"_id":"themes/inext/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1553843044155},{"_id":"themes/inext/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1553843044156},{"_id":"themes/inext/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1553843044157},{"_id":"themes/inext/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1553843044156},{"_id":"themes/inext/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1553843044154},{"_id":"themes/inext/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1553843044154},{"_id":"themes/inext/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1553843044155},{"_id":"themes/inext/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1553843044157},{"_id":"themes/inext/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1553843044156},{"_id":"themes/inext/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1553843044152},{"_id":"themes/inext/.git/logs/HEAD","hash":"8f1a0177240b74c82e2d42e35cb9a2e7f08c3a4e","modified":1560917099123},{"_id":"themes/inext/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1553843070566},{"_id":"themes/inext/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1553843070567},{"_id":"themes/inext/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1553843070565},{"_id":"themes/inext/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1553843070568},{"_id":"themes/inext/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1553843070567},{"_id":"themes/inext/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1553843070568},{"_id":"themes/inext/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1553843070568},{"_id":"themes/inext/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1553843070569},{"_id":"themes/inext/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1553843070575},{"_id":"themes/inext/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1553843070575},{"_id":"themes/inext/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1553843070576},{"_id":"themes/inext/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1553843070569},{"_id":"themes/inext/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1553843070571},{"_id":"themes/inext/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1553843070570},{"_id":"themes/inext/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1553843070571},{"_id":"themes/inext/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1553843070571},{"_id":"themes/inext/layout/_partials/comments.swig","hash":"41b4ffd041274e4b0d28db27e22db40a6c564787","modified":1553849094395},{"_id":"themes/inext/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1553843070572},{"_id":"themes/inext/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1553843070581},{"_id":"themes/inext/layout/_third-party/gitalk.swig","hash":"ad7df0faec50b25abf347fd6f004cf1a74ad3b41","modified":1553847831930},{"_id":"themes/inext/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1553843070581},{"_id":"themes/inext/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1553843070581},{"_id":"themes/inext/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1553843070581},{"_id":"themes/inext/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1553843070582},{"_id":"themes/inext/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1553843070582},{"_id":"themes/inext/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1553843070582},{"_id":"themes/inext/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1553843070593},{"_id":"themes/inext/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1553843070593},{"_id":"themes/inext/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1553843070593},{"_id":"themes/inext/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1553843070593},{"_id":"themes/inext/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1553843070594},{"_id":"themes/inext/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1553843070594},{"_id":"themes/inext/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1553843070594},{"_id":"themes/inext/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1553843070595},{"_id":"themes/inext/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1553843070595},{"_id":"themes/inext/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1553843070626},{"_id":"themes/inext/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1553843070627},{"_id":"themes/inext/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1553843070628},{"_id":"themes/inext/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1553843070627},{"_id":"themes/inext/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1553843070627},{"_id":"themes/inext/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1553843070627},{"_id":"themes/inext/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1553843070629},{"_id":"themes/inext/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1553843070628},{"_id":"themes/inext/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1553843070629},{"_id":"themes/inext/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1553843070628},{"_id":"themes/inext/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1553843070629},{"_id":"themes/inext/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1553843070629},{"_id":"themes/inext/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1553843070630},{"_id":"themes/inext/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553843070630},{"_id":"themes/inext/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553843070630},{"_id":"themes/inext/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1553843070630},{"_id":"themes/inext/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1553843070631},{"_id":"themes/inext/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1553843070631},{"_id":"themes/inext/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1553843070628},{"_id":"themes/inext/source/lib/.DS_Store","hash":"92050c1268091cabceb17d7d2a56c9117e869c31","modified":1553847467741},{"_id":"themes/inext/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553843070575},{"_id":"themes/inext/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553843070575},{"_id":"themes/inext/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553843070617},{"_id":"themes/inext/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553843070618},{"_id":"themes/inext/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553843070618},{"_id":"themes/inext/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553843070626},{"_id":"themes/inext/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553843070626},{"_id":"themes/inext/.git/objects/25/46c556b83f1e7fa58512cbb3b502bffecee0ae","hash":"435db5fee6371ce8d87eeaf6ee6d2498b27f16cd","modified":1560917099104},{"_id":"themes/inext/.git/objects/15/399773e5dcd8b5a84a7ea5f6ec253c84c4fa2d","hash":"ccb99765096de31559066171517604a0f851b566","modified":1560917099109},{"_id":"themes/inext/.git/objects/56/2a6f46cd4f5849bb2b25f1bca75f33c3a117f1","hash":"908dcc930b14900ef75edc56bf1740b980935bf9","modified":1560917099117},{"_id":"themes/inext/.git/objects/02/81e4a18c06652d5ecf790b9a84d85def969a0f","hash":"ecdf1ec969fb8d9d79f3d319708c5974755f5670","modified":1560917099122},{"_id":"themes/inext/.git/objects/47/3c65508a2c077b09ade3595bc64f838f519494","hash":"0aa0fe39aa09422f518752c2f278eb678ed02961","modified":1560917099105},{"_id":"themes/inext/.git/objects/56/ba147496fb212a0552085a0519d0628182677c","hash":"48825b03e0103c8b511905e8143930dc63fe5010","modified":1560917099115},{"_id":"themes/inext/.git/objects/68/fdda0ff100bb5f9d5dca0a1b9347032de8f305","hash":"1371dc8e85653bc4c18f08911dccc9f26c0b4504","modified":1560917099115},{"_id":"themes/inext/.git/objects/6e/b14bb73854b3a035cbd4e62f95815967e1d3da","hash":"fab264d6ba266879cea7ea5babe36bc869dc93b5","modified":1560917099114},{"_id":"themes/inext/.git/objects/64/b37043a86a6674262ae09c23cd3a87c4d64a0d","hash":"8eeacf7cbb2d9fd7eaa9865b78d49ae0e29a7118","modified":1560917099111},{"_id":"themes/inext/.git/objects/20/a8a8f4d1c2107a1b37eb23352d34d2092807eb","hash":"f14c4423078c01fe482f7b566d6fe254912638f4","modified":1560917099014},{"_id":"themes/inext/.git/objects/75/a11b31f55b0a47ac54af75dd83db024a2c105c","hash":"4631f590b477c9abac5b38450d222c11686385d1","modified":1560916702454},{"_id":"themes/inext/.git/objects/84/9472166d91776ffc78df27f772c7398e5e4a62","hash":"5c8c6593e1e3b421042d8a4278eb2d1b581ca340","modified":1560916702453},{"_id":"themes/inext/.git/objects/88/52a42a3415c164337aca9b657964c48e26b719","hash":"693e15a41c0423979d001925ad198ca247939156","modified":1560917099016},{"_id":"themes/inext/.git/objects/95/b6208a820f01b1bdf4cd483bc519fb1d9c6efc","hash":"269eb05c75234a56872fb72ad6079132ccb57f16","modified":1560917099108},{"_id":"themes/inext/.git/objects/8d/f7ca54e2e2fd39dac220210ee07b1c70fd7d67","hash":"b94ebca1050f49b68eaab436ae3c13c892838273","modified":1560917099018},{"_id":"themes/inext/.git/objects/c4/845edf768c133f544e88338d247b1528c532ac","hash":"782024851411ec2431b26fe4b3931eb3433e88f1","modified":1560917099112},{"_id":"themes/inext/.git/objects/49/ec9d4ff38bf7a8017033801089784f3b183168","hash":"9194bc398a6fa375fc760c6619f41d1371486bfa","modified":1560916702392},{"_id":"themes/inext/.git/objects/c9/c5452ec473769807634bed7599a667a7bea34c","hash":"a6eab7e482ec4abe803ef24a63808056e6f1a1af","modified":1560917099105},{"_id":"themes/inext/.git/objects/f4/2569751228c316f124acc1b55369f59802d49d","hash":"a3a8b5de9b1700cdeb8b16c29efe5f47f76abf65","modified":1560917099106},{"_id":"themes/inext/.git/objects/a6/b2432f39a3372cc2409a88fd67b5bf4f690149","hash":"ee1dd8b8d7247e3a65e9ae63b4fa24aeee4167f4","modified":1560916702581},{"_id":"themes/inext/.git/objects/ff/d98649138b91fcba295ded988488da511342b2","hash":"ee527301e3f1049e0c4913136add2ec468577d86","modified":1560917099116},{"_id":"themes/inext/.git/objects/f4/604cf5348b715c013177abd641f4cb056fd163","hash":"1f19591f5d5d3230f4b3ec61a5c00bb28e685038","modified":1560917099020},{"_id":"themes/inext/.git/objects/cb/dd27b86b1665c24ba260fb97f146fa1ecc8cca","hash":"d157ba8b44faa1ebc1484992ebb1ddf2626a6520","modified":1560916702000},{"_id":"themes/inext/.git/refs/heads/master","hash":"5c872a3c96f90cafd5a6dd5e640cafb6de434459","modified":1560917099123},{"_id":"themes/inext/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1553843070575},{"_id":"themes/inext/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1553843070576},{"_id":"themes/inext/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1553843070575},{"_id":"themes/inext/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1553843070570},{"_id":"themes/inext/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1553843070570},{"_id":"themes/inext/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1553843070574},{"_id":"themes/inext/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1553843070574},{"_id":"themes/inext/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1553843070573},{"_id":"themes/inext/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1553843070574},{"_id":"themes/inext/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1553843070574},{"_id":"themes/inext/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1553843070574},{"_id":"themes/inext/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1553843070574},{"_id":"themes/inext/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1553843070576},{"_id":"themes/inext/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1553843070576},{"_id":"themes/inext/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1553843070576},{"_id":"themes/inext/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1553843070577},{"_id":"themes/inext/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1553843070577},{"_id":"themes/inext/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1553843070577},{"_id":"themes/inext/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1553843070577},{"_id":"themes/inext/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1553843070577},{"_id":"themes/inext/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1553843070577},{"_id":"themes/inext/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1553843070578},{"_id":"themes/inext/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1553843070578},{"_id":"themes/inext/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1553843070578},{"_id":"themes/inext/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1553843070578},{"_id":"themes/inext/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1553843070579},{"_id":"themes/inext/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1553843070578},{"_id":"themes/inext/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1553843070579},{"_id":"themes/inext/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1553843070579},{"_id":"themes/inext/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1553843070580},{"_id":"themes/inext/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1553843070580},{"_id":"themes/inext/layout/_third-party/comments/gitalk.swig","hash":"ad7df0faec50b25abf347fd6f004cf1a74ad3b41","modified":1553848290400},{"_id":"themes/inext/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1553843070580},{"_id":"themes/inext/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1553843070581},{"_id":"themes/inext/layout/_third-party/comments/index.swig","hash":"08338cba394ebef11bd9473675237fbb8ba06f04","modified":1553847972992},{"_id":"themes/inext/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1553843070585},{"_id":"themes/inext/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1553843070584},{"_id":"themes/inext/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1553843070586},{"_id":"themes/inext/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1553843070583},{"_id":"themes/inext/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1553843070617},{"_id":"themes/inext/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1553843070617},{"_id":"themes/inext/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1553843070618},{"_id":"themes/inext/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1553843070618},{"_id":"themes/inext/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1553843070625},{"_id":"themes/inext/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1553843070625},{"_id":"themes/inext/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1553843070626},{"_id":"themes/inext/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1553843070626},{"_id":"themes/inext/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1553843070632},{"_id":"themes/inext/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1553843070632},{"_id":"themes/inext/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1553843070632},{"_id":"themes/inext/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1553843070632},{"_id":"themes/inext/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1553843070632},{"_id":"themes/inext/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1553843070633},{"_id":"themes/inext/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1553843070633},{"_id":"themes/inext/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1553843070634},{"_id":"themes/inext/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1553843070634},{"_id":"themes/inext/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1553843070634},{"_id":"themes/inext/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1553843070635},{"_id":"themes/inext/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1553843070643},{"_id":"themes/inext/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1553843070640},{"_id":"themes/inext/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1553843070644},{"_id":"themes/inext/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1553843070644},{"_id":"themes/inext/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1553843070643},{"_id":"themes/inext/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1553843070648},{"_id":"themes/inext/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1553843070648},{"_id":"themes/inext/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1553843070648},{"_id":"themes/inext/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1553843070648},{"_id":"themes/inext/source/lib/gitalk/gitalk.css","hash":"99f6725b386bdb0f52d15b0dd7877eaf1ad4c918","modified":1553847390382},{"_id":"themes/inext/source/lib/gitalk/gitalk.css.map","hash":"9dda04c29af8da6ac13a507beefea6fce4d7032e","modified":1553847390382},{"_id":"themes/inext/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1553843070649},{"_id":"themes/inext/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1553843070650},{"_id":"themes/inext/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1553843070650},{"_id":"themes/inext/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1553843070650},{"_id":"themes/inext/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1553843070650},{"_id":"themes/inext/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1553843070664},{"_id":"themes/inext/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1553843070664},{"_id":"themes/inext/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1553843070664},{"_id":"themes/inext/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1553843070665},{"_id":"themes/inext/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1553843070665},{"_id":"themes/inext/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1553843070665},{"_id":"themes/inext/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1553843070667},{"_id":"themes/inext/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1553843070667},{"_id":"themes/inext/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1553843070668},{"_id":"themes/inext/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1553843070667},{"_id":"themes/inext/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1553843070663},{"_id":"themes/inext/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1553843070668},{"_id":"themes/inext/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1553843070668},{"_id":"themes/inext/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1553843070668},{"_id":"themes/inext/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1553843070668},{"_id":"themes/inext/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1553843070669},{"_id":"themes/inext/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1553843070669},{"_id":"themes/inext/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1553843070669},{"_id":"themes/inext/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1553843070669},{"_id":"themes/inext/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1553843070670},{"_id":"themes/inext/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1553843070670},{"_id":"themes/inext/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1553843070671},{"_id":"themes/inext/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1553843070671},{"_id":"themes/inext/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1553843070671},{"_id":"themes/inext/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1553843070677},{"_id":"themes/inext/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1553843070679},{"_id":"themes/inext/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1553843070679},{"_id":"themes/inext/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1553843070677},{"_id":"themes/inext/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1553843070679},{"_id":"themes/inext/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1553843070666},{"_id":"themes/inext/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1553843070666},{"_id":"themes/inext/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1553843070667},{"_id":"themes/inext/.git/objects/24/84872a6050869fdcf9361db96d0bb0d19ebd85","hash":"f910ab50cf4ba71c2efe993971539104012e092a","modified":1560916702518},{"_id":"themes/inext/.git/objects/7b/a02df3df5a7dbc3130dc8fa7400ae5c8378a8d","hash":"7a9594f4cdb635dfc3d4ea5d242c43d35153851f","modified":1560916702451},{"_id":"themes/inext/.git/objects/8a/ca5aa25f9d48bf9113b2261bf6ac83cc744d2f","hash":"c084b59886005d4a027ede817c39fec4e48e2155","modified":1560916702436},{"_id":"themes/inext/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1553843070664},{"_id":"themes/inext/.git/logs/refs/heads/master","hash":"8f1a0177240b74c82e2d42e35cb9a2e7f08c3a4e","modified":1560917099123},{"_id":"themes/inext/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1553843070540},{"_id":"themes/inext/.git/objects/d6/f2304e4953a3ec4fd21511a23a6567ddd106b2","hash":"2403a12b05ec2496dae30b55009247d93a9cc526","modified":1560916702552},{"_id":"themes/inext/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1553843070582},{"_id":"themes/inext/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1553843070583},{"_id":"themes/inext/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1553843070615},{"_id":"themes/inext/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1553843070595},{"_id":"themes/inext/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1553843070595},{"_id":"themes/inext/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1553843070596},{"_id":"themes/inext/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1553843070596},{"_id":"themes/inext/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1553843070596},{"_id":"themes/inext/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1553843070600},{"_id":"themes/inext/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1553843070610},{"_id":"themes/inext/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1553843070616},{"_id":"themes/inext/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1553843070616},{"_id":"themes/inext/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1553843070616},{"_id":"themes/inext/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1553843070617},{"_id":"themes/inext/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1553843070616},{"_id":"themes/inext/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1553843070617},{"_id":"themes/inext/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1553843070618},{"_id":"themes/inext/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1553843070620},{"_id":"themes/inext/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1553843070620},{"_id":"themes/inext/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1553843070621},{"_id":"themes/inext/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1553843070621},{"_id":"themes/inext/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1553843070622},{"_id":"themes/inext/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1553843070622},{"_id":"themes/inext/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1553843070622},{"_id":"themes/inext/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1553843070625},{"_id":"themes/inext/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1553843070624},{"_id":"themes/inext/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1553843070625},{"_id":"themes/inext/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1553843070624},{"_id":"themes/inext/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1553843070625},{"_id":"themes/inext/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1553843070625},{"_id":"themes/inext/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1553843070623},{"_id":"themes/inext/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1553843070623},{"_id":"themes/inext/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1553843070623},{"_id":"themes/inext/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1553843070624},{"_id":"themes/inext/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1553843070624},{"_id":"themes/inext/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1553843070634},{"_id":"themes/inext/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1553843070638},{"_id":"themes/inext/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1553843070639},{"_id":"themes/inext/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1553843070639},{"_id":"themes/inext/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1553843070644},{"_id":"themes/inext/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1553843070644},{"_id":"themes/inext/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1553843070645},{"_id":"themes/inext/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1553843070645},{"_id":"themes/inext/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1553843070645},{"_id":"themes/inext/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1553843070647},{"_id":"themes/inext/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1553843070645},{"_id":"themes/inext/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1553843070649},{"_id":"themes/inext/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1553843070647},{"_id":"themes/inext/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1553843070648},{"_id":"themes/inext/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1553843070649},{"_id":"themes/inext/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1553843070651},{"_id":"themes/inext/source/lib/gitalk/gitalk.min.js","hash":"266500948447c95aeea95ef6760f192afc96fd5e","modified":1553847390392},{"_id":"themes/inext/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1553843070651},{"_id":"themes/inext/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1553843070651},{"_id":"themes/inext/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1553843070676},{"_id":"themes/inext/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1553843070676},{"_id":"themes/inext/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1553843070639},{"_id":"themes/inext/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553843070663},{"_id":"themes/inext/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553843070662},{"_id":"themes/inext/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1553843070678},{"_id":"themes/inext/.git/logs/refs/remotes/origin/HEAD","hash":"f7930a30ef44f7d1e748aff7f3e56fa18868f201","modified":1553843070540},{"_id":"themes/inext/.git/objects/47/f34a2e8ddba722834e36cb5876f0bfd83a631b","hash":"904c09acdc7d869824e1ef55055a5183cb0915ad","modified":1560916702621},{"_id":"themes/inext/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1553843070596},{"_id":"themes/inext/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1553843070597},{"_id":"themes/inext/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1553843070597},{"_id":"themes/inext/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1553843070597},{"_id":"themes/inext/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1553843070597},{"_id":"themes/inext/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1553843070597},{"_id":"themes/inext/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1553843070598},{"_id":"themes/inext/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1553843070598},{"_id":"themes/inext/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1553843070598},{"_id":"themes/inext/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1553843070598},{"_id":"themes/inext/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1553843070598},{"_id":"themes/inext/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1553843070598},{"_id":"themes/inext/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1553843070599},{"_id":"themes/inext/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1553843070600},{"_id":"themes/inext/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1553843070601},{"_id":"themes/inext/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1553843070600},{"_id":"themes/inext/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1553843070601},{"_id":"themes/inext/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1553843070601},{"_id":"themes/inext/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1553843070603},{"_id":"themes/inext/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1553843070602},{"_id":"themes/inext/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1553843070603},{"_id":"themes/inext/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1553843070602},{"_id":"themes/inext/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1553843070604},{"_id":"themes/inext/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1553843070603},{"_id":"themes/inext/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1553843070604},{"_id":"themes/inext/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1553843070604},{"_id":"themes/inext/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1553843070605},{"_id":"themes/inext/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1553843070605},{"_id":"themes/inext/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1553843070605},{"_id":"themes/inext/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1553843070607},{"_id":"themes/inext/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1553843070608},{"_id":"themes/inext/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1553843070608},{"_id":"themes/inext/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1553843070608},{"_id":"themes/inext/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1553843070609},{"_id":"themes/inext/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1553843070609},{"_id":"themes/inext/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1553843070609},{"_id":"themes/inext/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1553843070609},{"_id":"themes/inext/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1553843070609},{"_id":"themes/inext/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1553843070610},{"_id":"themes/inext/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1553843070610},{"_id":"themes/inext/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1553843070610},{"_id":"themes/inext/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1553843070610},{"_id":"themes/inext/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1553843070611},{"_id":"themes/inext/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1553843070611},{"_id":"themes/inext/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1553843070611},{"_id":"themes/inext/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1553843070612},{"_id":"themes/inext/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1553843070612},{"_id":"themes/inext/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1553843070612},{"_id":"themes/inext/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1553843070613},{"_id":"themes/inext/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1553843070613},{"_id":"themes/inext/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1553843070613},{"_id":"themes/inext/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1553843070614},{"_id":"themes/inext/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1553843070614},{"_id":"themes/inext/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1553843070614},{"_id":"themes/inext/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1553843070614},{"_id":"themes/inext/source/css/_common/components/third-party/gitalk.styl","hash":"e6d4bdee6183fba28264d34b976dad9a92d8dfba","modified":1553848066753},{"_id":"themes/inext/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1553843070614},{"_id":"themes/inext/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1553843070615},{"_id":"themes/inext/source/css/_common/components/third-party/third-party.styl","hash":"735061227c281557bac768047b679fa079907edc","modified":1553848083383},{"_id":"themes/inext/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1553843070623},{"_id":"themes/inext/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1553843070623},{"_id":"themes/inext/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1553843070624},{"_id":"themes/inext/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1553843070636},{"_id":"themes/inext/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1553843070636},{"_id":"themes/inext/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1553843070636},{"_id":"themes/inext/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1553843070637},{"_id":"themes/inext/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1553843070637},{"_id":"themes/inext/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1553843070646},{"_id":"themes/inext/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1553843070646},{"_id":"themes/inext/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1553843070646},{"_id":"themes/inext/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1553843070646},{"_id":"themes/inext/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1553843070646},{"_id":"themes/inext/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1553843070647},{"_id":"themes/inext/source/lib/gitalk/gitalk-component.js","hash":"bc5d61277bff75a1ac69bbe2dca341d4cd3418fc","modified":1553847390379},{"_id":"themes/inext/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553843070654},{"_id":"themes/inext/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553843070656},{"_id":"themes/inext/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553843070661},{"_id":"themes/inext/.git/objects/pack/pack-7017346ac25ed8d23d5c6043d23d0e86fb73cd68.idx","hash":"46a63a163e29aaf207392a1d8c5f93f2f5677a59","modified":1553843069907},{"_id":"themes/inext/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1553843070643},{"_id":"themes/inext/source/lib/gitalk/gitalk-component.js.map","hash":"b3be5e781bb2725f521b2c5f3e5f1ebb053538fc","modified":1553847390381},{"_id":"themes/inext/source/lib/gitalk/gitalk.js","hash":"df9bb3d375c398817e2beeb6510d2afdcc97c491","modified":1553847390384},{"_id":"themes/inext/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1553843070675},{"_id":"themes/inext/source/lib/gitalk/gitalk.js.map","hash":"ed675ca009247fac81accd15170de22038ba5b8b","modified":1553847390391},{"_id":"themes/inext/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1553843070659},{"_id":"themes/inext/source/lib/gitalk/gitalk.min.js.map","hash":"4540bc5148c97eecebfc4ddfed76df5ec3a3d94d","modified":1553847390395},{"_id":"themes/inext/.git/objects/pack/pack-7017346ac25ed8d23d5c6043d23d0e86fb73cd68.pack","hash":"89a0d533704cbf13951d195d086348f4ce62830b","modified":1560916702000},{"_id":"public/about/index.html","hash":"2974e799d5b3f3e4a5fd794d7c58819dd029e762","modified":1591689393593},{"_id":"public/categories/index.html","hash":"a28722c0abedd70493169c2450bfa65f5c2c8a9e","modified":1591689393593},{"_id":"public/tags/index.html","hash":"5c178ec4e4140ea2ff50cd0501385226946fad8d","modified":1591689393598},{"_id":"public/categories/技术/index.html","hash":"edb0c3c4d974d0bd0e3ea8bd73ff7854771f3385","modified":1591689393598},{"_id":"public/archives/index.html","hash":"4e0ab73aec70b35ca23d158b1e8dd1dd467f61eb","modified":1591689393598},{"_id":"public/archives/2019/index.html","hash":"32ebd1710e79e490ea2abf8529771e639b11a95a","modified":1591689393598},{"_id":"public/archives/2019/03/index.html","hash":"400ae8224ed204948023ca3645e52ab75ff65bf9","modified":1591689393598},{"_id":"public/archives/2019/06/index.html","hash":"998b301670a532d06627f2248201736a93d2fcf1","modified":1591689393598},{"_id":"public/archives/2019/07/index.html","hash":"d26bdef7b935ee8c47894aa433644a234a0a24db","modified":1591689393598},{"_id":"public/tags/算法/index.html","hash":"341d78833c0fac312f1374dcc2dfb89a13702cc3","modified":1591689393599},{"_id":"public/tags/docker/index.html","hash":"13b51d784742b1844d758a07ac34d046bf466706","modified":1591689393599},{"_id":"public/tags/JVM/index.html","hash":"62422690c16a3e130679a4491727e8bfd3aef608","modified":1591689393599},{"_id":"public/posts/97310931.html","hash":"7596f6da60968f1d68266900bd2fd30dce60e0a8","modified":1591689393599},{"_id":"public/posts/814dc607.html","hash":"adb2ec2ba18696ef6e2eeae33bae71950cb48b10","modified":1591689393599},{"_id":"public/posts/26e25788.html","hash":"9a05dff3a851d9a802fe5b2fab8122801b2bcb78","modified":1591689393599},{"_id":"public/posts/cd1d308.html","hash":"bc68801f448ac948bec7b3957e87a940d206456e","modified":1591689393599},{"_id":"public/posts/6a0a4ced.html","hash":"740815090c6c3f3494cc53c3dfad26e13e9c3258","modified":1591689393599},{"_id":"public/index.html","hash":"5a67a13cdd4646ab457e0f439bfbdf7bd492443a","modified":1591689393599},{"_id":"public/archives/2020/index.html","hash":"0ae761814603f333eb9b6c93592d579c563aae20","modified":1591689393675},{"_id":"public/archives/2020/06/index.html","hash":"23f41274c3c9cde8d18d964b2abe6758fc711964","modified":1591689393676},{"_id":"public/tags/安全/index.html","hash":"807baf11e91133d54f4ef5bc896bd3e50fef0f66","modified":1591689393676},{"_id":"public/posts/d12d6355.html","hash":"a54ad2e9cf67863399df4fbdff0328f32d22db0b","modified":1591691743865},{"_id":"public/CNAME","hash":"dc28d0f826b22766ff56b02416e69ea7c5d69ca9","modified":1591689393692},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1591689393692},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1591689393692},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1591689393692},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1591689393692},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1591689393692},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1591689393692},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1591689393692},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1591689393692},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1591689393693},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1591689393693},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1591689393693},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1591689393693},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1591689393693},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1591689393693},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1591689393693},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1591689393693},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1591689393693},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1591689393693},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1591689393693},{"_id":"public/lib/gitalk/gitalk.css.map","hash":"9dda04c29af8da6ac13a507beefea6fce4d7032e","modified":1591689393693},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1591689393693},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1591689393693},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1591689393693},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1591689393693},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1591689393693},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1591689393693},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1591689393693},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1591689393693},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1591689393693},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1591689393694},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1591689393694},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1591689393694},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1591689393694},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1591689393694},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1591689394932},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1591689394974},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1591689395003},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1591689395003},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1591689395003},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1591689395003},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1591689395003},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1591689395003},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1591689395003},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1591689395003},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1591689395003},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1591689395003},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1591689395003},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1591689395003},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1591689395003},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1591689395004},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1591689395004},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1591689395004},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1591689395004},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1591689395004},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1591689395004},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1591689395004},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1591689395004},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1591689395004},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1591689395004},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1591689395004},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1591689395004},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1591689395004},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1591689395004},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1591689395004},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1591689395004},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1591689395004},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1591689395004},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1591689395004},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1591689395005},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1591689395005},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1591689395005},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1591689395005},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1591689395005},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1591689395005},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1591689395005},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1591689395005},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1591689395005},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1591689395005},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1591689395005},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1591689395005},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1591689395005},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1591689395005},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1591689395005},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1591689395005},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1591689395006},{"_id":"public/css/main.css","hash":"f557c5996fc3ced53d1592b6c1c0b5f2995933b2","modified":1591689395006},{"_id":"public/lib/gitalk/gitalk.css","hash":"99f6725b386bdb0f52d15b0dd7877eaf1ad4c918","modified":1591689395006},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1591689395006},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1591689395006},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1591689395006},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1591689395006},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1591689395006},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1591689395006},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1591689395007},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1591689395007},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1591689395007},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1591689395007},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1591689395008},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1591689395008},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1591689395008},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1591689395008},{"_id":"public/lib/gitalk/gitalk.min.js","hash":"266500948447c95aeea95ef6760f192afc96fd5e","modified":1591689395008},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1591689395008},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1591689395008},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1591689395008},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1591689395008},{"_id":"public/lib/gitalk/gitalk-component.js","hash":"bc5d61277bff75a1ac69bbe2dca341d4cd3418fc","modified":1591689395008},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1591689395009},{"_id":"public/lib/gitalk/gitalk.js","hash":"df228cc3afa3f8019afcf6fb923e6bd893072212","modified":1591689395009},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1591689395009},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1591689395011},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1591689395011},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1591689395012},{"_id":"public/lib/gitalk/gitalk-component.js.map","hash":"b3be5e781bb2725f521b2c5f3e5f1ebb053538fc","modified":1591689395076},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1591689395076},{"_id":"public/lib/gitalk/gitalk.js.map","hash":"ed675ca009247fac81accd15170de22038ba5b8b","modified":1591689395104},{"_id":"public/lib/gitalk/gitalk.min.js.map","hash":"4540bc5148c97eecebfc4ddfed76df5ec3a3d94d","modified":1591689395110}],"Category":[{"name":"技术","_id":"ckb7mrm580002ljy8yreqxgwo"}],"Data":[],"Page":[{"title":"about","date":"2019-03-29T08:57:57.000Z","comments":0,"_content":"hello，welcome to my blog.\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-03-29 16:57:57\ncomments: false\n---\nhello，welcome to my blog.\n","updated":"2019-03-29T09:00:23.715Z","path":"about/index.html","layout":"page","_id":"ckb7mrmc7000gljy89j4qpim6","content":"<p>hello，welcome to my blog.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>hello，welcome to my blog.</p>\n"},{"title":"文章分类","date":"2019-03-29T07:51:07.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2019-03-29 15:51:07\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-05-08T08:34:57.164Z","path":"categories/index.html","layout":"page","_id":"ckb7mrmcb000iljy85cuubfml","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-03-29T07:54:14.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-03-29 15:54:14\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-05-08T08:34:45.283Z","path":"tags/index.html","layout":"page","_id":"ckb7mrmci000lljy80a03oibs","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CSRF","abbrlink":"d12d6355","date":"2020-06-09T07:50:22.000Z","_content":"\n# CSRF 攻击是什么？\nCSRF：跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。\n\nCSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账......造成的问题包括：个人隐私泄露以及财产安全。例如通过QQ等聊天软件发送的链接(有些还伪装成短域名，用户无法分辨)，攻击者就能迫使Web应用的用户去执行攻击者预设的操作。例如，当用户登录网络银行去查看其存款余额，在他没有退出时，就点击了一个QQ好友发来的链接，那么该用户银行帐户中的资金就有可能被转移到攻击者指定的帐户中。\n\n# CSRF 原理\n要完成一个CSRF攻击，必须具备以下几个条件：\n\n* 受害者已经登录到了目标网站（你的网站）并且没有退出\n\n* 受害者有意或者无意的访问了攻击者发布的页面或者链接地址\n\n整个步骤大致是这个样子的：\n\n1. 用户小明在你的网站A上面登录了，A返回了一个session ID（使用cookie存储）\n\n2. 小明的浏览器保持着在A网站的登录状态，事实上几乎所有的网站都是这样做的，一般至少是用户关闭浏览器之前用户的会话是不会结束的\n\n3. 攻击者小强给小明发送了一个链接地址，小明打开了这个地址，查看了网页的内容\n\n4. 小明在打开这个地址的时候，这个页面已经自动的对网站A发送了一个请求，这时候因为A网站没有退出，因此只要请求的地址是A的就会携带A的cookie信息，也就是使用A与小明之间的会话\n\n5. 这时候A网站肯定是不知道这个请求其实是小强伪造的网页上发送的，而是误以为小明就是要这样操作，这样小强就可以随意的更改小明在A上的信息，以小明的身份在A网站上进行操作\n\n整个过程大概如图所示：\n![image](https://file.peach.ren/2020/06/csrf-process.png/s)\n\n# 解决方案\n![image](https://file.peach.ren/2020/06/csrf-process-1.png/s)\n\n## Synchronizer token pattern\n令牌同步模式（Synchronizer token pattern，简称STP）是在用户请求的页面中的所有表单中嵌入一个token，在服务端验证这个token的技术。token可以是任意的内容，但是一定要保证无法被攻击者猜测到或者查询到。攻击者在请求中无法使用正确的token，因此可以判断出未授权的请求。\n\n## Cookie-to-Header Token\n对于使用Js作为主要交互技术的网站，将CSRF的token写入到cookie中\n```\nSet-Cookie: CSRF-token=i8XNjC4b8KVok4uw5RftR38Wgp2BFwql; expires=Thu, 23-Jul-2015 10:25:33 GMT; Max-Age=31449600; Path=/\n```\n\n然后使用javascript读取token的值，在发送http请求的时候将其作为请求的header\n\n```\nX-CSRF-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql\n```\n\n最后服务器验证请求头的 token 是否合法。\n\n## 二次验证\n如用户付账输入密码，短信验证码验证等\n\n## 验证码\n使用验证码可以杜绝CSRF攻击，但是这种方式要求每个请求都输入一个验证码，显然没有哪个网站愿意使用这种粗暴的方式，用户体验太差，用户会疯掉的。\n\n## 验证 Referer\nHTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF 攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证 Referer 值来防御 CSRF 攻击。\n\n然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。\n\n即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。\n\n# Java 项目实践\n目前项目中采取的是 Referer 和 Cookie-to-Header 同时验证的方式\n\n示例代码：\n\n```java\n// 验证 Referer\nString referer = WebUtil.getReferer(request);\nif (StringUtil.isEmpty(referer)) {\n       throw new RRException(Errors.EMPTY_REFERER);\n}\n\nif (!referer.contains(PathUtil.getUrlBase().toString())) {\n       throw new RRException(Errors.ERROR_REFERER);\n}\n```\n\ntoken 验证可以参考 [shiro github](https://github.com/bdemers/shiro/blob/csrf-and-remember-me-with-JWT/web/src/main/java/org/apache/shiro/web/csrf/StatelessJwtCsrfTokenRepository.java)\n\n# 总结\n简单来说，CSRF 其实就是黑客利用浏览器存储用户 Cookie 这一特性，来模拟用户发起一次带有认证信息的请求，比如转账、修改密码等。防护 CSRF 的原理也很简单，在这些请求中，加入一些黑客无法得到的参数信息即可，比如 CSRF Token 或者独立的支付密码等。\n\n# 参考\n* [shiro github](https://github.com/bdemers/shiro/blob/csrf-and-remember-me-with-JWT/web/src/main/java/org/apache/shiro/web/csrf/StatelessJwtCsrfTokenRepository.java)\n* [shiro github push issue](https://github.com/bdemers/shiro/pull/1/files#diff-0)\n* [CSRF 攻击](https://www.jianshu.com/p/b99dc31f1e9f)\n","source":"_posts/CSRF.md","raw":"---\ntitle: CSRF\ncategories:\n  - 技术\ntags:\n  - 安全\nabbrlink: d12d6355\ndate: 2020-06-09 15:50:22\n---\n\n# CSRF 攻击是什么？\nCSRF：跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。\n\nCSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账......造成的问题包括：个人隐私泄露以及财产安全。例如通过QQ等聊天软件发送的链接(有些还伪装成短域名，用户无法分辨)，攻击者就能迫使Web应用的用户去执行攻击者预设的操作。例如，当用户登录网络银行去查看其存款余额，在他没有退出时，就点击了一个QQ好友发来的链接，那么该用户银行帐户中的资金就有可能被转移到攻击者指定的帐户中。\n\n# CSRF 原理\n要完成一个CSRF攻击，必须具备以下几个条件：\n\n* 受害者已经登录到了目标网站（你的网站）并且没有退出\n\n* 受害者有意或者无意的访问了攻击者发布的页面或者链接地址\n\n整个步骤大致是这个样子的：\n\n1. 用户小明在你的网站A上面登录了，A返回了一个session ID（使用cookie存储）\n\n2. 小明的浏览器保持着在A网站的登录状态，事实上几乎所有的网站都是这样做的，一般至少是用户关闭浏览器之前用户的会话是不会结束的\n\n3. 攻击者小强给小明发送了一个链接地址，小明打开了这个地址，查看了网页的内容\n\n4. 小明在打开这个地址的时候，这个页面已经自动的对网站A发送了一个请求，这时候因为A网站没有退出，因此只要请求的地址是A的就会携带A的cookie信息，也就是使用A与小明之间的会话\n\n5. 这时候A网站肯定是不知道这个请求其实是小强伪造的网页上发送的，而是误以为小明就是要这样操作，这样小强就可以随意的更改小明在A上的信息，以小明的身份在A网站上进行操作\n\n整个过程大概如图所示：\n![image](https://file.peach.ren/2020/06/csrf-process.png/s)\n\n# 解决方案\n![image](https://file.peach.ren/2020/06/csrf-process-1.png/s)\n\n## Synchronizer token pattern\n令牌同步模式（Synchronizer token pattern，简称STP）是在用户请求的页面中的所有表单中嵌入一个token，在服务端验证这个token的技术。token可以是任意的内容，但是一定要保证无法被攻击者猜测到或者查询到。攻击者在请求中无法使用正确的token，因此可以判断出未授权的请求。\n\n## Cookie-to-Header Token\n对于使用Js作为主要交互技术的网站，将CSRF的token写入到cookie中\n```\nSet-Cookie: CSRF-token=i8XNjC4b8KVok4uw5RftR38Wgp2BFwql; expires=Thu, 23-Jul-2015 10:25:33 GMT; Max-Age=31449600; Path=/\n```\n\n然后使用javascript读取token的值，在发送http请求的时候将其作为请求的header\n\n```\nX-CSRF-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql\n```\n\n最后服务器验证请求头的 token 是否合法。\n\n## 二次验证\n如用户付账输入密码，短信验证码验证等\n\n## 验证码\n使用验证码可以杜绝CSRF攻击，但是这种方式要求每个请求都输入一个验证码，显然没有哪个网站愿意使用这种粗暴的方式，用户体验太差，用户会疯掉的。\n\n## 验证 Referer\nHTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF 攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证 Referer 值来防御 CSRF 攻击。\n\n然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。\n\n即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。\n\n# Java 项目实践\n目前项目中采取的是 Referer 和 Cookie-to-Header 同时验证的方式\n\n示例代码：\n\n```java\n// 验证 Referer\nString referer = WebUtil.getReferer(request);\nif (StringUtil.isEmpty(referer)) {\n       throw new RRException(Errors.EMPTY_REFERER);\n}\n\nif (!referer.contains(PathUtil.getUrlBase().toString())) {\n       throw new RRException(Errors.ERROR_REFERER);\n}\n```\n\ntoken 验证可以参考 [shiro github](https://github.com/bdemers/shiro/blob/csrf-and-remember-me-with-JWT/web/src/main/java/org/apache/shiro/web/csrf/StatelessJwtCsrfTokenRepository.java)\n\n# 总结\n简单来说，CSRF 其实就是黑客利用浏览器存储用户 Cookie 这一特性，来模拟用户发起一次带有认证信息的请求，比如转账、修改密码等。防护 CSRF 的原理也很简单，在这些请求中，加入一些黑客无法得到的参数信息即可，比如 CSRF Token 或者独立的支付密码等。\n\n# 参考\n* [shiro github](https://github.com/bdemers/shiro/blob/csrf-and-remember-me-with-JWT/web/src/main/java/org/apache/shiro/web/csrf/StatelessJwtCsrfTokenRepository.java)\n* [shiro github push issue](https://github.com/bdemers/shiro/pull/1/files#diff-0)\n* [CSRF 攻击](https://www.jianshu.com/p/b99dc31f1e9f)\n","slug":"CSRF","published":1,"updated":"2020-06-09T08:35:31.224Z","_id":"ckb7mrm4r0000ljy8pwv88m73","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CSRF-攻击是什么？\"><a href=\"#CSRF-攻击是什么？\" class=\"headerlink\" title=\"CSRF 攻击是什么？\"></a>CSRF 攻击是什么？</h1><p>CSRF：跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>\n<p>CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。例如通过QQ等聊天软件发送的链接(有些还伪装成短域名，用户无法分辨)，攻击者就能迫使Web应用的用户去执行攻击者预设的操作。例如，当用户登录网络银行去查看其存款余额，在他没有退出时，就点击了一个QQ好友发来的链接，那么该用户银行帐户中的资金就有可能被转移到攻击者指定的帐户中。</p>\n<h1 id=\"CSRF-原理\"><a href=\"#CSRF-原理\" class=\"headerlink\" title=\"CSRF 原理\"></a>CSRF 原理</h1><p>要完成一个CSRF攻击，必须具备以下几个条件：</p>\n<ul>\n<li><p>受害者已经登录到了目标网站（你的网站）并且没有退出</p>\n</li>\n<li><p>受害者有意或者无意的访问了攻击者发布的页面或者链接地址</p>\n</li>\n</ul>\n<p>整个步骤大致是这个样子的：</p>\n<ol>\n<li><p>用户小明在你的网站A上面登录了，A返回了一个session ID（使用cookie存储）</p>\n</li>\n<li><p>小明的浏览器保持着在A网站的登录状态，事实上几乎所有的网站都是这样做的，一般至少是用户关闭浏览器之前用户的会话是不会结束的</p>\n</li>\n<li><p>攻击者小强给小明发送了一个链接地址，小明打开了这个地址，查看了网页的内容</p>\n</li>\n<li><p>小明在打开这个地址的时候，这个页面已经自动的对网站A发送了一个请求，这时候因为A网站没有退出，因此只要请求的地址是A的就会携带A的cookie信息，也就是使用A与小明之间的会话</p>\n</li>\n<li><p>这时候A网站肯定是不知道这个请求其实是小强伪造的网页上发送的，而是误以为小明就是要这样操作，这样小强就可以随意的更改小明在A上的信息，以小明的身份在A网站上进行操作</p>\n</li>\n</ol>\n<p>整个过程大概如图所示：<br><img src=\"https://file.peach.ren/2020/06/csrf-process.png/s\" alt=\"image\"></p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p><img src=\"https://file.peach.ren/2020/06/csrf-process-1.png/s\" alt=\"image\"></p>\n<h2 id=\"Synchronizer-token-pattern\"><a href=\"#Synchronizer-token-pattern\" class=\"headerlink\" title=\"Synchronizer token pattern\"></a>Synchronizer token pattern</h2><p>令牌同步模式（Synchronizer token pattern，简称STP）是在用户请求的页面中的所有表单中嵌入一个token，在服务端验证这个token的技术。token可以是任意的内容，但是一定要保证无法被攻击者猜测到或者查询到。攻击者在请求中无法使用正确的token，因此可以判断出未授权的请求。</p>\n<h2 id=\"Cookie-to-Header-Token\"><a href=\"#Cookie-to-Header-Token\" class=\"headerlink\" title=\"Cookie-to-Header Token\"></a>Cookie-to-Header Token</h2><p>对于使用Js作为主要交互技术的网站，将CSRF的token写入到cookie中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: CSRF-token=i8XNjC4b8KVok4uw5RftR38Wgp2BFwql; expires=Thu, 23-Jul-2015 10:25:33 GMT; Max-Age=31449600; Path=/</span><br></pre></td></tr></table></figure></p>\n<p>然后使用javascript读取token的值，在发送http请求的时候将其作为请求的header</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-CSRF-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql</span><br></pre></td></tr></table></figure>\n<p>最后服务器验证请求头的 token 是否合法。</p>\n<h2 id=\"二次验证\"><a href=\"#二次验证\" class=\"headerlink\" title=\"二次验证\"></a>二次验证</h2><p>如用户付账输入密码，短信验证码验证等</p>\n<h2 id=\"验证码\"><a href=\"#验证码\" class=\"headerlink\" title=\"验证码\"></a>验证码</h2><p>使用验证码可以杜绝CSRF攻击，但是这种方式要求每个请求都输入一个验证码，显然没有哪个网站愿意使用这种粗暴的方式，用户体验太差，用户会疯掉的。</p>\n<h2 id=\"验证-Referer\"><a href=\"#验证-Referer\" class=\"headerlink\" title=\"验证 Referer\"></a>验证 Referer</h2><p>HTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF 攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证 Referer 值来防御 CSRF 攻击。</p>\n<p>然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</p>\n<p>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p>\n<h1 id=\"Java-项目实践\"><a href=\"#Java-项目实践\" class=\"headerlink\" title=\"Java 项目实践\"></a>Java 项目实践</h1><p>目前项目中采取的是 Referer 和 Cookie-to-Header 同时验证的方式</p>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证 Referer</span></span><br><span class=\"line\">String referer = WebUtil.getReferer(request);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (StringUtil.isEmpty(referer)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RRException(Errors.EMPTY_REFERER);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!referer.contains(PathUtil.getUrlBase().toString())) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RRException(Errors.ERROR_REFERER);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>token 验证可以参考 <a href=\"https://github.com/bdemers/shiro/blob/csrf-and-remember-me-with-JWT/web/src/main/java/org/apache/shiro/web/csrf/StatelessJwtCsrfTokenRepository.java\" target=\"_blank\" rel=\"noopener\">shiro github</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>简单来说，CSRF 其实就是黑客利用浏览器存储用户 Cookie 这一特性，来模拟用户发起一次带有认证信息的请求，比如转账、修改密码等。防护 CSRF 的原理也很简单，在这些请求中，加入一些黑客无法得到的参数信息即可，比如 CSRF Token 或者独立的支付密码等。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://github.com/bdemers/shiro/blob/csrf-and-remember-me-with-JWT/web/src/main/java/org/apache/shiro/web/csrf/StatelessJwtCsrfTokenRepository.java\" target=\"_blank\" rel=\"noopener\">shiro github</a></li>\n<li><a href=\"https://github.com/bdemers/shiro/pull/1/files#diff-0\" target=\"_blank\" rel=\"noopener\">shiro github push issue</a></li>\n<li><a href=\"https://www.jianshu.com/p/b99dc31f1e9f\" target=\"_blank\" rel=\"noopener\">CSRF 攻击</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CSRF-攻击是什么？\"><a href=\"#CSRF-攻击是什么？\" class=\"headerlink\" title=\"CSRF 攻击是什么？\"></a>CSRF 攻击是什么？</h1><p>CSRF：跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>\n<p>CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。例如通过QQ等聊天软件发送的链接(有些还伪装成短域名，用户无法分辨)，攻击者就能迫使Web应用的用户去执行攻击者预设的操作。例如，当用户登录网络银行去查看其存款余额，在他没有退出时，就点击了一个QQ好友发来的链接，那么该用户银行帐户中的资金就有可能被转移到攻击者指定的帐户中。</p>\n<h1 id=\"CSRF-原理\"><a href=\"#CSRF-原理\" class=\"headerlink\" title=\"CSRF 原理\"></a>CSRF 原理</h1><p>要完成一个CSRF攻击，必须具备以下几个条件：</p>\n<ul>\n<li><p>受害者已经登录到了目标网站（你的网站）并且没有退出</p>\n</li>\n<li><p>受害者有意或者无意的访问了攻击者发布的页面或者链接地址</p>\n</li>\n</ul>\n<p>整个步骤大致是这个样子的：</p>\n<ol>\n<li><p>用户小明在你的网站A上面登录了，A返回了一个session ID（使用cookie存储）</p>\n</li>\n<li><p>小明的浏览器保持着在A网站的登录状态，事实上几乎所有的网站都是这样做的，一般至少是用户关闭浏览器之前用户的会话是不会结束的</p>\n</li>\n<li><p>攻击者小强给小明发送了一个链接地址，小明打开了这个地址，查看了网页的内容</p>\n</li>\n<li><p>小明在打开这个地址的时候，这个页面已经自动的对网站A发送了一个请求，这时候因为A网站没有退出，因此只要请求的地址是A的就会携带A的cookie信息，也就是使用A与小明之间的会话</p>\n</li>\n<li><p>这时候A网站肯定是不知道这个请求其实是小强伪造的网页上发送的，而是误以为小明就是要这样操作，这样小强就可以随意的更改小明在A上的信息，以小明的身份在A网站上进行操作</p>\n</li>\n</ol>\n<p>整个过程大概如图所示：<br><img src=\"https://file.peach.ren/2020/06/csrf-process.png/s\" alt=\"image\"></p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p><img src=\"https://file.peach.ren/2020/06/csrf-process-1.png/s\" alt=\"image\"></p>\n<h2 id=\"Synchronizer-token-pattern\"><a href=\"#Synchronizer-token-pattern\" class=\"headerlink\" title=\"Synchronizer token pattern\"></a>Synchronizer token pattern</h2><p>令牌同步模式（Synchronizer token pattern，简称STP）是在用户请求的页面中的所有表单中嵌入一个token，在服务端验证这个token的技术。token可以是任意的内容，但是一定要保证无法被攻击者猜测到或者查询到。攻击者在请求中无法使用正确的token，因此可以判断出未授权的请求。</p>\n<h2 id=\"Cookie-to-Header-Token\"><a href=\"#Cookie-to-Header-Token\" class=\"headerlink\" title=\"Cookie-to-Header Token\"></a>Cookie-to-Header Token</h2><p>对于使用Js作为主要交互技术的网站，将CSRF的token写入到cookie中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: CSRF-token=i8XNjC4b8KVok4uw5RftR38Wgp2BFwql; expires=Thu, 23-Jul-2015 10:25:33 GMT; Max-Age=31449600; Path=/</span><br></pre></td></tr></table></figure></p>\n<p>然后使用javascript读取token的值，在发送http请求的时候将其作为请求的header</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-CSRF-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql</span><br></pre></td></tr></table></figure>\n<p>最后服务器验证请求头的 token 是否合法。</p>\n<h2 id=\"二次验证\"><a href=\"#二次验证\" class=\"headerlink\" title=\"二次验证\"></a>二次验证</h2><p>如用户付账输入密码，短信验证码验证等</p>\n<h2 id=\"验证码\"><a href=\"#验证码\" class=\"headerlink\" title=\"验证码\"></a>验证码</h2><p>使用验证码可以杜绝CSRF攻击，但是这种方式要求每个请求都输入一个验证码，显然没有哪个网站愿意使用这种粗暴的方式，用户体验太差，用户会疯掉的。</p>\n<h2 id=\"验证-Referer\"><a href=\"#验证-Referer\" class=\"headerlink\" title=\"验证 Referer\"></a>验证 Referer</h2><p>HTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF 攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证 Referer 值来防御 CSRF 攻击。</p>\n<p>然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</p>\n<p>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p>\n<h1 id=\"Java-项目实践\"><a href=\"#Java-项目实践\" class=\"headerlink\" title=\"Java 项目实践\"></a>Java 项目实践</h1><p>目前项目中采取的是 Referer 和 Cookie-to-Header 同时验证的方式</p>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证 Referer</span></span><br><span class=\"line\">String referer = WebUtil.getReferer(request);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (StringUtil.isEmpty(referer)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RRException(Errors.EMPTY_REFERER);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!referer.contains(PathUtil.getUrlBase().toString())) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RRException(Errors.ERROR_REFERER);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>token 验证可以参考 <a href=\"https://github.com/bdemers/shiro/blob/csrf-and-remember-me-with-JWT/web/src/main/java/org/apache/shiro/web/csrf/StatelessJwtCsrfTokenRepository.java\" target=\"_blank\" rel=\"noopener\">shiro github</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>简单来说，CSRF 其实就是黑客利用浏览器存储用户 Cookie 这一特性，来模拟用户发起一次带有认证信息的请求，比如转账、修改密码等。防护 CSRF 的原理也很简单，在这些请求中，加入一些黑客无法得到的参数信息即可，比如 CSRF Token 或者独立的支付密码等。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://github.com/bdemers/shiro/blob/csrf-and-remember-me-with-JWT/web/src/main/java/org/apache/shiro/web/csrf/StatelessJwtCsrfTokenRepository.java\" target=\"_blank\" rel=\"noopener\">shiro github</a></li>\n<li><a href=\"https://github.com/bdemers/shiro/pull/1/files#diff-0\" target=\"_blank\" rel=\"noopener\">shiro github push issue</a></li>\n<li><a href=\"https://www.jianshu.com/p/b99dc31f1e9f\" target=\"_blank\" rel=\"noopener\">CSRF 攻击</a></li>\n</ul>\n"},{"title":"哈希简介及冲突处理","abbrlink":"97310931","date":"2019-07-19T06:51:35.000Z","_content":"\n# 简介\n根据维基百科介绍，散列函数（英语：Hash function）又称散列算法、哈希函数，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表，好的散列函数在输入域中很少出现散列冲突。\n\n# 性质\n所有散列函数都有如下一个基本特性：如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果，具有这种性质的散列函数称为单向散列函数。但另一方面，散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“散列碰撞（collision）”，这通常是两个不同长度的输入值，刻意计算出相同的输出值。输入一些数据计算出散列值，然后部分改变输入值，一个具有强混淆特性的散列函数会产生一个完全不同的散列值。\n\n典型的散列函数都有非常大的定义域，比如SHA-2最高接受(264-1)/8长度的字节字符串。同时散列函数一定有着有限的值域，比如固定长度的比特串。在某些情况下，散列函数可以设计成具有相同大小的定义域和值域间的单射。在密码学中，散列函数必须具有不可逆性。\n\n# 解决哈希冲突的方法\n由于哈希算法被计算的数据是无限的，而计算后的结果范围有限，因此总会存在不同的数据经过计算后得到的值相同，这就是哈希冲突。\n\n解决哈希冲突一般有以下几种方法：\n* 开放定址法\n* 链地址法（拉链法）\n* 再哈希法\n* 建立公共溢出区\n\n## 开放定址法\n从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。\n\n在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。\n开放定址法的缺点在于删除元素的时候不能真的删除，否则会引起查找错误（查找到空的时候，结束查找，这样当前删除的元素后的数据就不会再匹配查找了），只能做一个特殊标记。只到有下个元素插入才能真正删除该元素。\n\n### 线性探查法\n线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。\n\n### 平方探查法\n平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上或减去 1²、 2²等。即d[i] +- 1²，d[i] +- 2², d[i] +- 3²...直到找到空闲单元。\n在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。\n\n### 双散列函数探查法\n**使用双散列方法可以避免二级聚集。双散列法使用两个散列函数，第一个散列函数计算探针序列的起始值，第二个散列函数计算下一个位置的探查步长。**\n\n这种方法使用两个散列函数 hl 和 h2。其中 hl 和前面的 h 一样，以关键字为自变量，产生一个 0 m—l 之间的数作为散列地址；h2 也以关键字为自变量，产生一个 l 至 m—1 之间的、并和 m 互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值 l；对于平方探查法，探查序列的步长值是探查次数i的两倍减 l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。\n\n## 链地址法（拉链法）\n链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。\n如一组数字,(32、40、36、53、16、46、71、27、42、24、49、64)哈希表长度为 13，哈希函数为 H(key) = key % 13,则链表法结果如下：\n\n```\n0       \n1  -> 40 -> 27 -> 53 \n2\n3  -> 16 -> 42\n4\n5\n6  -> 32 -> 71\n7  -> 46\n8\n9\n10 -> 36 -> 49\n11 -> 24\n12 -> 64\n```\n\n> 注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。\n\n## 再哈希法\n就是同时构造多个不同的哈希函数：\nHi = RHi(key) i= 1,2,3 ... k;\n当 H1 = RH1(key) 发生冲突时，再用 H2 = RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。\n\n## 建立公共溢出区\n将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。\n\n# 参考\n* [哈希函数-维基百科](https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8)\n* [解决哈希冲突的方法](https://www.jianshu.com/p/4d3cb99d7580)","source":"_posts/hash-intro.md","raw":"---\ntitle: 哈希简介及冲突处理\ncategories:\n  - 技术\ntags:\n  - 算法\nabbrlink: '97310931'\ndate: 2019-07-19 14:51:35\n---\n\n# 简介\n根据维基百科介绍，散列函数（英语：Hash function）又称散列算法、哈希函数，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表，好的散列函数在输入域中很少出现散列冲突。\n\n# 性质\n所有散列函数都有如下一个基本特性：如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果，具有这种性质的散列函数称为单向散列函数。但另一方面，散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“散列碰撞（collision）”，这通常是两个不同长度的输入值，刻意计算出相同的输出值。输入一些数据计算出散列值，然后部分改变输入值，一个具有强混淆特性的散列函数会产生一个完全不同的散列值。\n\n典型的散列函数都有非常大的定义域，比如SHA-2最高接受(264-1)/8长度的字节字符串。同时散列函数一定有着有限的值域，比如固定长度的比特串。在某些情况下，散列函数可以设计成具有相同大小的定义域和值域间的单射。在密码学中，散列函数必须具有不可逆性。\n\n# 解决哈希冲突的方法\n由于哈希算法被计算的数据是无限的，而计算后的结果范围有限，因此总会存在不同的数据经过计算后得到的值相同，这就是哈希冲突。\n\n解决哈希冲突一般有以下几种方法：\n* 开放定址法\n* 链地址法（拉链法）\n* 再哈希法\n* 建立公共溢出区\n\n## 开放定址法\n从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。\n\n在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。\n开放定址法的缺点在于删除元素的时候不能真的删除，否则会引起查找错误（查找到空的时候，结束查找，这样当前删除的元素后的数据就不会再匹配查找了），只能做一个特殊标记。只到有下个元素插入才能真正删除该元素。\n\n### 线性探查法\n线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。\n\n### 平方探查法\n平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上或减去 1²、 2²等。即d[i] +- 1²，d[i] +- 2², d[i] +- 3²...直到找到空闲单元。\n在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。\n\n### 双散列函数探查法\n**使用双散列方法可以避免二级聚集。双散列法使用两个散列函数，第一个散列函数计算探针序列的起始值，第二个散列函数计算下一个位置的探查步长。**\n\n这种方法使用两个散列函数 hl 和 h2。其中 hl 和前面的 h 一样，以关键字为自变量，产生一个 0 m—l 之间的数作为散列地址；h2 也以关键字为自变量，产生一个 l 至 m—1 之间的、并和 m 互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值 l；对于平方探查法，探查序列的步长值是探查次数i的两倍减 l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。\n\n## 链地址法（拉链法）\n链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。\n如一组数字,(32、40、36、53、16、46、71、27、42、24、49、64)哈希表长度为 13，哈希函数为 H(key) = key % 13,则链表法结果如下：\n\n```\n0       \n1  -> 40 -> 27 -> 53 \n2\n3  -> 16 -> 42\n4\n5\n6  -> 32 -> 71\n7  -> 46\n8\n9\n10 -> 36 -> 49\n11 -> 24\n12 -> 64\n```\n\n> 注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。\n\n## 再哈希法\n就是同时构造多个不同的哈希函数：\nHi = RHi(key) i= 1,2,3 ... k;\n当 H1 = RH1(key) 发生冲突时，再用 H2 = RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。\n\n## 建立公共溢出区\n将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。\n\n# 参考\n* [哈希函数-维基百科](https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8)\n* [解决哈希冲突的方法](https://www.jianshu.com/p/4d3cb99d7580)","slug":"hash-intro","published":1,"updated":"2019-07-19T06:53:05.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb7mrm500001ljy8v5xwxb3h","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>根据维基百科介绍，散列函数（英语：Hash function）又称散列算法、哈希函数，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表，好的散列函数在输入域中很少出现散列冲突。</p>\n<h1 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h1><p>所有散列函数都有如下一个基本特性：如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果，具有这种性质的散列函数称为单向散列函数。但另一方面，散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“散列碰撞（collision）”，这通常是两个不同长度的输入值，刻意计算出相同的输出值。输入一些数据计算出散列值，然后部分改变输入值，一个具有强混淆特性的散列函数会产生一个完全不同的散列值。</p>\n<p>典型的散列函数都有非常大的定义域，比如SHA-2最高接受(264-1)/8长度的字节字符串。同时散列函数一定有着有限的值域，比如固定长度的比特串。在某些情况下，散列函数可以设计成具有相同大小的定义域和值域间的单射。在密码学中，散列函数必须具有不可逆性。</p>\n<h1 id=\"解决哈希冲突的方法\"><a href=\"#解决哈希冲突的方法\" class=\"headerlink\" title=\"解决哈希冲突的方法\"></a>解决哈希冲突的方法</h1><p>由于哈希算法被计算的数据是无限的，而计算后的结果范围有限，因此总会存在不同的数据经过计算后得到的值相同，这就是哈希冲突。</p>\n<p>解决哈希冲突一般有以下几种方法：</p>\n<ul>\n<li>开放定址法</li>\n<li>链地址法（拉链法）</li>\n<li>再哈希法</li>\n<li>建立公共溢出区</li>\n</ul>\n<h2 id=\"开放定址法\"><a href=\"#开放定址法\" class=\"headerlink\" title=\"开放定址法\"></a>开放定址法</h2><p>从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。</p>\n<p>在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。<br>开放定址法的缺点在于删除元素的时候不能真的删除，否则会引起查找错误（查找到空的时候，结束查找，这样当前删除的元素后的数据就不会再匹配查找了），只能做一个特殊标记。只到有下个元素插入才能真正删除该元素。</p>\n<h3 id=\"线性探查法\"><a href=\"#线性探查法\" class=\"headerlink\" title=\"线性探查法\"></a>线性探查法</h3><p>线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。</p>\n<h3 id=\"平方探查法\"><a href=\"#平方探查法\" class=\"headerlink\" title=\"平方探查法\"></a>平方探查法</h3><p>平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上或减去 1²、 2²等。即d[i] +- 1²，d[i] +- 2², d[i] +- 3²…直到找到空闲单元。<br>在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。</p>\n<h3 id=\"双散列函数探查法\"><a href=\"#双散列函数探查法\" class=\"headerlink\" title=\"双散列函数探查法\"></a>双散列函数探查法</h3><p><strong>使用双散列方法可以避免二级聚集。双散列法使用两个散列函数，第一个散列函数计算探针序列的起始值，第二个散列函数计算下一个位置的探查步长。</strong></p>\n<p>这种方法使用两个散列函数 hl 和 h2。其中 hl 和前面的 h 一样，以关键字为自变量，产生一个 0 m—l 之间的数作为散列地址；h2 也以关键字为自变量，产生一个 l 至 m—1 之间的、并和 m 互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值 l；对于平方探查法，探查序列的步长值是探查次数i的两倍减 l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。</p>\n<h2 id=\"链地址法（拉链法）\"><a href=\"#链地址法（拉链法）\" class=\"headerlink\" title=\"链地址法（拉链法）\"></a>链地址法（拉链法）</h2><p>链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。<br>如一组数字,(32、40、36、53、16、46、71、27、42、24、49、64)哈希表长度为 13，哈希函数为 H(key) = key % 13,则链表法结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0       </span><br><span class=\"line\">1  -&gt; 40 -&gt; 27 -&gt; 53 </span><br><span class=\"line\">2</span><br><span class=\"line\">3  -&gt; 16 -&gt; 42</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6  -&gt; 32 -&gt; 71</span><br><span class=\"line\">7  -&gt; 46</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10 -&gt; 36 -&gt; 49</span><br><span class=\"line\">11 -&gt; 24</span><br><span class=\"line\">12 -&gt; 64</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。</p>\n</blockquote>\n<h2 id=\"再哈希法\"><a href=\"#再哈希法\" class=\"headerlink\" title=\"再哈希法\"></a>再哈希法</h2><p>就是同时构造多个不同的哈希函数：<br>Hi = RHi(key) i= 1,2,3 … k;<br>当 H1 = RH1(key) 发生冲突时，再用 H2 = RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。</p>\n<h2 id=\"建立公共溢出区\"><a href=\"#建立公共溢出区\" class=\"headerlink\" title=\"建立公共溢出区\"></a>建立公共溢出区</h2><p>将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8\" target=\"_blank\" rel=\"noopener\">哈希函数-维基百科</a></li>\n<li><a href=\"https://www.jianshu.com/p/4d3cb99d7580\" target=\"_blank\" rel=\"noopener\">解决哈希冲突的方法</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>根据维基百科介绍，散列函数（英语：Hash function）又称散列算法、哈希函数，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表，好的散列函数在输入域中很少出现散列冲突。</p>\n<h1 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h1><p>所有散列函数都有如下一个基本特性：如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果，具有这种性质的散列函数称为单向散列函数。但另一方面，散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“散列碰撞（collision）”，这通常是两个不同长度的输入值，刻意计算出相同的输出值。输入一些数据计算出散列值，然后部分改变输入值，一个具有强混淆特性的散列函数会产生一个完全不同的散列值。</p>\n<p>典型的散列函数都有非常大的定义域，比如SHA-2最高接受(264-1)/8长度的字节字符串。同时散列函数一定有着有限的值域，比如固定长度的比特串。在某些情况下，散列函数可以设计成具有相同大小的定义域和值域间的单射。在密码学中，散列函数必须具有不可逆性。</p>\n<h1 id=\"解决哈希冲突的方法\"><a href=\"#解决哈希冲突的方法\" class=\"headerlink\" title=\"解决哈希冲突的方法\"></a>解决哈希冲突的方法</h1><p>由于哈希算法被计算的数据是无限的，而计算后的结果范围有限，因此总会存在不同的数据经过计算后得到的值相同，这就是哈希冲突。</p>\n<p>解决哈希冲突一般有以下几种方法：</p>\n<ul>\n<li>开放定址法</li>\n<li>链地址法（拉链法）</li>\n<li>再哈希法</li>\n<li>建立公共溢出区</li>\n</ul>\n<h2 id=\"开放定址法\"><a href=\"#开放定址法\" class=\"headerlink\" title=\"开放定址法\"></a>开放定址法</h2><p>从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。</p>\n<p>在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。<br>开放定址法的缺点在于删除元素的时候不能真的删除，否则会引起查找错误（查找到空的时候，结束查找，这样当前删除的元素后的数据就不会再匹配查找了），只能做一个特殊标记。只到有下个元素插入才能真正删除该元素。</p>\n<h3 id=\"线性探查法\"><a href=\"#线性探查法\" class=\"headerlink\" title=\"线性探查法\"></a>线性探查法</h3><p>线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。</p>\n<h3 id=\"平方探查法\"><a href=\"#平方探查法\" class=\"headerlink\" title=\"平方探查法\"></a>平方探查法</h3><p>平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上或减去 1²、 2²等。即d[i] +- 1²，d[i] +- 2², d[i] +- 3²…直到找到空闲单元。<br>在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。</p>\n<h3 id=\"双散列函数探查法\"><a href=\"#双散列函数探查法\" class=\"headerlink\" title=\"双散列函数探查法\"></a>双散列函数探查法</h3><p><strong>使用双散列方法可以避免二级聚集。双散列法使用两个散列函数，第一个散列函数计算探针序列的起始值，第二个散列函数计算下一个位置的探查步长。</strong></p>\n<p>这种方法使用两个散列函数 hl 和 h2。其中 hl 和前面的 h 一样，以关键字为自变量，产生一个 0 m—l 之间的数作为散列地址；h2 也以关键字为自变量，产生一个 l 至 m—1 之间的、并和 m 互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值 l；对于平方探查法，探查序列的步长值是探查次数i的两倍减 l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。</p>\n<h2 id=\"链地址法（拉链法）\"><a href=\"#链地址法（拉链法）\" class=\"headerlink\" title=\"链地址法（拉链法）\"></a>链地址法（拉链法）</h2><p>链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。<br>如一组数字,(32、40、36、53、16、46、71、27、42、24、49、64)哈希表长度为 13，哈希函数为 H(key) = key % 13,则链表法结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0       </span><br><span class=\"line\">1  -&gt; 40 -&gt; 27 -&gt; 53 </span><br><span class=\"line\">2</span><br><span class=\"line\">3  -&gt; 16 -&gt; 42</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6  -&gt; 32 -&gt; 71</span><br><span class=\"line\">7  -&gt; 46</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10 -&gt; 36 -&gt; 49</span><br><span class=\"line\">11 -&gt; 24</span><br><span class=\"line\">12 -&gt; 64</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。</p>\n</blockquote>\n<h2 id=\"再哈希法\"><a href=\"#再哈希法\" class=\"headerlink\" title=\"再哈希法\"></a>再哈希法</h2><p>就是同时构造多个不同的哈希函数：<br>Hi = RHi(key) i= 1,2,3 … k;<br>当 H1 = RH1(key) 发生冲突时，再用 H2 = RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。</p>\n<h2 id=\"建立公共溢出区\"><a href=\"#建立公共溢出区\" class=\"headerlink\" title=\"建立公共溢出区\"></a>建立公共溢出区</h2><p>将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8\" target=\"_blank\" rel=\"noopener\">哈希函数-维基百科</a></li>\n<li><a href=\"https://www.jianshu.com/p/4d3cb99d7580\" target=\"_blank\" rel=\"noopener\">解决哈希冲突的方法</a></li>\n</ul>\n"},{"title":"docker 结合 spring boot 项目运行","abbrlink":"26e25788","date":"2019-06-19T04:04:15.000Z","_content":"\n这两天，想把自己的项目放到 docker 容器中运行，按照下面的步骤，你也能成功运行起来。这里是基于 gradle 配置的，maven 配置类似，如果是 maven 配置的也可以参考网上。首先看下 docker 常用的命令\n# 命令\n## 镜像相关\n### 镜像仓库相关\n1. 查找镜像\n\n> docker search 【条件】\n\n```\n## 查询 3 颗星及以上且名字包含 mysql 的镜像\ndocker search -f=stars=3 mysql\n```\n\n2. 获取镜像\n\n> docker pull 【仓库】:【tag】\n\n仓库格式为 [仓库url]/[用户名]/[应用名] , 除了官方仓库外的第三方仓库要指定 url, 用户名就是在对应仓库下建立的账户, 一般只有应用名的仓库代表 官方镜像, 如 ubuntu、tomcat 等, 而 tag 表示镜像的版本号, 不指定时默认为 latest。\n\n```\n# 获取alpine Linux 的镜像\ndocker pull alpine\n```\n\n3. 推送镜像到仓库\n\n> docker push [镜像名]:[tag]\n\n### 本地镜像\n1. 查看本地镜像\n\n> docker images\n\n2. 删除本地镜像\n\n> docker rmi 【镜像名 or 镜像 id】\n\n3. 查看镜像详情\n\n> docker inspect 【镜像名 or 镜像 id】\n\n4. 打包本地镜像，使用压缩包来完成迁移\n\n> docker save 【镜像名】>【文件路径】\n\n```\n# 默认为文件流输出\ndocker save alpine > /usr/anyesu/docker/alpine.img\n\n# 或者使用 '-o' 选项指定输出文件路径\ndocker save -o /usr/anyesu/docker/alpine.img alpine\n```\n\n5. 导入镜像压缩包\n\n> docker load < 【文件路径】\n\n```\n# 默认从标准输入读取\nubuntu@VM-84-201-ubuntu:~$ docker load < /usr/anyesu/docker/alpine.img\n3fb66f713c9f: Loading layer [==================================================>]  4.221MB/4.221MB\nLoaded image: alpine:latest\n\n# 用 '-i' 选项指定输入文件路径\nubuntu@VM-84-201-ubuntu:~$ docker load -i /usr/anyesu/docker/alpine.img\nLoaded image: alpine:latest\nLoaded image ID: sha256:665ffb03bfaea7d8b7472edc0a741b429267db249b1fcead457886e861eae25f\nLoaded image ID: sha256:a41a7446062d197dd4b21b38122dcc7b2399deb0750c4110925a7dd37c80f118\n```\n\n6. 修改镜像 tag\n\n> docker tag [ 镜像名 or 镜像 id ] [ 新镜像名 ]:[ 新 tag ]\n\n```\ndocker tag a41 anyesu/alpine:1.0\n```\n\n## 容器相关\n1. 创建、启动容器并执行相应的命令\n\n> docker run [ 参数 ] [ 镜像名 or 镜像 id ] [ 命令 ]\n\nrun 命令常用选项：\n\n\n选项 | 说明\n---|---\n-d | 后台运行容器，并返回容器 ID；不指定时，启动后开始打印日志，ctrl + c 退出命令同时会关闭容器\n-i | 以交互模式运行容器，通常与 -t 同时使用\n-t | 为容器重新分配一个伪输入终端，通常与 -i 同时使用\n--name 【name】 | 为容器指定一个别名，不指定时随机生成\n-h 【name】 | 设置容器的主机名，默认随机生成\n-dns 【dns】 | 指定容器使用的 DNS 服务器，默认和宿主机一致\n-e 【environment】 | 设置环境变量\n-cpuset=\"0-2\" or -cpu=\"0,1,2\" | 绑定容器到指定 CPU 运行\n-m 100M | 指定容器使用内存最大值\n--net bridge | 指定容器的网络连接类型，支持 bridge / host / none / container 四种类型\n-ip 【ip】 | 为容器分配固定 ip，需要使用自定义网络\n--expose 8081 --expose 8082 | 开放一个或一组端口，会覆盖镜像中开放的端口\n-p [宿主机端口]:[容器内端口] | 宿主机到容器的端口映射, 可指定宿主机的要监听的 ip, 默认为 0.0.0.0\n-P | 注意是大写的, 宿主机随机指定一组可用的端口映射容器 expose 的所有端口\n-v [宿主机目录路径]:[容器内目录路径] | 挂载宿主机的指定目录 ( 或文件 ) 到容器内的指定目录 ( 或文件 )\n--add-host [主机名]:[ip] | 为容器 hosts 文件追加 host , 默认会在 hosts 文件最后追加内容：[主机名]:[容器ip]\n--volumes-from [其他容器名] | 将其他容器的数据卷添加到此容器\n--link [其他容器名]:[在该容器中的别名] | 添加链接到另一个容器, 在本容器 hosts 文件中加入关联容器的记录, 效果类似于 --add-host\n\n> 单字符选项可以合并, 如 -i -t 可以合并为 -it\n\n2. 查看运行中的容器\n\n> docker ps\n\n加 -a 选项可以查看所有的容器\n\n3. 开启/停止/重启容器\n\n> 关闭容器(发送SIGTERM信号,做一些'退出前工作',再发送SIGKILL信号)\n>\n```\ndocker stop anyesu-container\n```\n\n> 强制关闭容器(默认发送SIGKILL信号, 加-s参数可以发送其他信号)\n```\ndocker kill anyesu-container\n```\n\n> 启动容器\n```\ndocker start anyesu-container\n```\n\n> 重启容器\n```\ndocker restart anyesu-container\n```\n\n4. 删除容器\n\n> docker rm [ 容器名 or 容器 id ]\n\n5. 查看容器详情\n\n> docker inspect [ 容器名 or 容器 id ]\n\n6. 查看容器中正在运行的进程\n \n> docker top [ 容器名 or 容器 id ]\n\n7. 将容器保存为镜像\n\n> docker commit [ 容器名 or 容器 id ] [ 镜像名 ]:[ tag ]\n\n8. 使用 Dockerfile 构建镜像\n\n> docker build -t [ 镜像名 ]:[ tag ] -f [ DockerFile 名 ] [ DockerFile 所在目录 ]\n\n# 配置\n下面是我项目中的配置，可以作为参考\n\ngradle 配置：\n\n```\n// 放在最上面，优先级比较高\nbuildscript {\n    repositories {\n        maven {\n            url \"https://plugins.gradle.org/m2/\"\n        }\n    }\n    dependencies {\n        classpath \"gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4\"\n        classpath \"org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE\"\n    }\n}\n\nplugins {\n    id 'java'\n    id \"com.arenagod.gradle.MybatisGenerator\" version \"1.4\"\n    id \"org.sglahn.gradle-dockerfile-plugin\" version \"0.4\"\n}\n\napply plugin: 'com.arenagod.gradle.MybatisGenerator'\napply plugin: 'jacoco'\napply plugin: 'java'\napply plugin: 'groovy'\napply plugin: 'org.springframework.boot'\n\ngroup 'com.dxy'\nversion '1.0'\n\njar {\n    baseName = 'turbo'\n    version = '1.0'\n}\n\nsourceCompatibility = 1.8\n\nrepositories {\n    maven {\n        url \"http://maven.aliyun.com/nexus/content/groups/public/\"\n    }\n    dependencies {\n\n    }\n    mavenCentral()\n}\n\nsourceSets {\n    main {\n        java {\n            srcDirs = []\n        }\n        groovy {\n            srcDirs = ['src/main/groovy', 'src/main/java']\n        }\n        test {\n            java {\n                srcDirs = []\n            }\n            groovy {\n                srcDirs = ['src/test/groovy', 'src/test/java']\n            }\n        }\n    }\n}\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.3.RELEASE'\n    compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '2.0.0'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.1.3.RELEASE'\n    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.3.RELEASE'\n    compile group: 'com.alibaba', name: 'druid-spring-boot-starter', version: '1.1.14'\n    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.4'\n    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.47'\n    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'\n    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'\n    // mybatis-generator core 包\n    compile group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.7'\n    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.56'\n    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'\n    compile group: 'org.apache.shiro', name: 'shiro-core', version: '1.4.0'\n    compile group: 'org.apache.shiro', name: 'shiro-spring', version: '1.4.0'\n    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.6'\n    // compile group: 'org.redisson', name: 'redisson-spring-boot-starter', version: '3.10.5'\n}\n\nconfigurations {\n    mybatisGenerator\n}\n// mybatis-generator.xml 配置路径\nmybatisGenerator {\n    verbose = true\n    configFile = './src/main/resources/generatorConfig.xml'\n}\n\n//configuration\ndocker {\n    // Image version. Optional, default = project.version\n    //imageVersion = version\n    // Image name. Optional, default = project.name\n    imageName = 'turbo_docker'\n    // Docker repository. Optional, default == no repository\n    // dockerRepository = 'sglahn'\n    // Path or URL referring to the build context. Optional, default = ${project.projectDir.getAbsolutePath()}\n    // buildContext = 'build-context'\n    // Path to the Dockerfile to use (relative to ${project.projectDir}). Optional, default = ${buildContext}/Dockerfile\n    dockerFile = 'Dockerfile'\n    // Add a list of tags for an image. Optional, default = 'latest'\n    //tags = [version, 'latest', 'Hello']\n    // Set metadata for an image. Optional, default = no label applied\n    //labels = ['branch=master', 'mylabel=test']\n    // name and value of a buildarg. Optional, default = no build arguments\n    //buildArgs = ['http_proxy=\"http://some.proxy.url\"']\n    // Always remove intermediate containers, even after unsuccessful builds. Optional, default = false\n    removeIntermediateContainers = true\n    // Isolation specifies the type of isolation technology used by containers. Optional, default = default\n    //isolation = 'default'\n    // Do not use cache when building the image. Optional, default = false\n    //noCache = true\n    // Always attempt to pull a newer version of the image. Optional, default false\n    //pull = true\n    // Suppress the build output and print image ID on success. Optional, default = true\n    quiet = false\n    // Remove image in local repository after push to a remote repository, useful for builds on CI agents. Optional, default = false\n    //removeImagesAfterPush = true\n}\n```\n\n执行命令：\n```\nbrew info gradle;\nbrew upgrade gradle;\n// 如果报错，可以使用 gradle build dockerBuild 等命令\ngradle build docker\n// 运行命令，将容器内的  8080 端口映射到 127.0.0.1 的 8087 端口\ndocker run -p 127.0.0.1:8087:8080 -t turbo_docker\n```\n\n> 注意：需要主要项目中的端口号的映射，容器里的端口号和你实际运行的端口号不是一个概念，需要手动设置一下。\n\n# 参考\n* [gradle 集成 dockerFile](https://www.jianshu.com/p/3cd9dbc165e9)\n* [通过Gradle使用Docker部署 Spring Boot项目](https://www.jianshu.com/p/7571fa3b394c)\n* [docker 常用命令](https://www.jianshu.com/p/7c9e2247cfbd)","source":"_posts/gradle-docker.md","raw":"---\ntitle: docker 结合 spring boot 项目运行\ncategories:\n  - 技术\ntags:\n  - docker\nabbrlink: '26e25788'\ndate: 2019-06-19 12:04:15\n---\n\n这两天，想把自己的项目放到 docker 容器中运行，按照下面的步骤，你也能成功运行起来。这里是基于 gradle 配置的，maven 配置类似，如果是 maven 配置的也可以参考网上。首先看下 docker 常用的命令\n# 命令\n## 镜像相关\n### 镜像仓库相关\n1. 查找镜像\n\n> docker search 【条件】\n\n```\n## 查询 3 颗星及以上且名字包含 mysql 的镜像\ndocker search -f=stars=3 mysql\n```\n\n2. 获取镜像\n\n> docker pull 【仓库】:【tag】\n\n仓库格式为 [仓库url]/[用户名]/[应用名] , 除了官方仓库外的第三方仓库要指定 url, 用户名就是在对应仓库下建立的账户, 一般只有应用名的仓库代表 官方镜像, 如 ubuntu、tomcat 等, 而 tag 表示镜像的版本号, 不指定时默认为 latest。\n\n```\n# 获取alpine Linux 的镜像\ndocker pull alpine\n```\n\n3. 推送镜像到仓库\n\n> docker push [镜像名]:[tag]\n\n### 本地镜像\n1. 查看本地镜像\n\n> docker images\n\n2. 删除本地镜像\n\n> docker rmi 【镜像名 or 镜像 id】\n\n3. 查看镜像详情\n\n> docker inspect 【镜像名 or 镜像 id】\n\n4. 打包本地镜像，使用压缩包来完成迁移\n\n> docker save 【镜像名】>【文件路径】\n\n```\n# 默认为文件流输出\ndocker save alpine > /usr/anyesu/docker/alpine.img\n\n# 或者使用 '-o' 选项指定输出文件路径\ndocker save -o /usr/anyesu/docker/alpine.img alpine\n```\n\n5. 导入镜像压缩包\n\n> docker load < 【文件路径】\n\n```\n# 默认从标准输入读取\nubuntu@VM-84-201-ubuntu:~$ docker load < /usr/anyesu/docker/alpine.img\n3fb66f713c9f: Loading layer [==================================================>]  4.221MB/4.221MB\nLoaded image: alpine:latest\n\n# 用 '-i' 选项指定输入文件路径\nubuntu@VM-84-201-ubuntu:~$ docker load -i /usr/anyesu/docker/alpine.img\nLoaded image: alpine:latest\nLoaded image ID: sha256:665ffb03bfaea7d8b7472edc0a741b429267db249b1fcead457886e861eae25f\nLoaded image ID: sha256:a41a7446062d197dd4b21b38122dcc7b2399deb0750c4110925a7dd37c80f118\n```\n\n6. 修改镜像 tag\n\n> docker tag [ 镜像名 or 镜像 id ] [ 新镜像名 ]:[ 新 tag ]\n\n```\ndocker tag a41 anyesu/alpine:1.0\n```\n\n## 容器相关\n1. 创建、启动容器并执行相应的命令\n\n> docker run [ 参数 ] [ 镜像名 or 镜像 id ] [ 命令 ]\n\nrun 命令常用选项：\n\n\n选项 | 说明\n---|---\n-d | 后台运行容器，并返回容器 ID；不指定时，启动后开始打印日志，ctrl + c 退出命令同时会关闭容器\n-i | 以交互模式运行容器，通常与 -t 同时使用\n-t | 为容器重新分配一个伪输入终端，通常与 -i 同时使用\n--name 【name】 | 为容器指定一个别名，不指定时随机生成\n-h 【name】 | 设置容器的主机名，默认随机生成\n-dns 【dns】 | 指定容器使用的 DNS 服务器，默认和宿主机一致\n-e 【environment】 | 设置环境变量\n-cpuset=\"0-2\" or -cpu=\"0,1,2\" | 绑定容器到指定 CPU 运行\n-m 100M | 指定容器使用内存最大值\n--net bridge | 指定容器的网络连接类型，支持 bridge / host / none / container 四种类型\n-ip 【ip】 | 为容器分配固定 ip，需要使用自定义网络\n--expose 8081 --expose 8082 | 开放一个或一组端口，会覆盖镜像中开放的端口\n-p [宿主机端口]:[容器内端口] | 宿主机到容器的端口映射, 可指定宿主机的要监听的 ip, 默认为 0.0.0.0\n-P | 注意是大写的, 宿主机随机指定一组可用的端口映射容器 expose 的所有端口\n-v [宿主机目录路径]:[容器内目录路径] | 挂载宿主机的指定目录 ( 或文件 ) 到容器内的指定目录 ( 或文件 )\n--add-host [主机名]:[ip] | 为容器 hosts 文件追加 host , 默认会在 hosts 文件最后追加内容：[主机名]:[容器ip]\n--volumes-from [其他容器名] | 将其他容器的数据卷添加到此容器\n--link [其他容器名]:[在该容器中的别名] | 添加链接到另一个容器, 在本容器 hosts 文件中加入关联容器的记录, 效果类似于 --add-host\n\n> 单字符选项可以合并, 如 -i -t 可以合并为 -it\n\n2. 查看运行中的容器\n\n> docker ps\n\n加 -a 选项可以查看所有的容器\n\n3. 开启/停止/重启容器\n\n> 关闭容器(发送SIGTERM信号,做一些'退出前工作',再发送SIGKILL信号)\n>\n```\ndocker stop anyesu-container\n```\n\n> 强制关闭容器(默认发送SIGKILL信号, 加-s参数可以发送其他信号)\n```\ndocker kill anyesu-container\n```\n\n> 启动容器\n```\ndocker start anyesu-container\n```\n\n> 重启容器\n```\ndocker restart anyesu-container\n```\n\n4. 删除容器\n\n> docker rm [ 容器名 or 容器 id ]\n\n5. 查看容器详情\n\n> docker inspect [ 容器名 or 容器 id ]\n\n6. 查看容器中正在运行的进程\n \n> docker top [ 容器名 or 容器 id ]\n\n7. 将容器保存为镜像\n\n> docker commit [ 容器名 or 容器 id ] [ 镜像名 ]:[ tag ]\n\n8. 使用 Dockerfile 构建镜像\n\n> docker build -t [ 镜像名 ]:[ tag ] -f [ DockerFile 名 ] [ DockerFile 所在目录 ]\n\n# 配置\n下面是我项目中的配置，可以作为参考\n\ngradle 配置：\n\n```\n// 放在最上面，优先级比较高\nbuildscript {\n    repositories {\n        maven {\n            url \"https://plugins.gradle.org/m2/\"\n        }\n    }\n    dependencies {\n        classpath \"gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4\"\n        classpath \"org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE\"\n    }\n}\n\nplugins {\n    id 'java'\n    id \"com.arenagod.gradle.MybatisGenerator\" version \"1.4\"\n    id \"org.sglahn.gradle-dockerfile-plugin\" version \"0.4\"\n}\n\napply plugin: 'com.arenagod.gradle.MybatisGenerator'\napply plugin: 'jacoco'\napply plugin: 'java'\napply plugin: 'groovy'\napply plugin: 'org.springframework.boot'\n\ngroup 'com.dxy'\nversion '1.0'\n\njar {\n    baseName = 'turbo'\n    version = '1.0'\n}\n\nsourceCompatibility = 1.8\n\nrepositories {\n    maven {\n        url \"http://maven.aliyun.com/nexus/content/groups/public/\"\n    }\n    dependencies {\n\n    }\n    mavenCentral()\n}\n\nsourceSets {\n    main {\n        java {\n            srcDirs = []\n        }\n        groovy {\n            srcDirs = ['src/main/groovy', 'src/main/java']\n        }\n        test {\n            java {\n                srcDirs = []\n            }\n            groovy {\n                srcDirs = ['src/test/groovy', 'src/test/java']\n            }\n        }\n    }\n}\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.3.RELEASE'\n    compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '2.0.0'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.1.3.RELEASE'\n    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.3.RELEASE'\n    compile group: 'com.alibaba', name: 'druid-spring-boot-starter', version: '1.1.14'\n    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.4'\n    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.47'\n    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'\n    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'\n    // mybatis-generator core 包\n    compile group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.7'\n    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.56'\n    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'\n    compile group: 'org.apache.shiro', name: 'shiro-core', version: '1.4.0'\n    compile group: 'org.apache.shiro', name: 'shiro-spring', version: '1.4.0'\n    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.6'\n    // compile group: 'org.redisson', name: 'redisson-spring-boot-starter', version: '3.10.5'\n}\n\nconfigurations {\n    mybatisGenerator\n}\n// mybatis-generator.xml 配置路径\nmybatisGenerator {\n    verbose = true\n    configFile = './src/main/resources/generatorConfig.xml'\n}\n\n//configuration\ndocker {\n    // Image version. Optional, default = project.version\n    //imageVersion = version\n    // Image name. Optional, default = project.name\n    imageName = 'turbo_docker'\n    // Docker repository. Optional, default == no repository\n    // dockerRepository = 'sglahn'\n    // Path or URL referring to the build context. Optional, default = ${project.projectDir.getAbsolutePath()}\n    // buildContext = 'build-context'\n    // Path to the Dockerfile to use (relative to ${project.projectDir}). Optional, default = ${buildContext}/Dockerfile\n    dockerFile = 'Dockerfile'\n    // Add a list of tags for an image. Optional, default = 'latest'\n    //tags = [version, 'latest', 'Hello']\n    // Set metadata for an image. Optional, default = no label applied\n    //labels = ['branch=master', 'mylabel=test']\n    // name and value of a buildarg. Optional, default = no build arguments\n    //buildArgs = ['http_proxy=\"http://some.proxy.url\"']\n    // Always remove intermediate containers, even after unsuccessful builds. Optional, default = false\n    removeIntermediateContainers = true\n    // Isolation specifies the type of isolation technology used by containers. Optional, default = default\n    //isolation = 'default'\n    // Do not use cache when building the image. Optional, default = false\n    //noCache = true\n    // Always attempt to pull a newer version of the image. Optional, default false\n    //pull = true\n    // Suppress the build output and print image ID on success. Optional, default = true\n    quiet = false\n    // Remove image in local repository after push to a remote repository, useful for builds on CI agents. Optional, default = false\n    //removeImagesAfterPush = true\n}\n```\n\n执行命令：\n```\nbrew info gradle;\nbrew upgrade gradle;\n// 如果报错，可以使用 gradle build dockerBuild 等命令\ngradle build docker\n// 运行命令，将容器内的  8080 端口映射到 127.0.0.1 的 8087 端口\ndocker run -p 127.0.0.1:8087:8080 -t turbo_docker\n```\n\n> 注意：需要主要项目中的端口号的映射，容器里的端口号和你实际运行的端口号不是一个概念，需要手动设置一下。\n\n# 参考\n* [gradle 集成 dockerFile](https://www.jianshu.com/p/3cd9dbc165e9)\n* [通过Gradle使用Docker部署 Spring Boot项目](https://www.jianshu.com/p/7571fa3b394c)\n* [docker 常用命令](https://www.jianshu.com/p/7c9e2247cfbd)","slug":"gradle-docker","published":1,"updated":"2019-06-19T04:08:13.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb7mrm5b0004ljy8lps0iihj","content":"<p>这两天，想把自己的项目放到 docker 容器中运行，按照下面的步骤，你也能成功运行起来。这里是基于 gradle 配置的，maven 配置类似，如果是 maven 配置的也可以参考网上。首先看下 docker 常用的命令</p>\n<h1 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h1><h2 id=\"镜像相关\"><a href=\"#镜像相关\" class=\"headerlink\" title=\"镜像相关\"></a>镜像相关</h2><h3 id=\"镜像仓库相关\"><a href=\"#镜像仓库相关\" class=\"headerlink\" title=\"镜像仓库相关\"></a>镜像仓库相关</h3><ol>\n<li>查找镜像</li>\n</ol>\n<blockquote>\n<p>docker search 【条件】</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 查询 3 颗星及以上且名字包含 mysql 的镜像</span><br><span class=\"line\">docker search -f=stars=3 mysql</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>获取镜像</li>\n</ol>\n<blockquote>\n<p>docker pull 【仓库】:【tag】</p>\n</blockquote>\n<p>仓库格式为 [仓库url]/[用户名]/[应用名] , 除了官方仓库外的第三方仓库要指定 url, 用户名就是在对应仓库下建立的账户, 一般只有应用名的仓库代表 官方镜像, 如 ubuntu、tomcat 等, 而 tag 表示镜像的版本号, 不指定时默认为 latest。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取alpine Linux 的镜像</span><br><span class=\"line\">docker pull alpine</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>推送镜像到仓库</li>\n</ol>\n<blockquote>\n<p>docker push [镜像名]:[tag]</p>\n</blockquote>\n<h3 id=\"本地镜像\"><a href=\"#本地镜像\" class=\"headerlink\" title=\"本地镜像\"></a>本地镜像</h3><ol>\n<li>查看本地镜像</li>\n</ol>\n<blockquote>\n<p>docker images</p>\n</blockquote>\n<ol start=\"2\">\n<li>删除本地镜像</li>\n</ol>\n<blockquote>\n<p>docker rmi 【镜像名 or 镜像 id】</p>\n</blockquote>\n<ol start=\"3\">\n<li>查看镜像详情</li>\n</ol>\n<blockquote>\n<p>docker inspect 【镜像名 or 镜像 id】</p>\n</blockquote>\n<ol start=\"4\">\n<li>打包本地镜像，使用压缩包来完成迁移</li>\n</ol>\n<blockquote>\n<p>docker save 【镜像名】&gt;【文件路径】</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认为文件流输出</span><br><span class=\"line\">docker save alpine &gt; /usr/anyesu/docker/alpine.img</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者使用 &apos;-o&apos; 选项指定输出文件路径</span><br><span class=\"line\">docker save -o /usr/anyesu/docker/alpine.img alpine</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>导入镜像压缩包</li>\n</ol>\n<blockquote>\n<p>docker load &lt; 【文件路径】</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认从标准输入读取</span><br><span class=\"line\">ubuntu@VM-84-201-ubuntu:~$ docker load &lt; /usr/anyesu/docker/alpine.img</span><br><span class=\"line\">3fb66f713c9f: Loading layer [==================================================&gt;]  4.221MB/4.221MB</span><br><span class=\"line\">Loaded image: alpine:latest</span><br><span class=\"line\"></span><br><span class=\"line\"># 用 &apos;-i&apos; 选项指定输入文件路径</span><br><span class=\"line\">ubuntu@VM-84-201-ubuntu:~$ docker load -i /usr/anyesu/docker/alpine.img</span><br><span class=\"line\">Loaded image: alpine:latest</span><br><span class=\"line\">Loaded image ID: sha256:665ffb03bfaea7d8b7472edc0a741b429267db249b1fcead457886e861eae25f</span><br><span class=\"line\">Loaded image ID: sha256:a41a7446062d197dd4b21b38122dcc7b2399deb0750c4110925a7dd37c80f118</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>修改镜像 tag</li>\n</ol>\n<blockquote>\n<p>docker tag [ 镜像名 or 镜像 id ] [ 新镜像名 ]:[ 新 tag ]</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag a41 anyesu/alpine:1.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"容器相关\"><a href=\"#容器相关\" class=\"headerlink\" title=\"容器相关\"></a>容器相关</h2><ol>\n<li>创建、启动容器并执行相应的命令</li>\n</ol>\n<blockquote>\n<p>docker run [ 参数 ] [ 镜像名 or 镜像 id ] [ 命令 ]</p>\n</blockquote>\n<p>run 命令常用选项：</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d</td>\n<td>后台运行容器，并返回容器 ID；不指定时，启动后开始打印日志，ctrl + c 退出命令同时会关闭容器</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>以交互模式运行容器，通常与 -t 同时使用</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>为容器重新分配一个伪输入终端，通常与 -i 同时使用</td>\n</tr>\n<tr>\n<td>–name 【name】</td>\n<td>为容器指定一个别名，不指定时随机生成</td>\n</tr>\n<tr>\n<td>-h 【name】</td>\n<td>设置容器的主机名，默认随机生成</td>\n</tr>\n<tr>\n<td>-dns 【dns】</td>\n<td>指定容器使用的 DNS 服务器，默认和宿主机一致</td>\n</tr>\n<tr>\n<td>-e 【environment】</td>\n<td>设置环境变量</td>\n</tr>\n<tr>\n<td>-cpuset=”0-2” or -cpu=”0,1,2”</td>\n<td>绑定容器到指定 CPU 运行</td>\n</tr>\n<tr>\n<td>-m 100M</td>\n<td>指定容器使用内存最大值</td>\n</tr>\n<tr>\n<td>–net bridge</td>\n<td>指定容器的网络连接类型，支持 bridge / host / none / container 四种类型</td>\n</tr>\n<tr>\n<td>-ip 【ip】</td>\n<td>为容器分配固定 ip，需要使用自定义网络</td>\n</tr>\n<tr>\n<td>–expose 8081 –expose 8082</td>\n<td>开放一个或一组端口，会覆盖镜像中开放的端口</td>\n</tr>\n<tr>\n<td>-p [宿主机端口]:[容器内端口]</td>\n<td>宿主机到容器的端口映射, 可指定宿主机的要监听的 ip, 默认为 0.0.0.0</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>注意是大写的, 宿主机随机指定一组可用的端口映射容器 expose 的所有端口</td>\n</tr>\n<tr>\n<td>-v [宿主机目录路径]:[容器内目录路径]</td>\n<td>挂载宿主机的指定目录 ( 或文件 ) 到容器内的指定目录 ( 或文件 )</td>\n</tr>\n<tr>\n<td>–add-host [主机名]:[ip]</td>\n<td>为容器 hosts 文件追加 host , 默认会在 hosts 文件最后追加内容：[主机名]:[容器ip]</td>\n</tr>\n<tr>\n<td>–volumes-from [其他容器名]</td>\n<td>将其他容器的数据卷添加到此容器</td>\n</tr>\n<tr>\n<td>–link [其他容器名]:[在该容器中的别名]</td>\n<td>添加链接到另一个容器, 在本容器 hosts 文件中加入关联容器的记录, 效果类似于 –add-host</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>单字符选项可以合并, 如 -i -t 可以合并为 -it</p>\n</blockquote>\n<ol start=\"2\">\n<li>查看运行中的容器</li>\n</ol>\n<blockquote>\n<p>docker ps</p>\n</blockquote>\n<p>加 -a 选项可以查看所有的容器</p>\n<ol start=\"3\">\n<li>开启/停止/重启容器</li>\n</ol>\n<blockquote>\n<p>关闭容器(发送SIGTERM信号,做一些’退出前工作’,再发送SIGKILL信号)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop anyesu-container</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>强制关闭容器(默认发送SIGKILL信号, 加-s参数可以发送其他信号)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker kill anyesu-container</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>启动容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start anyesu-container</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>重启容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart anyesu-container</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ol start=\"4\">\n<li>删除容器</li>\n</ol>\n<blockquote>\n<p>docker rm [ 容器名 or 容器 id ]</p>\n</blockquote>\n<ol start=\"5\">\n<li>查看容器详情</li>\n</ol>\n<blockquote>\n<p>docker inspect [ 容器名 or 容器 id ]</p>\n</blockquote>\n<ol start=\"6\">\n<li>查看容器中正在运行的进程</li>\n</ol>\n<blockquote>\n<p>docker top [ 容器名 or 容器 id ]</p>\n</blockquote>\n<ol start=\"7\">\n<li>将容器保存为镜像</li>\n</ol>\n<blockquote>\n<p>docker commit [ 容器名 or 容器 id ] [ 镜像名 ]:[ tag ]</p>\n</blockquote>\n<ol start=\"8\">\n<li>使用 Dockerfile 构建镜像</li>\n</ol>\n<blockquote>\n<p>docker build -t [ 镜像名 ]:[ tag ] -f [ DockerFile 名 ] [ DockerFile 所在目录 ]</p>\n</blockquote>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>下面是我项目中的配置，可以作为参考</p>\n<p>gradle 配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 放在最上面，优先级比较高</span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &quot;https://plugins.gradle.org/m2/&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &quot;gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4&quot;</span><br><span class=\"line\">        classpath &quot;org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id &apos;java&apos;</span><br><span class=\"line\">    id &quot;com.arenagod.gradle.MybatisGenerator&quot; version &quot;1.4&quot;</span><br><span class=\"line\">    id &quot;org.sglahn.gradle-dockerfile-plugin&quot; version &quot;0.4&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &apos;com.arenagod.gradle.MybatisGenerator&apos;</span><br><span class=\"line\">apply plugin: &apos;jacoco&apos;</span><br><span class=\"line\">apply plugin: &apos;java&apos;</span><br><span class=\"line\">apply plugin: &apos;groovy&apos;</span><br><span class=\"line\">apply plugin: &apos;org.springframework.boot&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">group &apos;com.dxy&apos;</span><br><span class=\"line\">version &apos;1.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">jar &#123;</span><br><span class=\"line\">    baseName = &apos;turbo&apos;</span><br><span class=\"line\">    version = &apos;1.0&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sourceCompatibility = 1.8</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">        url &quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSets &#123;</span><br><span class=\"line\">    main &#123;</span><br><span class=\"line\">        java &#123;</span><br><span class=\"line\">            srcDirs = []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        groovy &#123;</span><br><span class=\"line\">            srcDirs = [&apos;src/main/groovy&apos;, &apos;src/main/java&apos;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        test &#123;</span><br><span class=\"line\">            java &#123;</span><br><span class=\"line\">                srcDirs = []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            groovy &#123;</span><br><span class=\"line\">                srcDirs = [&apos;src/test/groovy&apos;, &apos;src/test/java&apos;]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sourceCompatibility = 1.8</span><br><span class=\"line\">targetCompatibility = 1.8</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile group: &apos;org.springframework.boot&apos;, name: &apos;spring-boot-starter-web&apos;, version: &apos;2.1.3.RELEASE&apos;</span><br><span class=\"line\">    compile group: &apos;org.mybatis.spring.boot&apos;, name: &apos;mybatis-spring-boot-starter&apos;, version: &apos;2.0.0&apos;</span><br><span class=\"line\">    compile group: &apos;org.springframework.boot&apos;, name: &apos;spring-boot-starter-data-jpa&apos;, version: &apos;2.1.3.RELEASE&apos;</span><br><span class=\"line\">    testCompile group: &apos;org.springframework.boot&apos;, name: &apos;spring-boot-starter-test&apos;, version: &apos;2.1.3.RELEASE&apos;</span><br><span class=\"line\">    compile group: &apos;com.alibaba&apos;, name: &apos;druid-spring-boot-starter&apos;, version: &apos;1.1.14&apos;</span><br><span class=\"line\">    compile group: &apos;org.projectlombok&apos;, name: &apos;lombok&apos;, version: &apos;1.18.4&apos;</span><br><span class=\"line\">    compile group: &apos;mysql&apos;, name: &apos;mysql-connector-java&apos;, version: &apos;5.1.47&apos;</span><br><span class=\"line\">    compile group: &apos;io.springfox&apos;, name: &apos;springfox-swagger2&apos;, version: &apos;2.9.2&apos;</span><br><span class=\"line\">    compile group: &apos;io.springfox&apos;, name: &apos;springfox-swagger-ui&apos;, version: &apos;2.9.2&apos;</span><br><span class=\"line\">    // mybatis-generator core 包</span><br><span class=\"line\">    compile group: &apos;org.mybatis.generator&apos;, name: &apos;mybatis-generator-core&apos;, version: &apos;1.3.7&apos;</span><br><span class=\"line\">    compile group: &apos;com.alibaba&apos;, name: &apos;fastjson&apos;, version: &apos;1.2.56&apos;</span><br><span class=\"line\">    compile group: &apos;com.google.code.gson&apos;, name: &apos;gson&apos;, version: &apos;2.8.5&apos;</span><br><span class=\"line\">    compile group: &apos;org.apache.shiro&apos;, name: &apos;shiro-core&apos;, version: &apos;1.4.0&apos;</span><br><span class=\"line\">    compile group: &apos;org.apache.shiro&apos;, name: &apos;shiro-spring&apos;, version: &apos;1.4.0&apos;</span><br><span class=\"line\">    compile group: &apos;org.codehaus.groovy&apos;, name: &apos;groovy-all&apos;, version: &apos;2.5.6&apos;</span><br><span class=\"line\">    // compile group: &apos;org.redisson&apos;, name: &apos;redisson-spring-boot-starter&apos;, version: &apos;3.10.5&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">configurations &#123;</span><br><span class=\"line\">    mybatisGenerator</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// mybatis-generator.xml 配置路径</span><br><span class=\"line\">mybatisGenerator &#123;</span><br><span class=\"line\">    verbose = true</span><br><span class=\"line\">    configFile = &apos;./src/main/resources/generatorConfig.xml&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//configuration</span><br><span class=\"line\">docker &#123;</span><br><span class=\"line\">    // Image version. Optional, default = project.version</span><br><span class=\"line\">    //imageVersion = version</span><br><span class=\"line\">    // Image name. Optional, default = project.name</span><br><span class=\"line\">    imageName = &apos;turbo_docker&apos;</span><br><span class=\"line\">    // Docker repository. Optional, default == no repository</span><br><span class=\"line\">    // dockerRepository = &apos;sglahn&apos;</span><br><span class=\"line\">    // Path or URL referring to the build context. Optional, default = $&#123;project.projectDir.getAbsolutePath()&#125;</span><br><span class=\"line\">    // buildContext = &apos;build-context&apos;</span><br><span class=\"line\">    // Path to the Dockerfile to use (relative to $&#123;project.projectDir&#125;). Optional, default = $&#123;buildContext&#125;/Dockerfile</span><br><span class=\"line\">    dockerFile = &apos;Dockerfile&apos;</span><br><span class=\"line\">    // Add a list of tags for an image. Optional, default = &apos;latest&apos;</span><br><span class=\"line\">    //tags = [version, &apos;latest&apos;, &apos;Hello&apos;]</span><br><span class=\"line\">    // Set metadata for an image. Optional, default = no label applied</span><br><span class=\"line\">    //labels = [&apos;branch=master&apos;, &apos;mylabel=test&apos;]</span><br><span class=\"line\">    // name and value of a buildarg. Optional, default = no build arguments</span><br><span class=\"line\">    //buildArgs = [&apos;http_proxy=&quot;http://some.proxy.url&quot;&apos;]</span><br><span class=\"line\">    // Always remove intermediate containers, even after unsuccessful builds. Optional, default = false</span><br><span class=\"line\">    removeIntermediateContainers = true</span><br><span class=\"line\">    // Isolation specifies the type of isolation technology used by containers. Optional, default = default</span><br><span class=\"line\">    //isolation = &apos;default&apos;</span><br><span class=\"line\">    // Do not use cache when building the image. Optional, default = false</span><br><span class=\"line\">    //noCache = true</span><br><span class=\"line\">    // Always attempt to pull a newer version of the image. Optional, default false</span><br><span class=\"line\">    //pull = true</span><br><span class=\"line\">    // Suppress the build output and print image ID on success. Optional, default = true</span><br><span class=\"line\">    quiet = false</span><br><span class=\"line\">    // Remove image in local repository after push to a remote repository, useful for builds on CI agents. Optional, default = false</span><br><span class=\"line\">    //removeImagesAfterPush = true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew info gradle;</span><br><span class=\"line\">brew upgrade gradle;</span><br><span class=\"line\">// 如果报错，可以使用 gradle build dockerBuild 等命令</span><br><span class=\"line\">gradle build docker</span><br><span class=\"line\">// 运行命令，将容器内的  8080 端口映射到 127.0.0.1 的 8087 端口</span><br><span class=\"line\">docker run -p 127.0.0.1:8087:8080 -t turbo_docker</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：需要主要项目中的端口号的映射，容器里的端口号和你实际运行的端口号不是一个概念，需要手动设置一下。</p>\n</blockquote>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/3cd9dbc165e9\" target=\"_blank\" rel=\"noopener\">gradle 集成 dockerFile</a></li>\n<li><a href=\"https://www.jianshu.com/p/7571fa3b394c\" target=\"_blank\" rel=\"noopener\">通过Gradle使用Docker部署 Spring Boot项目</a></li>\n<li><a href=\"https://www.jianshu.com/p/7c9e2247cfbd\" target=\"_blank\" rel=\"noopener\">docker 常用命令</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>这两天，想把自己的项目放到 docker 容器中运行，按照下面的步骤，你也能成功运行起来。这里是基于 gradle 配置的，maven 配置类似，如果是 maven 配置的也可以参考网上。首先看下 docker 常用的命令</p>\n<h1 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h1><h2 id=\"镜像相关\"><a href=\"#镜像相关\" class=\"headerlink\" title=\"镜像相关\"></a>镜像相关</h2><h3 id=\"镜像仓库相关\"><a href=\"#镜像仓库相关\" class=\"headerlink\" title=\"镜像仓库相关\"></a>镜像仓库相关</h3><ol>\n<li>查找镜像</li>\n</ol>\n<blockquote>\n<p>docker search 【条件】</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 查询 3 颗星及以上且名字包含 mysql 的镜像</span><br><span class=\"line\">docker search -f=stars=3 mysql</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>获取镜像</li>\n</ol>\n<blockquote>\n<p>docker pull 【仓库】:【tag】</p>\n</blockquote>\n<p>仓库格式为 [仓库url]/[用户名]/[应用名] , 除了官方仓库外的第三方仓库要指定 url, 用户名就是在对应仓库下建立的账户, 一般只有应用名的仓库代表 官方镜像, 如 ubuntu、tomcat 等, 而 tag 表示镜像的版本号, 不指定时默认为 latest。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取alpine Linux 的镜像</span><br><span class=\"line\">docker pull alpine</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>推送镜像到仓库</li>\n</ol>\n<blockquote>\n<p>docker push [镜像名]:[tag]</p>\n</blockquote>\n<h3 id=\"本地镜像\"><a href=\"#本地镜像\" class=\"headerlink\" title=\"本地镜像\"></a>本地镜像</h3><ol>\n<li>查看本地镜像</li>\n</ol>\n<blockquote>\n<p>docker images</p>\n</blockquote>\n<ol start=\"2\">\n<li>删除本地镜像</li>\n</ol>\n<blockquote>\n<p>docker rmi 【镜像名 or 镜像 id】</p>\n</blockquote>\n<ol start=\"3\">\n<li>查看镜像详情</li>\n</ol>\n<blockquote>\n<p>docker inspect 【镜像名 or 镜像 id】</p>\n</blockquote>\n<ol start=\"4\">\n<li>打包本地镜像，使用压缩包来完成迁移</li>\n</ol>\n<blockquote>\n<p>docker save 【镜像名】&gt;【文件路径】</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认为文件流输出</span><br><span class=\"line\">docker save alpine &gt; /usr/anyesu/docker/alpine.img</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者使用 &apos;-o&apos; 选项指定输出文件路径</span><br><span class=\"line\">docker save -o /usr/anyesu/docker/alpine.img alpine</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>导入镜像压缩包</li>\n</ol>\n<blockquote>\n<p>docker load &lt; 【文件路径】</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认从标准输入读取</span><br><span class=\"line\">ubuntu@VM-84-201-ubuntu:~$ docker load &lt; /usr/anyesu/docker/alpine.img</span><br><span class=\"line\">3fb66f713c9f: Loading layer [==================================================&gt;]  4.221MB/4.221MB</span><br><span class=\"line\">Loaded image: alpine:latest</span><br><span class=\"line\"></span><br><span class=\"line\"># 用 &apos;-i&apos; 选项指定输入文件路径</span><br><span class=\"line\">ubuntu@VM-84-201-ubuntu:~$ docker load -i /usr/anyesu/docker/alpine.img</span><br><span class=\"line\">Loaded image: alpine:latest</span><br><span class=\"line\">Loaded image ID: sha256:665ffb03bfaea7d8b7472edc0a741b429267db249b1fcead457886e861eae25f</span><br><span class=\"line\">Loaded image ID: sha256:a41a7446062d197dd4b21b38122dcc7b2399deb0750c4110925a7dd37c80f118</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>修改镜像 tag</li>\n</ol>\n<blockquote>\n<p>docker tag [ 镜像名 or 镜像 id ] [ 新镜像名 ]:[ 新 tag ]</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag a41 anyesu/alpine:1.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"容器相关\"><a href=\"#容器相关\" class=\"headerlink\" title=\"容器相关\"></a>容器相关</h2><ol>\n<li>创建、启动容器并执行相应的命令</li>\n</ol>\n<blockquote>\n<p>docker run [ 参数 ] [ 镜像名 or 镜像 id ] [ 命令 ]</p>\n</blockquote>\n<p>run 命令常用选项：</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d</td>\n<td>后台运行容器，并返回容器 ID；不指定时，启动后开始打印日志，ctrl + c 退出命令同时会关闭容器</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>以交互模式运行容器，通常与 -t 同时使用</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>为容器重新分配一个伪输入终端，通常与 -i 同时使用</td>\n</tr>\n<tr>\n<td>–name 【name】</td>\n<td>为容器指定一个别名，不指定时随机生成</td>\n</tr>\n<tr>\n<td>-h 【name】</td>\n<td>设置容器的主机名，默认随机生成</td>\n</tr>\n<tr>\n<td>-dns 【dns】</td>\n<td>指定容器使用的 DNS 服务器，默认和宿主机一致</td>\n</tr>\n<tr>\n<td>-e 【environment】</td>\n<td>设置环境变量</td>\n</tr>\n<tr>\n<td>-cpuset=”0-2” or -cpu=”0,1,2”</td>\n<td>绑定容器到指定 CPU 运行</td>\n</tr>\n<tr>\n<td>-m 100M</td>\n<td>指定容器使用内存最大值</td>\n</tr>\n<tr>\n<td>–net bridge</td>\n<td>指定容器的网络连接类型，支持 bridge / host / none / container 四种类型</td>\n</tr>\n<tr>\n<td>-ip 【ip】</td>\n<td>为容器分配固定 ip，需要使用自定义网络</td>\n</tr>\n<tr>\n<td>–expose 8081 –expose 8082</td>\n<td>开放一个或一组端口，会覆盖镜像中开放的端口</td>\n</tr>\n<tr>\n<td>-p [宿主机端口]:[容器内端口]</td>\n<td>宿主机到容器的端口映射, 可指定宿主机的要监听的 ip, 默认为 0.0.0.0</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>注意是大写的, 宿主机随机指定一组可用的端口映射容器 expose 的所有端口</td>\n</tr>\n<tr>\n<td>-v [宿主机目录路径]:[容器内目录路径]</td>\n<td>挂载宿主机的指定目录 ( 或文件 ) 到容器内的指定目录 ( 或文件 )</td>\n</tr>\n<tr>\n<td>–add-host [主机名]:[ip]</td>\n<td>为容器 hosts 文件追加 host , 默认会在 hosts 文件最后追加内容：[主机名]:[容器ip]</td>\n</tr>\n<tr>\n<td>–volumes-from [其他容器名]</td>\n<td>将其他容器的数据卷添加到此容器</td>\n</tr>\n<tr>\n<td>–link [其他容器名]:[在该容器中的别名]</td>\n<td>添加链接到另一个容器, 在本容器 hosts 文件中加入关联容器的记录, 效果类似于 –add-host</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>单字符选项可以合并, 如 -i -t 可以合并为 -it</p>\n</blockquote>\n<ol start=\"2\">\n<li>查看运行中的容器</li>\n</ol>\n<blockquote>\n<p>docker ps</p>\n</blockquote>\n<p>加 -a 选项可以查看所有的容器</p>\n<ol start=\"3\">\n<li>开启/停止/重启容器</li>\n</ol>\n<blockquote>\n<p>关闭容器(发送SIGTERM信号,做一些’退出前工作’,再发送SIGKILL信号)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop anyesu-container</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>强制关闭容器(默认发送SIGKILL信号, 加-s参数可以发送其他信号)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker kill anyesu-container</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>启动容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start anyesu-container</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>重启容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart anyesu-container</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ol start=\"4\">\n<li>删除容器</li>\n</ol>\n<blockquote>\n<p>docker rm [ 容器名 or 容器 id ]</p>\n</blockquote>\n<ol start=\"5\">\n<li>查看容器详情</li>\n</ol>\n<blockquote>\n<p>docker inspect [ 容器名 or 容器 id ]</p>\n</blockquote>\n<ol start=\"6\">\n<li>查看容器中正在运行的进程</li>\n</ol>\n<blockquote>\n<p>docker top [ 容器名 or 容器 id ]</p>\n</blockquote>\n<ol start=\"7\">\n<li>将容器保存为镜像</li>\n</ol>\n<blockquote>\n<p>docker commit [ 容器名 or 容器 id ] [ 镜像名 ]:[ tag ]</p>\n</blockquote>\n<ol start=\"8\">\n<li>使用 Dockerfile 构建镜像</li>\n</ol>\n<blockquote>\n<p>docker build -t [ 镜像名 ]:[ tag ] -f [ DockerFile 名 ] [ DockerFile 所在目录 ]</p>\n</blockquote>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>下面是我项目中的配置，可以作为参考</p>\n<p>gradle 配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 放在最上面，优先级比较高</span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &quot;https://plugins.gradle.org/m2/&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &quot;gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4&quot;</span><br><span class=\"line\">        classpath &quot;org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id &apos;java&apos;</span><br><span class=\"line\">    id &quot;com.arenagod.gradle.MybatisGenerator&quot; version &quot;1.4&quot;</span><br><span class=\"line\">    id &quot;org.sglahn.gradle-dockerfile-plugin&quot; version &quot;0.4&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &apos;com.arenagod.gradle.MybatisGenerator&apos;</span><br><span class=\"line\">apply plugin: &apos;jacoco&apos;</span><br><span class=\"line\">apply plugin: &apos;java&apos;</span><br><span class=\"line\">apply plugin: &apos;groovy&apos;</span><br><span class=\"line\">apply plugin: &apos;org.springframework.boot&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">group &apos;com.dxy&apos;</span><br><span class=\"line\">version &apos;1.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">jar &#123;</span><br><span class=\"line\">    baseName = &apos;turbo&apos;</span><br><span class=\"line\">    version = &apos;1.0&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sourceCompatibility = 1.8</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">        url &quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSets &#123;</span><br><span class=\"line\">    main &#123;</span><br><span class=\"line\">        java &#123;</span><br><span class=\"line\">            srcDirs = []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        groovy &#123;</span><br><span class=\"line\">            srcDirs = [&apos;src/main/groovy&apos;, &apos;src/main/java&apos;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        test &#123;</span><br><span class=\"line\">            java &#123;</span><br><span class=\"line\">                srcDirs = []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            groovy &#123;</span><br><span class=\"line\">                srcDirs = [&apos;src/test/groovy&apos;, &apos;src/test/java&apos;]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sourceCompatibility = 1.8</span><br><span class=\"line\">targetCompatibility = 1.8</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile group: &apos;org.springframework.boot&apos;, name: &apos;spring-boot-starter-web&apos;, version: &apos;2.1.3.RELEASE&apos;</span><br><span class=\"line\">    compile group: &apos;org.mybatis.spring.boot&apos;, name: &apos;mybatis-spring-boot-starter&apos;, version: &apos;2.0.0&apos;</span><br><span class=\"line\">    compile group: &apos;org.springframework.boot&apos;, name: &apos;spring-boot-starter-data-jpa&apos;, version: &apos;2.1.3.RELEASE&apos;</span><br><span class=\"line\">    testCompile group: &apos;org.springframework.boot&apos;, name: &apos;spring-boot-starter-test&apos;, version: &apos;2.1.3.RELEASE&apos;</span><br><span class=\"line\">    compile group: &apos;com.alibaba&apos;, name: &apos;druid-spring-boot-starter&apos;, version: &apos;1.1.14&apos;</span><br><span class=\"line\">    compile group: &apos;org.projectlombok&apos;, name: &apos;lombok&apos;, version: &apos;1.18.4&apos;</span><br><span class=\"line\">    compile group: &apos;mysql&apos;, name: &apos;mysql-connector-java&apos;, version: &apos;5.1.47&apos;</span><br><span class=\"line\">    compile group: &apos;io.springfox&apos;, name: &apos;springfox-swagger2&apos;, version: &apos;2.9.2&apos;</span><br><span class=\"line\">    compile group: &apos;io.springfox&apos;, name: &apos;springfox-swagger-ui&apos;, version: &apos;2.9.2&apos;</span><br><span class=\"line\">    // mybatis-generator core 包</span><br><span class=\"line\">    compile group: &apos;org.mybatis.generator&apos;, name: &apos;mybatis-generator-core&apos;, version: &apos;1.3.7&apos;</span><br><span class=\"line\">    compile group: &apos;com.alibaba&apos;, name: &apos;fastjson&apos;, version: &apos;1.2.56&apos;</span><br><span class=\"line\">    compile group: &apos;com.google.code.gson&apos;, name: &apos;gson&apos;, version: &apos;2.8.5&apos;</span><br><span class=\"line\">    compile group: &apos;org.apache.shiro&apos;, name: &apos;shiro-core&apos;, version: &apos;1.4.0&apos;</span><br><span class=\"line\">    compile group: &apos;org.apache.shiro&apos;, name: &apos;shiro-spring&apos;, version: &apos;1.4.0&apos;</span><br><span class=\"line\">    compile group: &apos;org.codehaus.groovy&apos;, name: &apos;groovy-all&apos;, version: &apos;2.5.6&apos;</span><br><span class=\"line\">    // compile group: &apos;org.redisson&apos;, name: &apos;redisson-spring-boot-starter&apos;, version: &apos;3.10.5&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">configurations &#123;</span><br><span class=\"line\">    mybatisGenerator</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// mybatis-generator.xml 配置路径</span><br><span class=\"line\">mybatisGenerator &#123;</span><br><span class=\"line\">    verbose = true</span><br><span class=\"line\">    configFile = &apos;./src/main/resources/generatorConfig.xml&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//configuration</span><br><span class=\"line\">docker &#123;</span><br><span class=\"line\">    // Image version. Optional, default = project.version</span><br><span class=\"line\">    //imageVersion = version</span><br><span class=\"line\">    // Image name. Optional, default = project.name</span><br><span class=\"line\">    imageName = &apos;turbo_docker&apos;</span><br><span class=\"line\">    // Docker repository. Optional, default == no repository</span><br><span class=\"line\">    // dockerRepository = &apos;sglahn&apos;</span><br><span class=\"line\">    // Path or URL referring to the build context. Optional, default = $&#123;project.projectDir.getAbsolutePath()&#125;</span><br><span class=\"line\">    // buildContext = &apos;build-context&apos;</span><br><span class=\"line\">    // Path to the Dockerfile to use (relative to $&#123;project.projectDir&#125;). Optional, default = $&#123;buildContext&#125;/Dockerfile</span><br><span class=\"line\">    dockerFile = &apos;Dockerfile&apos;</span><br><span class=\"line\">    // Add a list of tags for an image. Optional, default = &apos;latest&apos;</span><br><span class=\"line\">    //tags = [version, &apos;latest&apos;, &apos;Hello&apos;]</span><br><span class=\"line\">    // Set metadata for an image. Optional, default = no label applied</span><br><span class=\"line\">    //labels = [&apos;branch=master&apos;, &apos;mylabel=test&apos;]</span><br><span class=\"line\">    // name and value of a buildarg. Optional, default = no build arguments</span><br><span class=\"line\">    //buildArgs = [&apos;http_proxy=&quot;http://some.proxy.url&quot;&apos;]</span><br><span class=\"line\">    // Always remove intermediate containers, even after unsuccessful builds. Optional, default = false</span><br><span class=\"line\">    removeIntermediateContainers = true</span><br><span class=\"line\">    // Isolation specifies the type of isolation technology used by containers. Optional, default = default</span><br><span class=\"line\">    //isolation = &apos;default&apos;</span><br><span class=\"line\">    // Do not use cache when building the image. Optional, default = false</span><br><span class=\"line\">    //noCache = true</span><br><span class=\"line\">    // Always attempt to pull a newer version of the image. Optional, default false</span><br><span class=\"line\">    //pull = true</span><br><span class=\"line\">    // Suppress the build output and print image ID on success. Optional, default = true</span><br><span class=\"line\">    quiet = false</span><br><span class=\"line\">    // Remove image in local repository after push to a remote repository, useful for builds on CI agents. Optional, default = false</span><br><span class=\"line\">    //removeImagesAfterPush = true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew info gradle;</span><br><span class=\"line\">brew upgrade gradle;</span><br><span class=\"line\">// 如果报错，可以使用 gradle build dockerBuild 等命令</span><br><span class=\"line\">gradle build docker</span><br><span class=\"line\">// 运行命令，将容器内的  8080 端口映射到 127.0.0.1 的 8087 端口</span><br><span class=\"line\">docker run -p 127.0.0.1:8087:8080 -t turbo_docker</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：需要主要项目中的端口号的映射，容器里的端口号和你实际运行的端口号不是一个概念，需要手动设置一下。</p>\n</blockquote>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/3cd9dbc165e9\" target=\"_blank\" rel=\"noopener\">gradle 集成 dockerFile</a></li>\n<li><a href=\"https://www.jianshu.com/p/7571fa3b394c\" target=\"_blank\" rel=\"noopener\">通过Gradle使用Docker部署 Spring Boot项目</a></li>\n<li><a href=\"https://www.jianshu.com/p/7c9e2247cfbd\" target=\"_blank\" rel=\"noopener\">docker 常用命令</a></li>\n</ul>\n"},{"title":"类加载机制","abbrlink":"cd1d308","date":"2019-03-29T09:14:04.000Z","_content":"\nJVM类加载机制分为五个部分：加载，验证，准备，解析，初始化，下面我们就分别来看一下这五个过程。\n\n验证、准备、解析阶段，合起来统称为 链接 阶段。\n\n# 加载\n\n加载是类加载过程中的一个阶段，这个阶段会在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的入口。注意这里不一定非得要从一个Class文件获取，这里既可以从ZIP包中读取（比如从jar包和war包中读取），也可以在运行时计算生成（动态代理），也可以由其它文件生成（比如将JSP文件转换成对应的Class类）。\n\n# 验证\n这一阶段的主要目的是为了确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。\n\n# 准备\n准备阶段是正式为类变量分配内存并设置类变量的初始值阶段，即在方法区中分配这些变量所使用的内存空间。注意这里所说的初始值概念，比如一个类变量定义为：\n\n```java\npublic static int v = 8080;\n```\n\n实际上变量v在准备阶段过后的初始值为0而不是8080，将v赋值为8080的put static指令是程序被编译后，存放于类构造器<client>方法之中，这里我们后面会解释。\n但是注意如果声明为：\n\n```java\npublic static final int v = 8080;\n```\n\n在编译阶段会为v生成ConstantValue属性，在准备阶段虚拟机会根据ConstantValue属性将v赋值为8080。\n\n# 解析\n解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是class文件中的：\n* CONSTANT_Class_info\n* CONSTANT_Field_info\n* CONSTANT_Method_info\n\n等类型的常量。\n\n* 符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。\n* 直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。\n\n# 初始化\n初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由JVM主导。到了初始阶段，才开始真正执行类中定义的Java程序代码。\n\n初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。p.s: 如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。\n\n注意以下几种情况不会执行类初始化：\n* 通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。\n* 定义对象数组，不会触发该类的初始化。\n* 常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。\n* 通过类名获取Class对象，不会触发类的初始化。\n* 通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。\n* 通过ClassLoader默认的loadClass方法，也不会触发初始化动作。\n\n# 类加载器\n虚拟机设计团队把加载动作放到JVM外部实现，以便让应用程序决定如何获取所需的类，JVM提供了3种类加载器：\n* 启动类加载器(Bootstrap ClassLoader)：负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。\n* 扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。\n* 应用程序类加载器(Application ClassLoader)：负责加载用户路径（classpath）上的类库。\n\nJVM通过双亲委派模型进行类的加载，当然我们也可以通过继承java.lang.ClassLoader实现自定义的类加载器。\n\n当一个类加载器收到类加载任务，会先交给其父类加载器去完成，因此最终加载任务都会传递到顶层的启动类加载器，只有当父类加载器无法完成加载任务时，才会尝试执行加载任务。\n\n采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。\n\n看一下jdk中的ClassLoader的源码实现：\n\n```java\nprotected synchronized Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException {\n    // First, check if the class has already been loaded\n    Class c = findLoadedClass(name);\n    if (c  null) {\n        try {\n            if (parent != null) {\n                c = parent.loadClass(name, false);\n            } else {\n                c = findBootstrapClass0(name);\n            }\n        } catch (ClassNotFoundException e) {\n            // If still not found, then invoke findClass in order\n            // to find the class.\n            c = findClass(name);\n        }\n    }\n    if (resolve) {\n        resolveClass(c);\n    }\n    return c;\n}\n```\n\n1. 首先通过Class c = findLoadedClass(name);判断一个类是否已经被加载过。\n2. 如果没有被加载过执行if (c  null)中的程序，遵循双亲委派的模型，首先会通过递归从父加载器开始找，直到父类加载器是Bootstrap ClassLoader为止。\n3. 最后根据resolve的值，判断这个class是否需要解析。\n\n# 参考\n* [JVM 类加载机制详解](http://www.importnew.com/25295.html)","source":"_posts/class-loader.md","raw":"---\ntitle: 类加载机制\ncategories:\n  - 技术\ntags:\n  - JVM\nabbrlink: cd1d308\ndate: 2019-03-29 17:14:04\n---\n\nJVM类加载机制分为五个部分：加载，验证，准备，解析，初始化，下面我们就分别来看一下这五个过程。\n\n验证、准备、解析阶段，合起来统称为 链接 阶段。\n\n# 加载\n\n加载是类加载过程中的一个阶段，这个阶段会在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的入口。注意这里不一定非得要从一个Class文件获取，这里既可以从ZIP包中读取（比如从jar包和war包中读取），也可以在运行时计算生成（动态代理），也可以由其它文件生成（比如将JSP文件转换成对应的Class类）。\n\n# 验证\n这一阶段的主要目的是为了确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。\n\n# 准备\n准备阶段是正式为类变量分配内存并设置类变量的初始值阶段，即在方法区中分配这些变量所使用的内存空间。注意这里所说的初始值概念，比如一个类变量定义为：\n\n```java\npublic static int v = 8080;\n```\n\n实际上变量v在准备阶段过后的初始值为0而不是8080，将v赋值为8080的put static指令是程序被编译后，存放于类构造器<client>方法之中，这里我们后面会解释。\n但是注意如果声明为：\n\n```java\npublic static final int v = 8080;\n```\n\n在编译阶段会为v生成ConstantValue属性，在准备阶段虚拟机会根据ConstantValue属性将v赋值为8080。\n\n# 解析\n解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是class文件中的：\n* CONSTANT_Class_info\n* CONSTANT_Field_info\n* CONSTANT_Method_info\n\n等类型的常量。\n\n* 符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。\n* 直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。\n\n# 初始化\n初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由JVM主导。到了初始阶段，才开始真正执行类中定义的Java程序代码。\n\n初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。p.s: 如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。\n\n注意以下几种情况不会执行类初始化：\n* 通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。\n* 定义对象数组，不会触发该类的初始化。\n* 常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。\n* 通过类名获取Class对象，不会触发类的初始化。\n* 通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。\n* 通过ClassLoader默认的loadClass方法，也不会触发初始化动作。\n\n# 类加载器\n虚拟机设计团队把加载动作放到JVM外部实现，以便让应用程序决定如何获取所需的类，JVM提供了3种类加载器：\n* 启动类加载器(Bootstrap ClassLoader)：负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。\n* 扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。\n* 应用程序类加载器(Application ClassLoader)：负责加载用户路径（classpath）上的类库。\n\nJVM通过双亲委派模型进行类的加载，当然我们也可以通过继承java.lang.ClassLoader实现自定义的类加载器。\n\n当一个类加载器收到类加载任务，会先交给其父类加载器去完成，因此最终加载任务都会传递到顶层的启动类加载器，只有当父类加载器无法完成加载任务时，才会尝试执行加载任务。\n\n采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。\n\n看一下jdk中的ClassLoader的源码实现：\n\n```java\nprotected synchronized Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException {\n    // First, check if the class has already been loaded\n    Class c = findLoadedClass(name);\n    if (c  null) {\n        try {\n            if (parent != null) {\n                c = parent.loadClass(name, false);\n            } else {\n                c = findBootstrapClass0(name);\n            }\n        } catch (ClassNotFoundException e) {\n            // If still not found, then invoke findClass in order\n            // to find the class.\n            c = findClass(name);\n        }\n    }\n    if (resolve) {\n        resolveClass(c);\n    }\n    return c;\n}\n```\n\n1. 首先通过Class c = findLoadedClass(name);判断一个类是否已经被加载过。\n2. 如果没有被加载过执行if (c  null)中的程序，遵循双亲委派的模型，首先会通过递归从父加载器开始找，直到父类加载器是Bootstrap ClassLoader为止。\n3. 最后根据resolve的值，判断这个class是否需要解析。\n\n# 参考\n* [JVM 类加载机制详解](http://www.importnew.com/25295.html)","slug":"class-loader","published":1,"updated":"2019-06-19T04:08:36.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb7mrmc3000fljy87dtqu6o4","content":"<p>JVM类加载机制分为五个部分：加载，验证，准备，解析，初始化，下面我们就分别来看一下这五个过程。</p>\n<p>验证、准备、解析阶段，合起来统称为 链接 阶段。</p>\n<h1 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h1><p>加载是类加载过程中的一个阶段，这个阶段会在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的入口。注意这里不一定非得要从一个Class文件获取，这里既可以从ZIP包中读取（比如从jar包和war包中读取），也可以在运行时计算生成（动态代理），也可以由其它文件生成（比如将JSP文件转换成对应的Class类）。</p>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><p>这一阶段的主要目的是为了确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>准备阶段是正式为类变量分配内存并设置类变量的初始值阶段，即在方法区中分配这些变量所使用的内存空间。注意这里所说的初始值概念，比如一个类变量定义为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> v = <span class=\"number\">8080</span>;</span><br></pre></td></tr></table></figure>\n<p>实际上变量v在准备阶段过后的初始值为0而不是8080，将v赋值为8080的put static指令是程序被编译后，存放于类构造器<client>方法之中，这里我们后面会解释。<br>但是注意如果声明为：</client></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> v = <span class=\"number\">8080</span>;</span><br></pre></td></tr></table></figure>\n<p>在编译阶段会为v生成ConstantValue属性，在准备阶段虚拟机会根据ConstantValue属性将v赋值为8080。</p>\n<h1 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h1><p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是class文件中的：</p>\n<ul>\n<li>CONSTANT_Class_info</li>\n<li>CONSTANT_Field_info</li>\n<li>CONSTANT_Method_info</li>\n</ul>\n<p>等类型的常量。</p>\n<ul>\n<li>符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</li>\n<li>直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。</li>\n</ul>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由JVM主导。到了初始阶段，才开始真正执行类中定义的Java程序代码。</p>\n<p>初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。p.s: 如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。</client></client></client></client></client></p>\n<p>注意以下几种情况不会执行类初始化：</p>\n<ul>\n<li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</li>\n<li>定义对象数组，不会触发该类的初始化。</li>\n<li>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</li>\n<li>通过类名获取Class对象，不会触发类的初始化。</li>\n<li>通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。</li>\n<li>通过ClassLoader默认的loadClass方法，也不会触发初始化动作。</li>\n</ul>\n<h1 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h1><p>虚拟机设计团队把加载动作放到JVM外部实现，以便让应用程序决定如何获取所需的类，JVM提供了3种类加载器：</p>\n<ul>\n<li>启动类加载器(Bootstrap ClassLoader)：负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。</li>\n<li>扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li>\n<li>应用程序类加载器(Application ClassLoader)：负责加载用户路径（classpath）上的类库。</li>\n</ul>\n<p>JVM通过双亲委派模型进行类的加载，当然我们也可以通过继承java.lang.ClassLoader实现自定义的类加载器。</p>\n<p>当一个类加载器收到类加载任务，会先交给其父类加载器去完成，因此最终加载任务都会传递到顶层的启动类加载器，只有当父类加载器无法完成加载任务时，才会尝试执行加载任务。</p>\n<p>采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。</p>\n<p>看一下jdk中的ClassLoader的源码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">    Class c = findLoadedClass(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c  <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                c = parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                c = findBootstrapClass0(name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">            <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">            c = findClass(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">        resolveClass(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>首先通过Class c = findLoadedClass(name);判断一个类是否已经被加载过。</li>\n<li>如果没有被加载过执行if (c  null)中的程序，遵循双亲委派的模型，首先会通过递归从父加载器开始找，直到父类加载器是Bootstrap ClassLoader为止。</li>\n<li>最后根据resolve的值，判断这个class是否需要解析。</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.importnew.com/25295.html\" target=\"_blank\" rel=\"noopener\">JVM 类加载机制详解</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>JVM类加载机制分为五个部分：加载，验证，准备，解析，初始化，下面我们就分别来看一下这五个过程。</p>\n<p>验证、准备、解析阶段，合起来统称为 链接 阶段。</p>\n<h1 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h1><p>加载是类加载过程中的一个阶段，这个阶段会在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的入口。注意这里不一定非得要从一个Class文件获取，这里既可以从ZIP包中读取（比如从jar包和war包中读取），也可以在运行时计算生成（动态代理），也可以由其它文件生成（比如将JSP文件转换成对应的Class类）。</p>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><p>这一阶段的主要目的是为了确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>准备阶段是正式为类变量分配内存并设置类变量的初始值阶段，即在方法区中分配这些变量所使用的内存空间。注意这里所说的初始值概念，比如一个类变量定义为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> v = <span class=\"number\">8080</span>;</span><br></pre></td></tr></table></figure>\n<p>实际上变量v在准备阶段过后的初始值为0而不是8080，将v赋值为8080的put static指令是程序被编译后，存放于类构造器<client>方法之中，这里我们后面会解释。<br>但是注意如果声明为：</client></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> v = <span class=\"number\">8080</span>;</span><br></pre></td></tr></table></figure>\n<p>在编译阶段会为v生成ConstantValue属性，在准备阶段虚拟机会根据ConstantValue属性将v赋值为8080。</p>\n<h1 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h1><p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是class文件中的：</p>\n<ul>\n<li>CONSTANT_Class_info</li>\n<li>CONSTANT_Field_info</li>\n<li>CONSTANT_Method_info</li>\n</ul>\n<p>等类型的常量。</p>\n<ul>\n<li>符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</li>\n<li>直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。</li>\n</ul>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由JVM主导。到了初始阶段，才开始真正执行类中定义的Java程序代码。</p>\n<p>初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。p.s: 如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。</client></client></client></client></client></p>\n<p>注意以下几种情况不会执行类初始化：</p>\n<ul>\n<li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</li>\n<li>定义对象数组，不会触发该类的初始化。</li>\n<li>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</li>\n<li>通过类名获取Class对象，不会触发类的初始化。</li>\n<li>通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。</li>\n<li>通过ClassLoader默认的loadClass方法，也不会触发初始化动作。</li>\n</ul>\n<h1 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h1><p>虚拟机设计团队把加载动作放到JVM外部实现，以便让应用程序决定如何获取所需的类，JVM提供了3种类加载器：</p>\n<ul>\n<li>启动类加载器(Bootstrap ClassLoader)：负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。</li>\n<li>扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li>\n<li>应用程序类加载器(Application ClassLoader)：负责加载用户路径（classpath）上的类库。</li>\n</ul>\n<p>JVM通过双亲委派模型进行类的加载，当然我们也可以通过继承java.lang.ClassLoader实现自定义的类加载器。</p>\n<p>当一个类加载器收到类加载任务，会先交给其父类加载器去完成，因此最终加载任务都会传递到顶层的启动类加载器，只有当父类加载器无法完成加载任务时，才会尝试执行加载任务。</p>\n<p>采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。</p>\n<p>看一下jdk中的ClassLoader的源码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">    Class c = findLoadedClass(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c  <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                c = parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                c = findBootstrapClass0(name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">            <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">            c = findClass(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">        resolveClass(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>首先通过Class c = findLoadedClass(name);判断一个类是否已经被加载过。</li>\n<li>如果没有被加载过执行if (c  null)中的程序，遵循双亲委派的模型，首先会通过递归从父加载器开始找，直到父类加载器是Bootstrap ClassLoader为止。</li>\n<li>最后根据resolve的值，判断这个class是否需要解析。</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.importnew.com/25295.html\" target=\"_blank\" rel=\"noopener\">JVM 类加载机制详解</a></li>\n</ul>\n"},{"title":"能不能自己写个类叫 java.lang.System？","abbrlink":"814dc607","date":"2019-07-18T06:54:53.000Z","_content":"这是一个很经典的问题，但是网上提供的答案容易误导别人。接下来通过详细说明和实例来看看实际情况是怎么样的。\n\n# 错误答案的详细解释\n为了不让我们写 System 类，类加载采用委托机制，这样可以保证 parent 优先，parent 能找到的类，儿子就没有机会加载。而 System 类是 Bootstrap 加载器加载的，就算自己重写，也总是使用 Java 系统提供的 System，自己写的 System 类根本没有机会得到加载。但是，我们可以自己定义一个类加载器来达到这个目的，为了避免双亲委托机制，这个类加载器也必须是特殊的。由于系统自带的三个类加载器都加载特定目录下的类，如果我们自己的类加载器放在一个特殊的目录，那么系统的加载器就无法加载，也就是最终还是由我们自己的加载器加载。\n\n说明一下上面提到的一些概念：\n\n类加载器可分为两类：一是启动类加载器(Bootstrap ClassLoader)，是 C++ 实现的，是 JVM 的一部分；另一种是其它的类加载器，是 Java 实现的，独立于 JVM，全部都继承自抽象类 java.lang.ClassLoader。jdk 自带了三种类加载器，分别是启动类加载器（Bootstrap ClassLoader），扩展类加载器（Extension ClassLoader），应用程序类加载器（Application ClassLoader）。后两种加载器是继承自抽象类 java.lang.ClassLoader。\n\n# 类加载器使用的原理\n类加载器的加载过程一般是：自定义类加载器 >> 应用程序类加载器 >> 扩展类加载器 >> 启动类加载器。\n\n上面的层次关系被称为双亲委派模型(Parents Delegation Model)。除了最顶层的启动类加载器外，其余的类加载器都有对应的父类加载器。\n\n再简单说下双亲委托机制：如果一个类加载器收到了类加载的请求，它首先不会自己尝试去加载这个类，而是把这个请求委派给父类加载器，每一个层次的类加载器都是如此，因此所有的加载请求最终到达顶层的启动类加载器，只有当父类加载器反馈自己无法完成加载请求时（指它的搜索范围没有找到所需的类），子类加载器才会尝试自己去加载。\n\n再回去看下解释内容，我相信前面的部分大家应该很看懂了，也没什么大问题。最后的如果部分“如果我们自己的类加载器放在一个特殊的目录，那么系统的加载器就无法加载，也就是最终还是由我们自己的加载器加载。” ，逻辑完全不通。我想它的本意可能是，将自己的 java.lang.System 类放置在特殊目录，然后系统自带的加载器无法加载，这样最终还是由我们自己的加载器加载（因为我们自己的加载器知道其所在的特殊目录）。这种说法好像逻辑上没有问题，那么我们就来实验下了。\n\n# 代码验证\n```\n// 自定义类加载器\npublic class MyClassLoader extends ClassLoader{\n\n    public MyClassLoader() {\n        super(null);\n    }\n\n    @Override\n    public Class<?> loadClass(String name) throws ClassNotFoundException {\n        try{\n            String className = null;\n            if(name.startsWith(\"java.lang\")){\n                className = \"/\" + name.replace('.', '/') + \".class\";\n            }else{\n                className = name.substring(name.lastIndexOf('.') + 1) + \".class\";\n            }\n            System.out.println(className);\n            InputStream is = getClass().getResourceAsStream(className);\n            System.out.println(is);\n            if(is == null)\n                return super.loadClass(name);\n\n            byte[] b = new byte[is.available()];\n            is.read(b);\n            return defineClass(name, b, 0, b.length);\n        }catch (Exception e) {\n            e.printStackTrace();\n            throw new ClassNotFoundException();\n        }\n    }\n}\n```\n\nMath 类：\n```\nimport java.lang\n\n\npublic final class Math {\n    \n    public static void main(String[] args) {\n        System.out.println(\"hello world\");\n    }\n}\n\n\npublic class MyMath {\n    \n    public static void main(String[] args) {\n        System.out.println(\"hello world\");\n    }\n}\n```\n\nClassLoader 测试类：\n```\npublic class ClassLoaderTest {\n \n    public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        ClassLoader myLoader = new MyClassLoader();\n        Object obj = myLoader.loadClass(\"java.lang.Math\").newInstance();\n        System.out.println(obj);\n    }\n    \n}\n```\n\n上面的测试代码没用自定义java.lang.System类，因为测试代码用到了JDK自带的System类进行输出打印，会冲突，所以改用为自定义的java.lang.Math类。如果自定义的Math类能加载，那么自定义的System类同样能加载。\n\n我们先直接运行下 Math 类，输出如下：\n```\n错误: 在类 java.lang.Math 中找不到 main 方法, 请将 main 方法定义为:\n   public static void main(String[] args)\n否则 JavaFX 应用程序类必须扩展javafx.application.Application\n```\n\n提示Math类没有 main 方法。首先大家要明白一个概念，当类首次主动使用时，必须进行类的加载，这部分工作是由类加载器来完成的。根据双亲委托原则，Math 类首先由启动类加载器去尝试加载，很显然，它找到 rt.jar 中的 java.lang.Math 类并加载进内存（并不会加载我们自定义的Math类），然后执行 main 方法时，发现不存在该方法，所以报方法不存在错误。也就是说，默认情况下 JVM 不会加载我们自定义的 Math 类。\n\n再直接运行MyMath类，输出如下：\n\n```\njava.lang.SecurityException: Prohibited package name: java.lang\nat java.lang.ClassLoader.preDefineClass(ClassLoader.java:479)\nat java.lang.ClassLoader.defineClassCond(ClassLoader.java:625)\nat java.lang.ClassLoader.defineClass(ClassLoader.java:615)\nat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)\nat java.net.URLClassLoader.defineClass(URLClassLoader.java:283)\nat java.net.URLClassLoader.access$000(URLClassLoader.java:58)\nat java.net.URLClassLoader$1.run(URLClassLoader.java:197)\nat java.security.AccessController.doPrivileged(Native Method)\nat java.net.URLClassLoader.findClass(URLClassLoader.java:190)\nat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\nat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)\nat java.lang.ClassLoader.loadClass(ClassLoader.java:247)\nException in thread \"main\" \n```\n\n由堆栈异常信息可知道，当应用程序类加载器类（AppClassLoader）尝试加载MyMath类时，ClassLoader.java的479行抛出了SecurityException。\n\n**禁止使用包名：java.lang。**\n\n直接查看抽象类 java.lang.ClassLoader 的 preDefineClass 方法代码，摘抄如下：\n\n```java\nprivate ProtectionDomain preDefineClass(String name,\n                                            ProtectionDomain pd)\n{\n    if (!checkName(name))\n        throw new NoClassDefFoundError(\"IllegalName: \" + name);\n\n    // Note:  Checking logic in java.lang.invoke.MemberName.checkForTypeAlias\n    // relies on the fact that spoofing is impossible if a class has a name\n    // of the form \"java.*\"\n    if ((name != null) && name.startsWith(\"java.\")) {\n        throw new SecurityException\n            (\"Prohibited package name: \" +\n             name.substring(0, name.lastIndexOf('.')));\n    }\n    if (pd == null) {\n        pd = defaultDomain;\n    }\n\n    if (name != null) checkCerts(name, pd.getCodeSource());\n\n    return pd;\n}\n```\n\n可以看到如果加载的类全名称以“java.”开头时，将会抛出SecurityException，这也是为什么直接执行MyMath类会出现 SecurityException。\n\n照这样，我们自定义的类加载器必须继承自ClassLoader，其loadClass()方法里调用了父类的defineClass()方法，并最终调到 preDefineClass() 方法，因此我们自定义的类加载器也是不能加载以 “java.” 开头的 java 类的。我们继续运行下 ClassLoaderTest 类，输出如下：\n\n```\n\n/java/lang/Math.class\nsun.net.www.protocol.jar.JarURLConnection$JarURLInputStream@a981ca\njava.lang.SecurityException: Prohibited package name: java.lang\nat java.lang.ClassLoader.preDefineClass(ClassLoader.java:479)\nat java.lang.ClassLoader.defineClassCond(ClassLoader.java:625)\nat java.lang.ClassLoader.defineClass(ClassLoader.java:615)\nat java.lang.ClassLoader.defineClass(ClassLoader.java:465)\nat com.tq.MyClassLoader.loadClass(MyClassLoader.java:28)\nat com.tq.ClassLoaderTest.main(ClassLoaderTest.java:8)\nException in thread \"main\" java.lang.ClassNotFoundException\nat com.tq.MyClassLoader.loadClass(MyClassLoader.java:31)\nat com.tq.ClassLoaderTest.main(ClassLoaderTest.java:8)\n```\n\n通过代码实例及源码分析可以看到，对于自定义的类加载器，强行用defineClass()方法去加载一个以\"java.\"开头的类也是会抛出异常的。\n\n# 总结\n**不能自己写以\"java.\"开头的类，其要么不能加载进内存，要么即使你用自定义的类加载器去强行加载，也会收到一个SecurityException。**\n\n# 参考\n* [java能不能自己写一个类叫java.lang.System/String正确答案](https://blog.csdn.net/tang9140/article/details/42738433)","source":"_posts/java-lang-system-diy.md","raw":"---\ntitle: 能不能自己写个类叫 java.lang.System？\ncategories:\n  - 技术\ntags:\n  - JVM\nabbrlink: 814dc607\ndate: 2019-07-18 14:54:53\n---\n这是一个很经典的问题，但是网上提供的答案容易误导别人。接下来通过详细说明和实例来看看实际情况是怎么样的。\n\n# 错误答案的详细解释\n为了不让我们写 System 类，类加载采用委托机制，这样可以保证 parent 优先，parent 能找到的类，儿子就没有机会加载。而 System 类是 Bootstrap 加载器加载的，就算自己重写，也总是使用 Java 系统提供的 System，自己写的 System 类根本没有机会得到加载。但是，我们可以自己定义一个类加载器来达到这个目的，为了避免双亲委托机制，这个类加载器也必须是特殊的。由于系统自带的三个类加载器都加载特定目录下的类，如果我们自己的类加载器放在一个特殊的目录，那么系统的加载器就无法加载，也就是最终还是由我们自己的加载器加载。\n\n说明一下上面提到的一些概念：\n\n类加载器可分为两类：一是启动类加载器(Bootstrap ClassLoader)，是 C++ 实现的，是 JVM 的一部分；另一种是其它的类加载器，是 Java 实现的，独立于 JVM，全部都继承自抽象类 java.lang.ClassLoader。jdk 自带了三种类加载器，分别是启动类加载器（Bootstrap ClassLoader），扩展类加载器（Extension ClassLoader），应用程序类加载器（Application ClassLoader）。后两种加载器是继承自抽象类 java.lang.ClassLoader。\n\n# 类加载器使用的原理\n类加载器的加载过程一般是：自定义类加载器 >> 应用程序类加载器 >> 扩展类加载器 >> 启动类加载器。\n\n上面的层次关系被称为双亲委派模型(Parents Delegation Model)。除了最顶层的启动类加载器外，其余的类加载器都有对应的父类加载器。\n\n再简单说下双亲委托机制：如果一个类加载器收到了类加载的请求，它首先不会自己尝试去加载这个类，而是把这个请求委派给父类加载器，每一个层次的类加载器都是如此，因此所有的加载请求最终到达顶层的启动类加载器，只有当父类加载器反馈自己无法完成加载请求时（指它的搜索范围没有找到所需的类），子类加载器才会尝试自己去加载。\n\n再回去看下解释内容，我相信前面的部分大家应该很看懂了，也没什么大问题。最后的如果部分“如果我们自己的类加载器放在一个特殊的目录，那么系统的加载器就无法加载，也就是最终还是由我们自己的加载器加载。” ，逻辑完全不通。我想它的本意可能是，将自己的 java.lang.System 类放置在特殊目录，然后系统自带的加载器无法加载，这样最终还是由我们自己的加载器加载（因为我们自己的加载器知道其所在的特殊目录）。这种说法好像逻辑上没有问题，那么我们就来实验下了。\n\n# 代码验证\n```\n// 自定义类加载器\npublic class MyClassLoader extends ClassLoader{\n\n    public MyClassLoader() {\n        super(null);\n    }\n\n    @Override\n    public Class<?> loadClass(String name) throws ClassNotFoundException {\n        try{\n            String className = null;\n            if(name.startsWith(\"java.lang\")){\n                className = \"/\" + name.replace('.', '/') + \".class\";\n            }else{\n                className = name.substring(name.lastIndexOf('.') + 1) + \".class\";\n            }\n            System.out.println(className);\n            InputStream is = getClass().getResourceAsStream(className);\n            System.out.println(is);\n            if(is == null)\n                return super.loadClass(name);\n\n            byte[] b = new byte[is.available()];\n            is.read(b);\n            return defineClass(name, b, 0, b.length);\n        }catch (Exception e) {\n            e.printStackTrace();\n            throw new ClassNotFoundException();\n        }\n    }\n}\n```\n\nMath 类：\n```\nimport java.lang\n\n\npublic final class Math {\n    \n    public static void main(String[] args) {\n        System.out.println(\"hello world\");\n    }\n}\n\n\npublic class MyMath {\n    \n    public static void main(String[] args) {\n        System.out.println(\"hello world\");\n    }\n}\n```\n\nClassLoader 测试类：\n```\npublic class ClassLoaderTest {\n \n    public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        ClassLoader myLoader = new MyClassLoader();\n        Object obj = myLoader.loadClass(\"java.lang.Math\").newInstance();\n        System.out.println(obj);\n    }\n    \n}\n```\n\n上面的测试代码没用自定义java.lang.System类，因为测试代码用到了JDK自带的System类进行输出打印，会冲突，所以改用为自定义的java.lang.Math类。如果自定义的Math类能加载，那么自定义的System类同样能加载。\n\n我们先直接运行下 Math 类，输出如下：\n```\n错误: 在类 java.lang.Math 中找不到 main 方法, 请将 main 方法定义为:\n   public static void main(String[] args)\n否则 JavaFX 应用程序类必须扩展javafx.application.Application\n```\n\n提示Math类没有 main 方法。首先大家要明白一个概念，当类首次主动使用时，必须进行类的加载，这部分工作是由类加载器来完成的。根据双亲委托原则，Math 类首先由启动类加载器去尝试加载，很显然，它找到 rt.jar 中的 java.lang.Math 类并加载进内存（并不会加载我们自定义的Math类），然后执行 main 方法时，发现不存在该方法，所以报方法不存在错误。也就是说，默认情况下 JVM 不会加载我们自定义的 Math 类。\n\n再直接运行MyMath类，输出如下：\n\n```\njava.lang.SecurityException: Prohibited package name: java.lang\nat java.lang.ClassLoader.preDefineClass(ClassLoader.java:479)\nat java.lang.ClassLoader.defineClassCond(ClassLoader.java:625)\nat java.lang.ClassLoader.defineClass(ClassLoader.java:615)\nat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)\nat java.net.URLClassLoader.defineClass(URLClassLoader.java:283)\nat java.net.URLClassLoader.access$000(URLClassLoader.java:58)\nat java.net.URLClassLoader$1.run(URLClassLoader.java:197)\nat java.security.AccessController.doPrivileged(Native Method)\nat java.net.URLClassLoader.findClass(URLClassLoader.java:190)\nat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\nat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)\nat java.lang.ClassLoader.loadClass(ClassLoader.java:247)\nException in thread \"main\" \n```\n\n由堆栈异常信息可知道，当应用程序类加载器类（AppClassLoader）尝试加载MyMath类时，ClassLoader.java的479行抛出了SecurityException。\n\n**禁止使用包名：java.lang。**\n\n直接查看抽象类 java.lang.ClassLoader 的 preDefineClass 方法代码，摘抄如下：\n\n```java\nprivate ProtectionDomain preDefineClass(String name,\n                                            ProtectionDomain pd)\n{\n    if (!checkName(name))\n        throw new NoClassDefFoundError(\"IllegalName: \" + name);\n\n    // Note:  Checking logic in java.lang.invoke.MemberName.checkForTypeAlias\n    // relies on the fact that spoofing is impossible if a class has a name\n    // of the form \"java.*\"\n    if ((name != null) && name.startsWith(\"java.\")) {\n        throw new SecurityException\n            (\"Prohibited package name: \" +\n             name.substring(0, name.lastIndexOf('.')));\n    }\n    if (pd == null) {\n        pd = defaultDomain;\n    }\n\n    if (name != null) checkCerts(name, pd.getCodeSource());\n\n    return pd;\n}\n```\n\n可以看到如果加载的类全名称以“java.”开头时，将会抛出SecurityException，这也是为什么直接执行MyMath类会出现 SecurityException。\n\n照这样，我们自定义的类加载器必须继承自ClassLoader，其loadClass()方法里调用了父类的defineClass()方法，并最终调到 preDefineClass() 方法，因此我们自定义的类加载器也是不能加载以 “java.” 开头的 java 类的。我们继续运行下 ClassLoaderTest 类，输出如下：\n\n```\n\n/java/lang/Math.class\nsun.net.www.protocol.jar.JarURLConnection$JarURLInputStream@a981ca\njava.lang.SecurityException: Prohibited package name: java.lang\nat java.lang.ClassLoader.preDefineClass(ClassLoader.java:479)\nat java.lang.ClassLoader.defineClassCond(ClassLoader.java:625)\nat java.lang.ClassLoader.defineClass(ClassLoader.java:615)\nat java.lang.ClassLoader.defineClass(ClassLoader.java:465)\nat com.tq.MyClassLoader.loadClass(MyClassLoader.java:28)\nat com.tq.ClassLoaderTest.main(ClassLoaderTest.java:8)\nException in thread \"main\" java.lang.ClassNotFoundException\nat com.tq.MyClassLoader.loadClass(MyClassLoader.java:31)\nat com.tq.ClassLoaderTest.main(ClassLoaderTest.java:8)\n```\n\n通过代码实例及源码分析可以看到，对于自定义的类加载器，强行用defineClass()方法去加载一个以\"java.\"开头的类也是会抛出异常的。\n\n# 总结\n**不能自己写以\"java.\"开头的类，其要么不能加载进内存，要么即使你用自定义的类加载器去强行加载，也会收到一个SecurityException。**\n\n# 参考\n* [java能不能自己写一个类叫java.lang.System/String正确答案](https://blog.csdn.net/tang9140/article/details/42738433)","slug":"java-lang-system-diy","published":1,"updated":"2019-07-18T06:56:47.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb7mrmca000hljy8h9iquwhp","content":"<p>这是一个很经典的问题，但是网上提供的答案容易误导别人。接下来通过详细说明和实例来看看实际情况是怎么样的。</p>\n<h1 id=\"错误答案的详细解释\"><a href=\"#错误答案的详细解释\" class=\"headerlink\" title=\"错误答案的详细解释\"></a>错误答案的详细解释</h1><p>为了不让我们写 System 类，类加载采用委托机制，这样可以保证 parent 优先，parent 能找到的类，儿子就没有机会加载。而 System 类是 Bootstrap 加载器加载的，就算自己重写，也总是使用 Java 系统提供的 System，自己写的 System 类根本没有机会得到加载。但是，我们可以自己定义一个类加载器来达到这个目的，为了避免双亲委托机制，这个类加载器也必须是特殊的。由于系统自带的三个类加载器都加载特定目录下的类，如果我们自己的类加载器放在一个特殊的目录，那么系统的加载器就无法加载，也就是最终还是由我们自己的加载器加载。</p>\n<p>说明一下上面提到的一些概念：</p>\n<p>类加载器可分为两类：一是启动类加载器(Bootstrap ClassLoader)，是 C++ 实现的，是 JVM 的一部分；另一种是其它的类加载器，是 Java 实现的，独立于 JVM，全部都继承自抽象类 java.lang.ClassLoader。jdk 自带了三种类加载器，分别是启动类加载器（Bootstrap ClassLoader），扩展类加载器（Extension ClassLoader），应用程序类加载器（Application ClassLoader）。后两种加载器是继承自抽象类 java.lang.ClassLoader。</p>\n<h1 id=\"类加载器使用的原理\"><a href=\"#类加载器使用的原理\" class=\"headerlink\" title=\"类加载器使用的原理\"></a>类加载器使用的原理</h1><p>类加载器的加载过程一般是：自定义类加载器 &gt;&gt; 应用程序类加载器 &gt;&gt; 扩展类加载器 &gt;&gt; 启动类加载器。</p>\n<p>上面的层次关系被称为双亲委派模型(Parents Delegation Model)。除了最顶层的启动类加载器外，其余的类加载器都有对应的父类加载器。</p>\n<p>再简单说下双亲委托机制：如果一个类加载器收到了类加载的请求，它首先不会自己尝试去加载这个类，而是把这个请求委派给父类加载器，每一个层次的类加载器都是如此，因此所有的加载请求最终到达顶层的启动类加载器，只有当父类加载器反馈自己无法完成加载请求时（指它的搜索范围没有找到所需的类），子类加载器才会尝试自己去加载。</p>\n<p>再回去看下解释内容，我相信前面的部分大家应该很看懂了，也没什么大问题。最后的如果部分“如果我们自己的类加载器放在一个特殊的目录，那么系统的加载器就无法加载，也就是最终还是由我们自己的加载器加载。” ，逻辑完全不通。我想它的本意可能是，将自己的 java.lang.System 类放置在特殊目录，然后系统自带的加载器无法加载，这样最终还是由我们自己的加载器加载（因为我们自己的加载器知道其所在的特殊目录）。这种说法好像逻辑上没有问题，那么我们就来实验下了。</p>\n<h1 id=\"代码验证\"><a href=\"#代码验证\" class=\"headerlink\" title=\"代码验证\"></a>代码验证</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 自定义类加载器</span><br><span class=\"line\">public class MyClassLoader extends ClassLoader&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyClassLoader() &#123;</span><br><span class=\"line\">        super(null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            String className = null;</span><br><span class=\"line\">            if(name.startsWith(&quot;java.lang&quot;))&#123;</span><br><span class=\"line\">                className = &quot;/&quot; + name.replace(&apos;.&apos;, &apos;/&apos;) + &quot;.class&quot;;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                className = name.substring(name.lastIndexOf(&apos;.&apos;) + 1) + &quot;.class&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(className);</span><br><span class=\"line\">            InputStream is = getClass().getResourceAsStream(className);</span><br><span class=\"line\">            System.out.println(is);</span><br><span class=\"line\">            if(is == null)</span><br><span class=\"line\">                return super.loadClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">            byte[] b = new byte[is.available()];</span><br><span class=\"line\">            is.read(b);</span><br><span class=\"line\">            return defineClass(name, b, 0, b.length);</span><br><span class=\"line\">        &#125;catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            throw new ClassNotFoundException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Math 类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.lang</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public final class Math &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;hello world&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class MyMath &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;hello world&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ClassLoader 测试类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ClassLoaderTest &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\">        ClassLoader myLoader = new MyClassLoader();</span><br><span class=\"line\">        Object obj = myLoader.loadClass(&quot;java.lang.Math&quot;).newInstance();</span><br><span class=\"line\">        System.out.println(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的测试代码没用自定义java.lang.System类，因为测试代码用到了JDK自带的System类进行输出打印，会冲突，所以改用为自定义的java.lang.Math类。如果自定义的Math类能加载，那么自定义的System类同样能加载。</p>\n<p>我们先直接运行下 Math 类，输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">错误: 在类 java.lang.Math 中找不到 main 方法, 请将 main 方法定义为:</span><br><span class=\"line\">   public static void main(String[] args)</span><br><span class=\"line\">否则 JavaFX 应用程序类必须扩展javafx.application.Application</span><br></pre></td></tr></table></figure></p>\n<p>提示Math类没有 main 方法。首先大家要明白一个概念，当类首次主动使用时，必须进行类的加载，这部分工作是由类加载器来完成的。根据双亲委托原则，Math 类首先由启动类加载器去尝试加载，很显然，它找到 rt.jar 中的 java.lang.Math 类并加载进内存（并不会加载我们自定义的Math类），然后执行 main 方法时，发现不存在该方法，所以报方法不存在错误。也就是说，默认情况下 JVM 不会加载我们自定义的 Math 类。</p>\n<p>再直接运行MyMath类，输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.SecurityException: Prohibited package name: java.lang</span><br><span class=\"line\">at java.lang.ClassLoader.preDefineClass(ClassLoader.java:479)</span><br><span class=\"line\">at java.lang.ClassLoader.defineClassCond(ClassLoader.java:625)</span><br><span class=\"line\">at java.lang.ClassLoader.defineClass(ClassLoader.java:615)</span><br><span class=\"line\">at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)</span><br><span class=\"line\">at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)</span><br><span class=\"line\">at java.net.URLClassLoader.access$000(URLClassLoader.java:58)</span><br><span class=\"line\">at java.net.URLClassLoader$1.run(URLClassLoader.java:197)</span><br><span class=\"line\">at java.security.AccessController.doPrivileged(Native Method)</span><br><span class=\"line\">at java.net.URLClassLoader.findClass(URLClassLoader.java:190)</span><br><span class=\"line\">at java.lang.ClassLoader.loadClass(ClassLoader.java:306)</span><br><span class=\"line\">at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)</span><br><span class=\"line\">at java.lang.ClassLoader.loadClass(ClassLoader.java:247)</span><br><span class=\"line\">Exception in thread &quot;main&quot;</span><br></pre></td></tr></table></figure>\n<p>由堆栈异常信息可知道，当应用程序类加载器类（AppClassLoader）尝试加载MyMath类时，ClassLoader.java的479行抛出了SecurityException。</p>\n<p><strong>禁止使用包名：java.lang。</strong></p>\n<p>直接查看抽象类 java.lang.ClassLoader 的 preDefineClass 方法代码，摘抄如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ProtectionDomain <span class=\"title\">preDefineClass</span><span class=\"params\">(String name,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                            ProtectionDomain pd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!checkName(name))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoClassDefFoundError(<span class=\"string\">\"IllegalName: \"</span> + name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Note:  Checking logic in java.lang.invoke.MemberName.checkForTypeAlias</span></span><br><span class=\"line\">    <span class=\"comment\">// relies on the fact that spoofing is impossible if a class has a name</span></span><br><span class=\"line\">    <span class=\"comment\">// of the form \"java.*\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((name != <span class=\"keyword\">null</span>) &amp;&amp; name.startsWith(<span class=\"string\">\"java.\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SecurityException</span><br><span class=\"line\">            (<span class=\"string\">\"Prohibited package name: \"</span> +</span><br><span class=\"line\">             name.substring(<span class=\"number\">0</span>, name.lastIndexOf(<span class=\"string\">'.'</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pd == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        pd = defaultDomain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name != <span class=\"keyword\">null</span>) checkCerts(name, pd.getCodeSource());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到如果加载的类全名称以“java.”开头时，将会抛出SecurityException，这也是为什么直接执行MyMath类会出现 SecurityException。</p>\n<p>照这样，我们自定义的类加载器必须继承自ClassLoader，其loadClass()方法里调用了父类的defineClass()方法，并最终调到 preDefineClass() 方法，因此我们自定义的类加载器也是不能加载以 “java.” 开头的 java 类的。我们继续运行下 ClassLoaderTest 类，输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/java/lang/Math.class</span><br><span class=\"line\">sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream@a981ca</span><br><span class=\"line\">java.lang.SecurityException: Prohibited package name: java.lang</span><br><span class=\"line\">at java.lang.ClassLoader.preDefineClass(ClassLoader.java:479)</span><br><span class=\"line\">at java.lang.ClassLoader.defineClassCond(ClassLoader.java:625)</span><br><span class=\"line\">at java.lang.ClassLoader.defineClass(ClassLoader.java:615)</span><br><span class=\"line\">at java.lang.ClassLoader.defineClass(ClassLoader.java:465)</span><br><span class=\"line\">at com.tq.MyClassLoader.loadClass(MyClassLoader.java:28)</span><br><span class=\"line\">at com.tq.ClassLoaderTest.main(ClassLoaderTest.java:8)</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.ClassNotFoundException</span><br><span class=\"line\">at com.tq.MyClassLoader.loadClass(MyClassLoader.java:31)</span><br><span class=\"line\">at com.tq.ClassLoaderTest.main(ClassLoaderTest.java:8)</span><br></pre></td></tr></table></figure>\n<p>通过代码实例及源码分析可以看到，对于自定义的类加载器，强行用defineClass()方法去加载一个以”java.”开头的类也是会抛出异常的。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><strong>不能自己写以”java.”开头的类，其要么不能加载进内存，要么即使你用自定义的类加载器去强行加载，也会收到一个SecurityException。</strong></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/tang9140/article/details/42738433\" target=\"_blank\" rel=\"noopener\">java能不能自己写一个类叫java.lang.System/String正确答案</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一个很经典的问题，但是网上提供的答案容易误导别人。接下来通过详细说明和实例来看看实际情况是怎么样的。</p>\n<h1 id=\"错误答案的详细解释\"><a href=\"#错误答案的详细解释\" class=\"headerlink\" title=\"错误答案的详细解释\"></a>错误答案的详细解释</h1><p>为了不让我们写 System 类，类加载采用委托机制，这样可以保证 parent 优先，parent 能找到的类，儿子就没有机会加载。而 System 类是 Bootstrap 加载器加载的，就算自己重写，也总是使用 Java 系统提供的 System，自己写的 System 类根本没有机会得到加载。但是，我们可以自己定义一个类加载器来达到这个目的，为了避免双亲委托机制，这个类加载器也必须是特殊的。由于系统自带的三个类加载器都加载特定目录下的类，如果我们自己的类加载器放在一个特殊的目录，那么系统的加载器就无法加载，也就是最终还是由我们自己的加载器加载。</p>\n<p>说明一下上面提到的一些概念：</p>\n<p>类加载器可分为两类：一是启动类加载器(Bootstrap ClassLoader)，是 C++ 实现的，是 JVM 的一部分；另一种是其它的类加载器，是 Java 实现的，独立于 JVM，全部都继承自抽象类 java.lang.ClassLoader。jdk 自带了三种类加载器，分别是启动类加载器（Bootstrap ClassLoader），扩展类加载器（Extension ClassLoader），应用程序类加载器（Application ClassLoader）。后两种加载器是继承自抽象类 java.lang.ClassLoader。</p>\n<h1 id=\"类加载器使用的原理\"><a href=\"#类加载器使用的原理\" class=\"headerlink\" title=\"类加载器使用的原理\"></a>类加载器使用的原理</h1><p>类加载器的加载过程一般是：自定义类加载器 &gt;&gt; 应用程序类加载器 &gt;&gt; 扩展类加载器 &gt;&gt; 启动类加载器。</p>\n<p>上面的层次关系被称为双亲委派模型(Parents Delegation Model)。除了最顶层的启动类加载器外，其余的类加载器都有对应的父类加载器。</p>\n<p>再简单说下双亲委托机制：如果一个类加载器收到了类加载的请求，它首先不会自己尝试去加载这个类，而是把这个请求委派给父类加载器，每一个层次的类加载器都是如此，因此所有的加载请求最终到达顶层的启动类加载器，只有当父类加载器反馈自己无法完成加载请求时（指它的搜索范围没有找到所需的类），子类加载器才会尝试自己去加载。</p>\n<p>再回去看下解释内容，我相信前面的部分大家应该很看懂了，也没什么大问题。最后的如果部分“如果我们自己的类加载器放在一个特殊的目录，那么系统的加载器就无法加载，也就是最终还是由我们自己的加载器加载。” ，逻辑完全不通。我想它的本意可能是，将自己的 java.lang.System 类放置在特殊目录，然后系统自带的加载器无法加载，这样最终还是由我们自己的加载器加载（因为我们自己的加载器知道其所在的特殊目录）。这种说法好像逻辑上没有问题，那么我们就来实验下了。</p>\n<h1 id=\"代码验证\"><a href=\"#代码验证\" class=\"headerlink\" title=\"代码验证\"></a>代码验证</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 自定义类加载器</span><br><span class=\"line\">public class MyClassLoader extends ClassLoader&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyClassLoader() &#123;</span><br><span class=\"line\">        super(null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            String className = null;</span><br><span class=\"line\">            if(name.startsWith(&quot;java.lang&quot;))&#123;</span><br><span class=\"line\">                className = &quot;/&quot; + name.replace(&apos;.&apos;, &apos;/&apos;) + &quot;.class&quot;;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                className = name.substring(name.lastIndexOf(&apos;.&apos;) + 1) + &quot;.class&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(className);</span><br><span class=\"line\">            InputStream is = getClass().getResourceAsStream(className);</span><br><span class=\"line\">            System.out.println(is);</span><br><span class=\"line\">            if(is == null)</span><br><span class=\"line\">                return super.loadClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">            byte[] b = new byte[is.available()];</span><br><span class=\"line\">            is.read(b);</span><br><span class=\"line\">            return defineClass(name, b, 0, b.length);</span><br><span class=\"line\">        &#125;catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            throw new ClassNotFoundException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Math 类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.lang</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public final class Math &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;hello world&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class MyMath &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;hello world&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ClassLoader 测试类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ClassLoaderTest &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\">        ClassLoader myLoader = new MyClassLoader();</span><br><span class=\"line\">        Object obj = myLoader.loadClass(&quot;java.lang.Math&quot;).newInstance();</span><br><span class=\"line\">        System.out.println(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的测试代码没用自定义java.lang.System类，因为测试代码用到了JDK自带的System类进行输出打印，会冲突，所以改用为自定义的java.lang.Math类。如果自定义的Math类能加载，那么自定义的System类同样能加载。</p>\n<p>我们先直接运行下 Math 类，输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">错误: 在类 java.lang.Math 中找不到 main 方法, 请将 main 方法定义为:</span><br><span class=\"line\">   public static void main(String[] args)</span><br><span class=\"line\">否则 JavaFX 应用程序类必须扩展javafx.application.Application</span><br></pre></td></tr></table></figure></p>\n<p>提示Math类没有 main 方法。首先大家要明白一个概念，当类首次主动使用时，必须进行类的加载，这部分工作是由类加载器来完成的。根据双亲委托原则，Math 类首先由启动类加载器去尝试加载，很显然，它找到 rt.jar 中的 java.lang.Math 类并加载进内存（并不会加载我们自定义的Math类），然后执行 main 方法时，发现不存在该方法，所以报方法不存在错误。也就是说，默认情况下 JVM 不会加载我们自定义的 Math 类。</p>\n<p>再直接运行MyMath类，输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.SecurityException: Prohibited package name: java.lang</span><br><span class=\"line\">at java.lang.ClassLoader.preDefineClass(ClassLoader.java:479)</span><br><span class=\"line\">at java.lang.ClassLoader.defineClassCond(ClassLoader.java:625)</span><br><span class=\"line\">at java.lang.ClassLoader.defineClass(ClassLoader.java:615)</span><br><span class=\"line\">at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)</span><br><span class=\"line\">at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)</span><br><span class=\"line\">at java.net.URLClassLoader.access$000(URLClassLoader.java:58)</span><br><span class=\"line\">at java.net.URLClassLoader$1.run(URLClassLoader.java:197)</span><br><span class=\"line\">at java.security.AccessController.doPrivileged(Native Method)</span><br><span class=\"line\">at java.net.URLClassLoader.findClass(URLClassLoader.java:190)</span><br><span class=\"line\">at java.lang.ClassLoader.loadClass(ClassLoader.java:306)</span><br><span class=\"line\">at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)</span><br><span class=\"line\">at java.lang.ClassLoader.loadClass(ClassLoader.java:247)</span><br><span class=\"line\">Exception in thread &quot;main&quot;</span><br></pre></td></tr></table></figure>\n<p>由堆栈异常信息可知道，当应用程序类加载器类（AppClassLoader）尝试加载MyMath类时，ClassLoader.java的479行抛出了SecurityException。</p>\n<p><strong>禁止使用包名：java.lang。</strong></p>\n<p>直接查看抽象类 java.lang.ClassLoader 的 preDefineClass 方法代码，摘抄如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ProtectionDomain <span class=\"title\">preDefineClass</span><span class=\"params\">(String name,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                            ProtectionDomain pd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!checkName(name))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoClassDefFoundError(<span class=\"string\">\"IllegalName: \"</span> + name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Note:  Checking logic in java.lang.invoke.MemberName.checkForTypeAlias</span></span><br><span class=\"line\">    <span class=\"comment\">// relies on the fact that spoofing is impossible if a class has a name</span></span><br><span class=\"line\">    <span class=\"comment\">// of the form \"java.*\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((name != <span class=\"keyword\">null</span>) &amp;&amp; name.startsWith(<span class=\"string\">\"java.\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SecurityException</span><br><span class=\"line\">            (<span class=\"string\">\"Prohibited package name: \"</span> +</span><br><span class=\"line\">             name.substring(<span class=\"number\">0</span>, name.lastIndexOf(<span class=\"string\">'.'</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pd == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        pd = defaultDomain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name != <span class=\"keyword\">null</span>) checkCerts(name, pd.getCodeSource());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到如果加载的类全名称以“java.”开头时，将会抛出SecurityException，这也是为什么直接执行MyMath类会出现 SecurityException。</p>\n<p>照这样，我们自定义的类加载器必须继承自ClassLoader，其loadClass()方法里调用了父类的defineClass()方法，并最终调到 preDefineClass() 方法，因此我们自定义的类加载器也是不能加载以 “java.” 开头的 java 类的。我们继续运行下 ClassLoaderTest 类，输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/java/lang/Math.class</span><br><span class=\"line\">sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream@a981ca</span><br><span class=\"line\">java.lang.SecurityException: Prohibited package name: java.lang</span><br><span class=\"line\">at java.lang.ClassLoader.preDefineClass(ClassLoader.java:479)</span><br><span class=\"line\">at java.lang.ClassLoader.defineClassCond(ClassLoader.java:625)</span><br><span class=\"line\">at java.lang.ClassLoader.defineClass(ClassLoader.java:615)</span><br><span class=\"line\">at java.lang.ClassLoader.defineClass(ClassLoader.java:465)</span><br><span class=\"line\">at com.tq.MyClassLoader.loadClass(MyClassLoader.java:28)</span><br><span class=\"line\">at com.tq.ClassLoaderTest.main(ClassLoaderTest.java:8)</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.ClassNotFoundException</span><br><span class=\"line\">at com.tq.MyClassLoader.loadClass(MyClassLoader.java:31)</span><br><span class=\"line\">at com.tq.ClassLoaderTest.main(ClassLoaderTest.java:8)</span><br></pre></td></tr></table></figure>\n<p>通过代码实例及源码分析可以看到，对于自定义的类加载器，强行用defineClass()方法去加载一个以”java.”开头的类也是会抛出异常的。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><strong>不能自己写以”java.”开头的类，其要么不能加载进内存，要么即使你用自定义的类加载器去强行加载，也会收到一个SecurityException。</strong></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/tang9140/article/details/42738433\" target=\"_blank\" rel=\"noopener\">java能不能自己写一个类叫java.lang.System/String正确答案</a></li>\n</ul>\n"},{"title":"hotspot-jvm 垃圾收集器","abbrlink":"6a0a4ced","date":"2019-03-29T05:52:44.000Z","_content":"\n# 垃圾收集概念\nGC 需要做 3 件事情：\n* 分配内存，为每个新建的对象分配空间\n* 确保还在使用的对象的内存一直还在，不能把有用的空间当垃圾回收了\n* 释放不再使用的对象所占用的空间\n我们把还被 GC Roots 引用的对象称为活的，把不再被引用的对象认为是死的，也就是我们说的垃圾，GC 的工作就是找到死的对象，回收它们占用的空间。\n在这里，我们总结一下 GC Roots 有哪些：\n* 当前各线程执行方法中的局部变量（包括形参）引用的对象\n* 已被加载的类的 static 域引用的对象\n* 方法区中常量引用的对象\n* JNI 引用\n我们把 GC 管理的内存称为 堆（heap），垃圾收集启动的时机取决于各个垃圾收集器，通常，垃圾收集发生于整个堆或堆的部分已经被使用光了，或者使用的空间达到了某个百分比阈值。这些后面都会具体说，这里的每一句话都是对应了某些场景的。\n\n对于内存分配请求，实现的难点在于在堆中找到一块没有被使用的确定大小的内存空间。所以，对于大部分垃圾回收算法来说避免内存碎片化是非常重要的，它将使得空间分配更加高效。\n\n## 垃圾收集器的理想特征\n1. 安全和全面：活的对象一定不能被清理掉，死的对象一定不能在几个回收周期结束后还在内存中。\n2. 高效：不能将我们的应用程序挂起太长时间。我们需要在时间、空间、频次上作出权衡。比如，如果堆内存很小，每次垃圾收集就会很快，但是频次会增加。如果堆内存很大，很久才会被填满，但是每一次回收需要的时间很长\n3. 尽量少的内存碎片：每次将垃圾对象释放以后，这些空间可能分布在各个地方，最糟糕的情况就是，内存中到处都是碎片，在给一个大对象分配空间的时候没有内存可用，实际上内存是够的。消除碎片的方式就是压缩\n4. 可扩展性：在多核多线程应用中，内存分配和垃圾回收都不应该成为可扩展性的瓶颈。原文提到的这一点，我的理解是：单线程垃圾回收在多核系统中会浪费 CPU 资源\n## 设计上的权衡\n往下看之前，我们需要先分清楚这里的两个概念：并发和并行\n* 并行：多个垃圾回收线程同时工作，而不是只有一个垃圾回收线程在工作\n* 并发：垃圾回收线程和应用程序线程同时工作，应用程序不需要挂起\n在设计或选择垃圾回收算法的时候，我们需要作出以下几个权衡：\n* 串行 vs 并行\n串行收集的情况，即使是多核 CPU，也只有一个核心参与收集。使用并行收集器的话，垃圾收集的工作将分配给多个线程在不同的 CPU 上同时进行。并行可以让收集工作更快，缺点是带来的复杂性和内存碎片问题。\n* 并发 vs Stop-the-world\n当 stop-the-world 垃圾收集器工作的时候，应用将完全被挂起。与之相对的，并发收集器在大部分工作中都是并发进行的，也许会有少量的 stop-the-world。\n\nstop-the-world 垃圾收集器比并发收集器简单很多，因为应用挂起后堆空间不再发生变化，它的缺点是在某些场景下挂起的时间我们是不能接受的（如 web 应用）。\n\n相应的，并发收集器能够降低挂起时间，但是也更加复杂，因为在收集的过程中，也会有新的垃圾产生，同时，需要有额外的空间用于在垃圾收集过程中应用程序的继续使用。\n\n* 压缩 vs 不压缩 vs 复制\n当垃圾收集器标记出内存中哪些是活的，哪些是垃圾对象后，收集器可以进行压缩，将所有活的对象移到一起，这样新的内存分配就可以在剩余的空间中进行了。经过压缩后，分配新对象的内存空间是非常简单快速的。\n\n相对的，不压缩的收集器只会就地释放空间，不会移动存活对象。优点就是快速完成垃圾收集，缺点就是潜在的碎片问题。通常，这种情况下，分配对象空间会比较慢比较复杂，比如为新的一个大对象找到合适的空间。\n\n还有一个选择就是复制收集器，将活的对象复制到另一块空间中，优点就是原空间被清空了，这样后续分配对象空间非常迅速，缺点就是需要进行复制操作和占用额外的空间。\n\n## 性能指标\n* 吞吐量：应用程序的执行时间占总时间的百分比，当然是越高越好\n* 垃圾收集开销：垃圾收集时间占总时间的百分比（1 - 吞吐量）\n* 停顿时间：垃圾收集过程中导致的应用程序挂起时间\n* 频次：相对于应用程序来说，垃圾收集的频次\n* 空间：垃圾收集占用的内存\n* 及时性：一个对象从成为垃圾到该对象空间再次可用的时间\n在交互式程序中，通常希望是低延时的，而对于非交互式程序，总运行时间比较重要。实时应用程序既要求每次停顿时间足够短，也要求总的花费在收集的时间足够短。在小型个人计算机和嵌入式系统中，则希望占用更小的空间。\n\n## 分代收集介绍\n当我们使用分代垃圾收集器时，内存将被分为不同的代(generation)，最常见的就是分为年轻代和老年代。\n\n在不同的分代中，可以根据不同的特点使用不同的算法。分代垃圾收集基于 weak generational hypothesis 假设（即「弱分代」假设）：\n* 大部分对象都是短命的，它们在年轻的时候就会死去\n* 极少老年对象对年轻对象的引用\n* \n年轻代中的收集是非常频繁的、高效的、快速的，因为年轻代空间中，通常都是小对象，同时有非常多的不再被引用的对象。\n\n那些经历过多次年轻代垃圾收集还存活的对象会晋升到老年代中，老年代的空间更大，而且占用空间增长比较慢。这样，老年代的垃圾收集是不频繁的，但是进行一次垃圾收集需要的时间更长。\n\n对于新生代，需要选择速度比较快的垃圾回收算法，因为新生代的垃圾回收是频繁的。\n\n对于老年代，需要考虑的是空间，因为老年代占用了大部分堆内存，而且针对该部分的垃圾回收算法，需要考虑到这个区域的垃圾密度比较低。\n\n# J2SE 5.0 HotSpot JVM 中的垃圾收集器\nJ2SE 5.0 HotSpot 虚拟机包含四种垃圾收集器，都是采用分代算法。包括串行收集器、并行收集器、并行压缩收集器 和 CMS 垃圾收集器。\n## HotSpot 分代\n\n在 HotSpot 虚拟机中，内存被组织成三个分代：年轻代、老年代、永久代。\n\n大部分对象初始化的时候都是在年轻代中的。\n\n老年代存放经过了几次年轻代垃圾收集依然还活着的对象，还有部分大对象因为比较大所以分配的时候直接在老年代分配。\n\n```\n如 -XX:PretenureSizeThreshold=1024，这样大于 1k 的对象就会直接分配在老年代\n```\n永久代，通常也叫 方法区，用于存储已加载类的元数据，以及存储运行时常量池等。\n\n## 垃圾回收类型\n当年轻代被填满后，会进行一次年轻代垃圾收集（也叫做 minor GC）。\n\n```\n注意：\"minor gc 收集年轻代，full gc 收集老年代\" 这句话是错的。\n```\n\n当老年代或永久代被填满了，会触发 full GC（也叫做 major GC），full GC 会收集所有区域，先进行年轻代的收集，使用年轻代专用的垃圾回收算法，然后使用老年代的垃圾回收算法回收老年代和永久代。如果算法带有压缩，每个代分别独立地进行压缩。\n\n如果先进行年轻代垃圾收集，会使得老年代不能容纳要晋升上来的对象，这种情况下，不会先进行 young gc，所有的收集器都会（除了 CMS）直接采用老年代收集算法对整个堆进行收集（CMS 收集器比较特殊，因为它不能收集年轻代的垃圾）。\n\n```\n基于统计，计算出每次年轻代晋升到老年代的平均大小，if (老年代剩余空间 < 平均大小) 触发 full gc。\n```\n\n## 快速分配\n\n如果垃圾收集完成后，存在大片连续的内存可用于分配给新对象，这种情况下分配空间是非常简单快速的，只要一个简单的指针碰撞就可以了（bump-the-pointer），每次分配对象空间只要检测一下是否有足够的空间，如果有，指针往前移动 N 位就分配好空间了，然后就可以初始化这个对象了。\n\n对于多线程应用，对象分配必须要保证线程安全性，如果使用全局锁，那么分配空间将成为瓶颈并降低程序性能。HotSpot 使用了称之为 Thread-Local Allocation Buffers (TLABs) 的技术，该技术能改善多线程空间分配的吞吐量。首先，给予每个线程一部分内存作为缓存区，每个线程都在自己的缓存区中进行指针碰撞，这样就不用获取全局锁了。只有当一个线程使用完了它的 TLAB，它才需要使用同步来获取一个新的缓冲区。HotSpot 使用了多项技术来降低 TLAB 对于内存的浪费。比如，TLAB 的平均大小被限制在 Eden 区大小的 1% 之内。TLABs 和使用指针碰撞的线性分配结合，使得内存分配非常简单高效，只需要大概 10 条机器指令就可以完成。\n\n## 串行收集器\n\n使用串行收集器，年轻代和老年代都使用单线程进行收集（使用一个 CPU），收集过程中会 stop-the-world。所以当在垃圾收集的时候，应用程序是完全停止的。\n\n### 年轻代中使用串行收集器\n\n下图展示了年轻代中使用串行收集器的流程。\n![](https://www.javadoop.com/blogimages/jvm-memory-management/3.png)\n\n年轻代分为一个 Eden 区和两个 Survivor 区（From 区和 To 区）。年轻代垃圾收集时，将 Eden 中活着的对象复制到空的 Survivor-To 区，Survivor-From 区的对象分两类，一类是年轻的，也是复制到 Survivor-To 区，还有一类是老家伙，晋升到老年代中。\n\n如果复制的过程中，发现 Survivor-To 空间满了，将剩下还没复制到 Survivor-To 的来自于 Eden 和 Survivor-From 区的对象直接晋升到老年代。\n\n年轻代垃圾收集完成后，Eden 区和 Survivor-From 就干净了，此时，将 Survivor-From 和 Survivor-To 交换一下角色。得到下面这个样子：\n\n![](https://www.javadoop.com/blogimages/jvm-memory-management/4.png)\n\n### 老年代中使用串行收集器\n\n如果使用串行收集器，在老年代和永久代将通过使用 标记 -> 清除 -> 压缩 算法。标记阶段，收集器识别出哪些对象是活的；清除阶段将遍历一下老年代和永久代，识别出哪些是垃圾；然后执行压缩，将活的对象左移到老年代的起始端（永久代类似），这样就留下了右边一片连续可用的空间，后续就可以通过指针碰撞的方式快速分配对象空间。\n\n![](https://www.javadoop.com/blogimages/jvm-memory-management/5.png)\n\n### 何时应该使用串行收集器\n串行收集器适用于运行在 client 模式下的大部分程序，它们不要求低延时。在现代硬件条件下，串行收集器可以高效管理 64M 堆内存，并且能将 full GC 控制在半秒内完成。\n\n### 使用串行收集器\n\n它是 J2SE 5.0 版本 HotSpot 虚拟机在非服务器级别硬件的默认选择。你也可以使用 -XX:+UseSerialGC 来强制使用串行收集器。\n\n## 并行收集器\n\n现在大多数 Java 应用都运行在大内存、多核环境中，并行收集器，也就是大家熟知的吞吐量收集器，利用多核的优势来进行垃圾收集，而不是像串行收集器一样将程序挂起后只使用单线程来收集垃圾。\n\n### 在年轻代中使用并行收集器\n\n并行收集器在年轻代中其实就是串行收集器收集算法的并行版本。它仍然使用 stop-the-world 和复制算法，只不过使用了多核的优势并行执行，降低垃圾收集的时间，从而提高吞吐量。下图示意了在年轻代中，串行收集器和并行收集器的区别：\n\n![](https://www.javadoop.com/blogimages/jvm-memory-management/6.png)\n\n### 在老年代中使用并行收集器\n在老年代中，并行收集器使用的是和串行收集器一样的算法：单线程，标记 -> 清除 -> 压缩。\n\n```\n是的，并行收集器只能在年轻代中并行\n```\n\n### 何时使用并行收集器\n其适用于多核、不要求低停顿的应用，因为老年代的收集虽然不频繁，但是每次老年代的单线程垃圾收集依然可能会需要很长时间。比如说，它可以应用在批处理、账单计算、科学计算等。\n\n### 使用并行收集器\n\n前面我们说了，J2SE 5.0 中 client 模式自动选择使用串行收集器，如果是 server 模式，那么将自动使用并行收集器。在其他版本中，显示使用 -XX:+UseParallelGC 可以指定并行收集器。\n\n## 并行压缩收集器\n\n并行压缩收集器于 J2SE 5.0 update 6 引入，和并行收集器的区别在于它在老年代也使用并行收集算法。注意：并行压缩收集器终将会取代并行收集器。\n\n### 在年轻代中使用并行压缩收集器\n\n并行压缩收集器在年轻代中使用了和并行收集器一样的算法。即使用 并行、stop-the-world、复制 算法。\n\n### 在老年代中使用并行压缩收集器\n\n在老年代和永久代中，其使用 并行、stop-the-world、滑动压缩 算法。\n\n一次收集分三个阶段，首先，将老年代或永久代逻辑上分为固定大小的区块。\n\n1. 标记阶段，将 GC Roots 分给多个垃圾收集线程，每个线程并行地去标记存活的对象，一旦标记一个存活对象，在该对象所在的区块记录这个对象的大小和对象所在的位置。\n\n2. 汇总阶段，此阶段针对区块进行。由于之前的垃圾回收影响，老年代和永久代的左侧是 存活对象密集区，对这部分区域直接进行压缩的代价是不值得的，能清理出来的空间有限。所以第一件事就是，检查每个区块的密度，从左边第一个开始，直到找到一个区块满足：对右侧的所有区块进行压缩获得的空间抵得上压缩它们的成本。这个区块左边的区域过于密集，不会有对象移动到这个区域中。然后，计算并保存右侧区域中每个区块被压缩后的新位置首字节地址。\n\n右侧的区域将被压缩，对于右侧的每个区块，由于每个区块中保存了该区块的存活对象信息，所以很容易计算每个区块的新位置。注意：汇总阶段目前被实现为串行进行，这个阶段修改为并行也是可行的，不过没有在标记阶段和下面的压缩阶段并行那么重要。\n\n3. 压缩阶段，在汇总阶段已经完成了每个区块新位置的计算，所以压缩阶段每个回收线程并行将每个区块复制到新位置即可。压缩结束后，就清出来了右侧一大片连续可用的空间。\n\n### 何时使用并行压缩收集器\n首先是多核上的并行优势，这个就不重复了。其次，前面的并行收集器对于老年代和永久代使用串行，而并行压缩收集器在这些区域使用并行，能降低停顿时间。\n\n并行压缩收集器不适合运行在大型共享主机上（如 SunRays），因为它在收集的时候会独占几个 CPU，在这种机器上，可以考虑减少垃圾收集的线程数（通过 –XX:ParallelGCThreads=n），或者就选择其他收集器。\n\n### 使用并行压缩收集器\n\n显示指定：-XX:+UseParallelOldGC\n\n## Concurrent Mark-Sweep（CMS）收集器\n```\n重头戏 CMS 登场了，至少对于我这个 web 开发者来说，目前 CMS 最常用（使用 JDK8 的应用一般都切换到 G1 收集器了）。前面介绍的都是并行收集，这里要介绍并发收集了，也就是垃圾回收线程和应用程序线程同时运行。\n```\n\nJDK8 一般使用 G1 收集器。\n\n对于许多程序来说，吞吐量不如响应时间来得重要。通常年轻代的垃圾收集不会停顿多长时间，但是，老年代垃圾回收，虽然不频繁，但是可能导致长时间的停顿，尤其当堆内存比较大的时候。为了解决这个问题，HotSpot 虚拟机提供了 CMS 收集器，也叫做 低延时收集器。\n\n### 在年轻代中使用 CMS 收集器\n在年轻代中，CMS 和 并行收集器 一样，即：并行、stop-the-world、复制。\n\n### 在老年代中使用 CMS 收集器\n在老年代的垃圾收集过程中，大部分收集任务是和应用程序并发执行的。\n\nCMS 收集过程首先是一段小停顿 stop-the-world，叫做 初始标记阶段（initial mark），用于确定 GC Roots。然后是 并发标记阶段（concurrent mark），标记 GC Roots 可达的所有存活对象，由于这个阶段应用程序同时也在运行，所以并发标记阶段结束后，并不能标记出所有的存活对象。为了解决这个问题，需要再次停顿应用程序，称为 再次标记阶段（remark），遍历在并发标记阶段应用程序修改的对象（标记出应用程序在这个期间的活对象），由于这次停顿比初始标记要长得多，所以会使用多线程并行执行来增加效率。\n\n再次标记阶段结束后，能保证所有存活对象都被标记完成，所以接下来的 并发清理阶段（concurrent sweep） 将就地回收垃圾对象所占空间。下图示意了老年代中 串行、标记 -> 清理 -> 压缩收集器和 CMS 收集器的区别：\n\n![](https://www.javadoop.com/blogimages/jvm-memory-management/7.png)\n\nCMS 收集器是唯一不进行压缩的收集器，在它释放了垃圾对象占用的空间后，它不会移动存活对象到一边去。\n![](https://www.javadoop.com/blogimages/jvm-memory-management/8.png)\n\n这将节省垃圾回收的时间，但是由于之后空闲空间不是连续的，所以也就不能使用简单的 指针碰撞（bump-the-pointer） 进行对象空间分配了。它需要维护一个 空闲列表，将所有的空闲区域连接起来，当分配空间时，需要寻找到一个可以容纳该对象的区域。显然，它比使用简单的指针碰撞成本要高。同时它也会加大年轻代垃圾收集的负载，因为年轻代中的对象如果要晋升到老年代中，需要老年代进行空间分配。\n\n另外一个缺点就是，CMS 收集器相比其他收集器需要使用更大的堆内存。因为在并发标记阶段，程序还需要执行，所以需要留足够的空间给应用程序。另外，虽然收集器能保证在标记阶段识别出所有的存活对象，但是由于应用程序并发运行，所以刚刚标记的存活对象很可能立马成为垃圾，而且这部分由于已经被标记为存活对象，所以只能到下次老年代收集才会被清理，这部分垃圾称为 浮动垃圾。\n\n最后，由于缺少压缩环节，堆将会出现碎片化问题。为了解决这个问题，CMS 收集器需要追踪统计最常用的对象大小，评估将来的分配需求，可能还需要分割或合并空闲区域。\n\n不像其他垃圾收集器，CMS 收集器不能等到老年代满了才开始收集。否则的话，CMS 收集器将退化到使用更加耗时的 stop-the-world、标记-清除-压缩 算法。为了避免这个，CMS 收集器需要统计之前每次垃圾收集的时间和老年代空间被消耗的速度。另外，如果老年代空间被消耗了 预设占用率（initiating occupancy），也将会触发一次垃圾收集，这个占用率通过 –XX:CMSInitiatingOccupancyFraction=n 进行设置，n 为老年代空间的占用百分比，默认值是 68。\n\n```\n这个数字到 Java8 的时候已经变为默认 92 了。如果老年代空间不足以容纳从新生代垃圾回收晋升上来的对象，那么就会发生 concurrent mode failure，此时会退化到发生 Full GC，清除老年代中的所有无效对象，这个过程是单线程的，比较耗时\n\n另外，即使在晋升的时候判断出老年代有足够的空间，但是由于老年代的碎片化问题，其实最终没法容纳晋升上来的对象，那么此时也会发生 Full GC，这次的耗时将更加严重，因为需要对整个堆进行压缩，压缩后年轻代彻底就空了。\n```\n\n总结下来，和并行收集器相比，CMS 收集器降低了老年代收集时的停顿时间（有时是显著降低），稍微增加了一些年轻代收集的时间、降低了吞吐量 以及 需要更多的堆内存。\n\n### 增量模式\nCMS 收集器可以使用增量模式，在并发标记阶段，周期性地将自己的 CPU 时钟周期让出来给应用程序。这个功能适用于需要 CMS 的低延时，但是 CPU 核心只有 1 个或 2 个的情况。\n```\n增量模式在 Java8 已经不推荐使用。\n\n目前我了解到的是，在所有的并发或并行收集器中，都提供了控制垃圾收集线程数量的参数设置。\n```\n\n### 何时使用 CMS 收集器\n适用于应用程序要求低停顿，同时能接受在垃圾收集阶段和垃圾收集线程一起共享 CPU 资源的场景，典型的就是 web 应用了。\n```\n在 web 应用中，低延时非常重要，所以 CMS 几乎就是唯一选择，直到后来 G1 的出现。\n```\n\n### 使用 CMS 收集器\n显示指定：-XX:+UseConcMarkSweepGC\n\n如果需要增量模式：–XX:+CMSIncrementalModeoption\n\n# GC 触发时机\n什么时候进行垃圾回收？\n## Minor GC触发条件\n\n当Eden区满时，触发Minor GC。\n\n## Full GC触发条件\n\n* 调用System.gc时，系统建议执行Full GC，但是不必然执行\n\n* 老年代空间不足\n\n* 方法区空间不足\n\n* 通过Minor GC后进入老年代的平均大小大于老年代的可用内存\n\n* 由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小\n\n# JVM 6-11 默认垃圾回收器\n* jdk1.7 默认垃圾收集器 Parallel Scavenge（新生代）+ Serial Old（老年代）\n* jdk1.8 默认垃圾收集器 Parallel Scavenge（新生代）+ Serial Old（老年代）\n* jdk1.9 默认垃圾收集器 G1\n* jdk1.10 默认垃圾收集器 G1\n* jdk1.11 默认垃圾收集器 G1\n\n-XX:+PrintCommandLineFlagsjvm参数可查看默认设置收集器类型\n\n-XX:+PrintGCDetails亦可通过打印的GC日志的新生代、老年代名称判断\n\n![image](http://note.youdao.com/yws/res/18836/51D70BBADA52441594797E8CD748FCA8)\n-XX:+UseG1GC：使用 G1 垃圾收集器。\n\n## 垃圾收集器搭配\n垃圾收集器:\n\n* 新生代收集器: Serial, ParNew, Parallel Scavenge (MaxGCPauseMillis vs. GCTimeRatio 响应时间 vs. 吞吐量)\n* 老生代收集器: Serial Old, Parallel Old, CMS\n\n垃圾收集器搭配总结:\n\n* CMS 只能配 Serial 或 ParNew\n* Parallel Scavenge 只能配 Serial Old 或 Parallel Old\n* Serial 不能配 Parallel Old\n* ParNew 不能搭配 Parallel Old\n\n搭配种类：\n* Serial + Serial Old (UseSerialGC): GC 线程在做事情时, 其他所有的用户线程都必须停止 (即 stop the world)\n* Serial + CMS: 一般不会这样配合使用\n* ParNew + CMS (UseConcMarkSweepGC): 新生代的 GC 使用 ParNew, 有多个 GC 线程同时进行 Minor GC (主要是在多核的环境用多线程效果会好); 而老生代使用 CMS (CMS 后面会重点讲)\n* ParNew + Serial Old (UseParNewGC): 新生代用 ParNew 的时候, 也可以选择老生代不用 CMS, 而用 Serial Old (实际上, 这个组合也不太常用)\n* Parallel Scavenge + Serial Old (UseParallelGC): Parallel Scavenge 收集器的目的是达到一个可控制的吞吐率 (适用于各种计算任务); 这个组合中老生代仍旧使用 Serial Old\n* Parallel Scavenge + Parallel Old (UseParallelOldGC): 新生代使用 Parallel Scavenge, 而 Parallel Old 是老年代版本的 Parallel Scavenge\n\n## 总结\n\n收集器|串行、并行or并发|新生代/老年代|算法|目标|适用场景\n---|---|---|---|---|---\nSerial|串行|新生代|复制算法|响应速度优先|单CPU环境下的Client模式\nSerial Old|串行|老年代|标记-整理|响应速度优先|单CPU环境下的Client模式、CMS的后备预案\nParNew|并行|新生代|复制算法|响应速度优先|多CPU环境时在Server模式下与CMS配合\nParallel Scavenge|并行|新生代|复制算法|吞吐量优先|在后台运算而不需要太多交互的任务\nParallel Old|并行|老年代|标记-整理|吞吐量优先|在后台运算而不需要太多交互的任务\nCMS|并发|老年代|标记-清除|响应速度优先|集中在互联网站或B/S系统服务端上的Java应用\nG1|并发|both|标记-整理+复制算法|响应速度优先|面向服务端应用，将来替换CMS\n\nParNew 和 Parallel Scavenge 区别：\n* 两者都是复制算法，都是并行处理，但是不同的是，paralel scavenge 可以设置最大gc停顿时间（-XX:MaxGCPauseMills）以及gc时间占比(-XX:GCTimeRatio)\n* \n说明：\n* GCTimeRatio参数的值应当是一个大于0且小于100的整数，也就是垃圾收集时间占总时间的比率，相当于是吞吐量的倒数。如果把此参数设置为19，那允许的最大GC时间就占总时间的5%（即1 /（1+19）），默认值为99，就是允许最大1%（即1 /（1+99））的垃圾收集时间。\n* MaxGCPauseMillis参数允许的值是一个大于0的毫秒数，收集器将尽可能地保证内存回收花费的时间不超过设定值。不过大家不要认为如果把这个参数的值设置得稍小一点就能使得系统的垃圾收集速度变得更快，GC停顿时间缩短是以牺牲吞吐量和新生代空间来换取的：系统把新生代调小一些，收集300MB新生代肯定比收集500MB快吧，这也直接导致垃圾收集发生得更频繁一些，原来10秒收集一次、每次停顿100毫秒，现在变成5秒收集一次、每次停顿70毫秒。停顿时间的确在下降，但吞吐量也降下来了。\n\n# 小结\n串行收集器：在年轻代和老年代都采用单线程，年轻代中使用 stop-the-world、复制 算法；老年代使用 stop-the-world、标记 -> 清理 -> 压缩 算法。\n\n适用情况：数据量比较小（100M左右）；单处理器下并且对响应时间无要求的应用\n\n并行收集器：在年轻代中使用 并行、stop-the-world、复制 算法；老年代使用串行收集器的 串行、stop-the-world、标记 -> 清理 -> 压缩 算法。\n\n适用情况：“对吞吐量有高要求”，多CPU、对应用响应时间无要求的中、大型应用。举例：后台处理、科学计算。\n\n并行压缩收集器：在年轻代中使用并行收集器的 并行、stop-the-world、复制 算法；老年代使用 并行、stop-the-world、标记 -> 清理 -> 压缩 算法。和并行收集器的区别是老年代使用了并行。\n\nCMS 收集器：在年轻使用并行收集器的 并行、stop-the-world、复制 算法；老年代使用 并发、标记 -> 清理 算法，不压缩。本文介绍的唯一一个并发收集器，也是唯一一个不对老年代进行压缩的收集器。\n\n适用情况：“对响应时间有高要求”，多CPU、对应用响应时间有较高要求的中、大型应用。举例：Web服务器/应用服务器、电信交换、集成开发环境。\n\n# 参考\n* [Hotspot JVM 内存管理](https://www.javadoop.com/post/jvm-memory-management)\n* [官方垃圾收集器策略](https://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html)\n","source":"_posts/hotspot-jvm.md","raw":"---\ntitle: hotspot-jvm 垃圾收集器\ncategories:\n  - 技术\ntags:\n  - JVM\nabbrlink: 6a0a4ced\ndate: 2019-03-29 13:52:44\n---\n\n# 垃圾收集概念\nGC 需要做 3 件事情：\n* 分配内存，为每个新建的对象分配空间\n* 确保还在使用的对象的内存一直还在，不能把有用的空间当垃圾回收了\n* 释放不再使用的对象所占用的空间\n我们把还被 GC Roots 引用的对象称为活的，把不再被引用的对象认为是死的，也就是我们说的垃圾，GC 的工作就是找到死的对象，回收它们占用的空间。\n在这里，我们总结一下 GC Roots 有哪些：\n* 当前各线程执行方法中的局部变量（包括形参）引用的对象\n* 已被加载的类的 static 域引用的对象\n* 方法区中常量引用的对象\n* JNI 引用\n我们把 GC 管理的内存称为 堆（heap），垃圾收集启动的时机取决于各个垃圾收集器，通常，垃圾收集发生于整个堆或堆的部分已经被使用光了，或者使用的空间达到了某个百分比阈值。这些后面都会具体说，这里的每一句话都是对应了某些场景的。\n\n对于内存分配请求，实现的难点在于在堆中找到一块没有被使用的确定大小的内存空间。所以，对于大部分垃圾回收算法来说避免内存碎片化是非常重要的，它将使得空间分配更加高效。\n\n## 垃圾收集器的理想特征\n1. 安全和全面：活的对象一定不能被清理掉，死的对象一定不能在几个回收周期结束后还在内存中。\n2. 高效：不能将我们的应用程序挂起太长时间。我们需要在时间、空间、频次上作出权衡。比如，如果堆内存很小，每次垃圾收集就会很快，但是频次会增加。如果堆内存很大，很久才会被填满，但是每一次回收需要的时间很长\n3. 尽量少的内存碎片：每次将垃圾对象释放以后，这些空间可能分布在各个地方，最糟糕的情况就是，内存中到处都是碎片，在给一个大对象分配空间的时候没有内存可用，实际上内存是够的。消除碎片的方式就是压缩\n4. 可扩展性：在多核多线程应用中，内存分配和垃圾回收都不应该成为可扩展性的瓶颈。原文提到的这一点，我的理解是：单线程垃圾回收在多核系统中会浪费 CPU 资源\n## 设计上的权衡\n往下看之前，我们需要先分清楚这里的两个概念：并发和并行\n* 并行：多个垃圾回收线程同时工作，而不是只有一个垃圾回收线程在工作\n* 并发：垃圾回收线程和应用程序线程同时工作，应用程序不需要挂起\n在设计或选择垃圾回收算法的时候，我们需要作出以下几个权衡：\n* 串行 vs 并行\n串行收集的情况，即使是多核 CPU，也只有一个核心参与收集。使用并行收集器的话，垃圾收集的工作将分配给多个线程在不同的 CPU 上同时进行。并行可以让收集工作更快，缺点是带来的复杂性和内存碎片问题。\n* 并发 vs Stop-the-world\n当 stop-the-world 垃圾收集器工作的时候，应用将完全被挂起。与之相对的，并发收集器在大部分工作中都是并发进行的，也许会有少量的 stop-the-world。\n\nstop-the-world 垃圾收集器比并发收集器简单很多，因为应用挂起后堆空间不再发生变化，它的缺点是在某些场景下挂起的时间我们是不能接受的（如 web 应用）。\n\n相应的，并发收集器能够降低挂起时间，但是也更加复杂，因为在收集的过程中，也会有新的垃圾产生，同时，需要有额外的空间用于在垃圾收集过程中应用程序的继续使用。\n\n* 压缩 vs 不压缩 vs 复制\n当垃圾收集器标记出内存中哪些是活的，哪些是垃圾对象后，收集器可以进行压缩，将所有活的对象移到一起，这样新的内存分配就可以在剩余的空间中进行了。经过压缩后，分配新对象的内存空间是非常简单快速的。\n\n相对的，不压缩的收集器只会就地释放空间，不会移动存活对象。优点就是快速完成垃圾收集，缺点就是潜在的碎片问题。通常，这种情况下，分配对象空间会比较慢比较复杂，比如为新的一个大对象找到合适的空间。\n\n还有一个选择就是复制收集器，将活的对象复制到另一块空间中，优点就是原空间被清空了，这样后续分配对象空间非常迅速，缺点就是需要进行复制操作和占用额外的空间。\n\n## 性能指标\n* 吞吐量：应用程序的执行时间占总时间的百分比，当然是越高越好\n* 垃圾收集开销：垃圾收集时间占总时间的百分比（1 - 吞吐量）\n* 停顿时间：垃圾收集过程中导致的应用程序挂起时间\n* 频次：相对于应用程序来说，垃圾收集的频次\n* 空间：垃圾收集占用的内存\n* 及时性：一个对象从成为垃圾到该对象空间再次可用的时间\n在交互式程序中，通常希望是低延时的，而对于非交互式程序，总运行时间比较重要。实时应用程序既要求每次停顿时间足够短，也要求总的花费在收集的时间足够短。在小型个人计算机和嵌入式系统中，则希望占用更小的空间。\n\n## 分代收集介绍\n当我们使用分代垃圾收集器时，内存将被分为不同的代(generation)，最常见的就是分为年轻代和老年代。\n\n在不同的分代中，可以根据不同的特点使用不同的算法。分代垃圾收集基于 weak generational hypothesis 假设（即「弱分代」假设）：\n* 大部分对象都是短命的，它们在年轻的时候就会死去\n* 极少老年对象对年轻对象的引用\n* \n年轻代中的收集是非常频繁的、高效的、快速的，因为年轻代空间中，通常都是小对象，同时有非常多的不再被引用的对象。\n\n那些经历过多次年轻代垃圾收集还存活的对象会晋升到老年代中，老年代的空间更大，而且占用空间增长比较慢。这样，老年代的垃圾收集是不频繁的，但是进行一次垃圾收集需要的时间更长。\n\n对于新生代，需要选择速度比较快的垃圾回收算法，因为新生代的垃圾回收是频繁的。\n\n对于老年代，需要考虑的是空间，因为老年代占用了大部分堆内存，而且针对该部分的垃圾回收算法，需要考虑到这个区域的垃圾密度比较低。\n\n# J2SE 5.0 HotSpot JVM 中的垃圾收集器\nJ2SE 5.0 HotSpot 虚拟机包含四种垃圾收集器，都是采用分代算法。包括串行收集器、并行收集器、并行压缩收集器 和 CMS 垃圾收集器。\n## HotSpot 分代\n\n在 HotSpot 虚拟机中，内存被组织成三个分代：年轻代、老年代、永久代。\n\n大部分对象初始化的时候都是在年轻代中的。\n\n老年代存放经过了几次年轻代垃圾收集依然还活着的对象，还有部分大对象因为比较大所以分配的时候直接在老年代分配。\n\n```\n如 -XX:PretenureSizeThreshold=1024，这样大于 1k 的对象就会直接分配在老年代\n```\n永久代，通常也叫 方法区，用于存储已加载类的元数据，以及存储运行时常量池等。\n\n## 垃圾回收类型\n当年轻代被填满后，会进行一次年轻代垃圾收集（也叫做 minor GC）。\n\n```\n注意：\"minor gc 收集年轻代，full gc 收集老年代\" 这句话是错的。\n```\n\n当老年代或永久代被填满了，会触发 full GC（也叫做 major GC），full GC 会收集所有区域，先进行年轻代的收集，使用年轻代专用的垃圾回收算法，然后使用老年代的垃圾回收算法回收老年代和永久代。如果算法带有压缩，每个代分别独立地进行压缩。\n\n如果先进行年轻代垃圾收集，会使得老年代不能容纳要晋升上来的对象，这种情况下，不会先进行 young gc，所有的收集器都会（除了 CMS）直接采用老年代收集算法对整个堆进行收集（CMS 收集器比较特殊，因为它不能收集年轻代的垃圾）。\n\n```\n基于统计，计算出每次年轻代晋升到老年代的平均大小，if (老年代剩余空间 < 平均大小) 触发 full gc。\n```\n\n## 快速分配\n\n如果垃圾收集完成后，存在大片连续的内存可用于分配给新对象，这种情况下分配空间是非常简单快速的，只要一个简单的指针碰撞就可以了（bump-the-pointer），每次分配对象空间只要检测一下是否有足够的空间，如果有，指针往前移动 N 位就分配好空间了，然后就可以初始化这个对象了。\n\n对于多线程应用，对象分配必须要保证线程安全性，如果使用全局锁，那么分配空间将成为瓶颈并降低程序性能。HotSpot 使用了称之为 Thread-Local Allocation Buffers (TLABs) 的技术，该技术能改善多线程空间分配的吞吐量。首先，给予每个线程一部分内存作为缓存区，每个线程都在自己的缓存区中进行指针碰撞，这样就不用获取全局锁了。只有当一个线程使用完了它的 TLAB，它才需要使用同步来获取一个新的缓冲区。HotSpot 使用了多项技术来降低 TLAB 对于内存的浪费。比如，TLAB 的平均大小被限制在 Eden 区大小的 1% 之内。TLABs 和使用指针碰撞的线性分配结合，使得内存分配非常简单高效，只需要大概 10 条机器指令就可以完成。\n\n## 串行收集器\n\n使用串行收集器，年轻代和老年代都使用单线程进行收集（使用一个 CPU），收集过程中会 stop-the-world。所以当在垃圾收集的时候，应用程序是完全停止的。\n\n### 年轻代中使用串行收集器\n\n下图展示了年轻代中使用串行收集器的流程。\n![](https://www.javadoop.com/blogimages/jvm-memory-management/3.png)\n\n年轻代分为一个 Eden 区和两个 Survivor 区（From 区和 To 区）。年轻代垃圾收集时，将 Eden 中活着的对象复制到空的 Survivor-To 区，Survivor-From 区的对象分两类，一类是年轻的，也是复制到 Survivor-To 区，还有一类是老家伙，晋升到老年代中。\n\n如果复制的过程中，发现 Survivor-To 空间满了，将剩下还没复制到 Survivor-To 的来自于 Eden 和 Survivor-From 区的对象直接晋升到老年代。\n\n年轻代垃圾收集完成后，Eden 区和 Survivor-From 就干净了，此时，将 Survivor-From 和 Survivor-To 交换一下角色。得到下面这个样子：\n\n![](https://www.javadoop.com/blogimages/jvm-memory-management/4.png)\n\n### 老年代中使用串行收集器\n\n如果使用串行收集器，在老年代和永久代将通过使用 标记 -> 清除 -> 压缩 算法。标记阶段，收集器识别出哪些对象是活的；清除阶段将遍历一下老年代和永久代，识别出哪些是垃圾；然后执行压缩，将活的对象左移到老年代的起始端（永久代类似），这样就留下了右边一片连续可用的空间，后续就可以通过指针碰撞的方式快速分配对象空间。\n\n![](https://www.javadoop.com/blogimages/jvm-memory-management/5.png)\n\n### 何时应该使用串行收集器\n串行收集器适用于运行在 client 模式下的大部分程序，它们不要求低延时。在现代硬件条件下，串行收集器可以高效管理 64M 堆内存，并且能将 full GC 控制在半秒内完成。\n\n### 使用串行收集器\n\n它是 J2SE 5.0 版本 HotSpot 虚拟机在非服务器级别硬件的默认选择。你也可以使用 -XX:+UseSerialGC 来强制使用串行收集器。\n\n## 并行收集器\n\n现在大多数 Java 应用都运行在大内存、多核环境中，并行收集器，也就是大家熟知的吞吐量收集器，利用多核的优势来进行垃圾收集，而不是像串行收集器一样将程序挂起后只使用单线程来收集垃圾。\n\n### 在年轻代中使用并行收集器\n\n并行收集器在年轻代中其实就是串行收集器收集算法的并行版本。它仍然使用 stop-the-world 和复制算法，只不过使用了多核的优势并行执行，降低垃圾收集的时间，从而提高吞吐量。下图示意了在年轻代中，串行收集器和并行收集器的区别：\n\n![](https://www.javadoop.com/blogimages/jvm-memory-management/6.png)\n\n### 在老年代中使用并行收集器\n在老年代中，并行收集器使用的是和串行收集器一样的算法：单线程，标记 -> 清除 -> 压缩。\n\n```\n是的，并行收集器只能在年轻代中并行\n```\n\n### 何时使用并行收集器\n其适用于多核、不要求低停顿的应用，因为老年代的收集虽然不频繁，但是每次老年代的单线程垃圾收集依然可能会需要很长时间。比如说，它可以应用在批处理、账单计算、科学计算等。\n\n### 使用并行收集器\n\n前面我们说了，J2SE 5.0 中 client 模式自动选择使用串行收集器，如果是 server 模式，那么将自动使用并行收集器。在其他版本中，显示使用 -XX:+UseParallelGC 可以指定并行收集器。\n\n## 并行压缩收集器\n\n并行压缩收集器于 J2SE 5.0 update 6 引入，和并行收集器的区别在于它在老年代也使用并行收集算法。注意：并行压缩收集器终将会取代并行收集器。\n\n### 在年轻代中使用并行压缩收集器\n\n并行压缩收集器在年轻代中使用了和并行收集器一样的算法。即使用 并行、stop-the-world、复制 算法。\n\n### 在老年代中使用并行压缩收集器\n\n在老年代和永久代中，其使用 并行、stop-the-world、滑动压缩 算法。\n\n一次收集分三个阶段，首先，将老年代或永久代逻辑上分为固定大小的区块。\n\n1. 标记阶段，将 GC Roots 分给多个垃圾收集线程，每个线程并行地去标记存活的对象，一旦标记一个存活对象，在该对象所在的区块记录这个对象的大小和对象所在的位置。\n\n2. 汇总阶段，此阶段针对区块进行。由于之前的垃圾回收影响，老年代和永久代的左侧是 存活对象密集区，对这部分区域直接进行压缩的代价是不值得的，能清理出来的空间有限。所以第一件事就是，检查每个区块的密度，从左边第一个开始，直到找到一个区块满足：对右侧的所有区块进行压缩获得的空间抵得上压缩它们的成本。这个区块左边的区域过于密集，不会有对象移动到这个区域中。然后，计算并保存右侧区域中每个区块被压缩后的新位置首字节地址。\n\n右侧的区域将被压缩，对于右侧的每个区块，由于每个区块中保存了该区块的存活对象信息，所以很容易计算每个区块的新位置。注意：汇总阶段目前被实现为串行进行，这个阶段修改为并行也是可行的，不过没有在标记阶段和下面的压缩阶段并行那么重要。\n\n3. 压缩阶段，在汇总阶段已经完成了每个区块新位置的计算，所以压缩阶段每个回收线程并行将每个区块复制到新位置即可。压缩结束后，就清出来了右侧一大片连续可用的空间。\n\n### 何时使用并行压缩收集器\n首先是多核上的并行优势，这个就不重复了。其次，前面的并行收集器对于老年代和永久代使用串行，而并行压缩收集器在这些区域使用并行，能降低停顿时间。\n\n并行压缩收集器不适合运行在大型共享主机上（如 SunRays），因为它在收集的时候会独占几个 CPU，在这种机器上，可以考虑减少垃圾收集的线程数（通过 –XX:ParallelGCThreads=n），或者就选择其他收集器。\n\n### 使用并行压缩收集器\n\n显示指定：-XX:+UseParallelOldGC\n\n## Concurrent Mark-Sweep（CMS）收集器\n```\n重头戏 CMS 登场了，至少对于我这个 web 开发者来说，目前 CMS 最常用（使用 JDK8 的应用一般都切换到 G1 收集器了）。前面介绍的都是并行收集，这里要介绍并发收集了，也就是垃圾回收线程和应用程序线程同时运行。\n```\n\nJDK8 一般使用 G1 收集器。\n\n对于许多程序来说，吞吐量不如响应时间来得重要。通常年轻代的垃圾收集不会停顿多长时间，但是，老年代垃圾回收，虽然不频繁，但是可能导致长时间的停顿，尤其当堆内存比较大的时候。为了解决这个问题，HotSpot 虚拟机提供了 CMS 收集器，也叫做 低延时收集器。\n\n### 在年轻代中使用 CMS 收集器\n在年轻代中，CMS 和 并行收集器 一样，即：并行、stop-the-world、复制。\n\n### 在老年代中使用 CMS 收集器\n在老年代的垃圾收集过程中，大部分收集任务是和应用程序并发执行的。\n\nCMS 收集过程首先是一段小停顿 stop-the-world，叫做 初始标记阶段（initial mark），用于确定 GC Roots。然后是 并发标记阶段（concurrent mark），标记 GC Roots 可达的所有存活对象，由于这个阶段应用程序同时也在运行，所以并发标记阶段结束后，并不能标记出所有的存活对象。为了解决这个问题，需要再次停顿应用程序，称为 再次标记阶段（remark），遍历在并发标记阶段应用程序修改的对象（标记出应用程序在这个期间的活对象），由于这次停顿比初始标记要长得多，所以会使用多线程并行执行来增加效率。\n\n再次标记阶段结束后，能保证所有存活对象都被标记完成，所以接下来的 并发清理阶段（concurrent sweep） 将就地回收垃圾对象所占空间。下图示意了老年代中 串行、标记 -> 清理 -> 压缩收集器和 CMS 收集器的区别：\n\n![](https://www.javadoop.com/blogimages/jvm-memory-management/7.png)\n\nCMS 收集器是唯一不进行压缩的收集器，在它释放了垃圾对象占用的空间后，它不会移动存活对象到一边去。\n![](https://www.javadoop.com/blogimages/jvm-memory-management/8.png)\n\n这将节省垃圾回收的时间，但是由于之后空闲空间不是连续的，所以也就不能使用简单的 指针碰撞（bump-the-pointer） 进行对象空间分配了。它需要维护一个 空闲列表，将所有的空闲区域连接起来，当分配空间时，需要寻找到一个可以容纳该对象的区域。显然，它比使用简单的指针碰撞成本要高。同时它也会加大年轻代垃圾收集的负载，因为年轻代中的对象如果要晋升到老年代中，需要老年代进行空间分配。\n\n另外一个缺点就是，CMS 收集器相比其他收集器需要使用更大的堆内存。因为在并发标记阶段，程序还需要执行，所以需要留足够的空间给应用程序。另外，虽然收集器能保证在标记阶段识别出所有的存活对象，但是由于应用程序并发运行，所以刚刚标记的存活对象很可能立马成为垃圾，而且这部分由于已经被标记为存活对象，所以只能到下次老年代收集才会被清理，这部分垃圾称为 浮动垃圾。\n\n最后，由于缺少压缩环节，堆将会出现碎片化问题。为了解决这个问题，CMS 收集器需要追踪统计最常用的对象大小，评估将来的分配需求，可能还需要分割或合并空闲区域。\n\n不像其他垃圾收集器，CMS 收集器不能等到老年代满了才开始收集。否则的话，CMS 收集器将退化到使用更加耗时的 stop-the-world、标记-清除-压缩 算法。为了避免这个，CMS 收集器需要统计之前每次垃圾收集的时间和老年代空间被消耗的速度。另外，如果老年代空间被消耗了 预设占用率（initiating occupancy），也将会触发一次垃圾收集，这个占用率通过 –XX:CMSInitiatingOccupancyFraction=n 进行设置，n 为老年代空间的占用百分比，默认值是 68。\n\n```\n这个数字到 Java8 的时候已经变为默认 92 了。如果老年代空间不足以容纳从新生代垃圾回收晋升上来的对象，那么就会发生 concurrent mode failure，此时会退化到发生 Full GC，清除老年代中的所有无效对象，这个过程是单线程的，比较耗时\n\n另外，即使在晋升的时候判断出老年代有足够的空间，但是由于老年代的碎片化问题，其实最终没法容纳晋升上来的对象，那么此时也会发生 Full GC，这次的耗时将更加严重，因为需要对整个堆进行压缩，压缩后年轻代彻底就空了。\n```\n\n总结下来，和并行收集器相比，CMS 收集器降低了老年代收集时的停顿时间（有时是显著降低），稍微增加了一些年轻代收集的时间、降低了吞吐量 以及 需要更多的堆内存。\n\n### 增量模式\nCMS 收集器可以使用增量模式，在并发标记阶段，周期性地将自己的 CPU 时钟周期让出来给应用程序。这个功能适用于需要 CMS 的低延时，但是 CPU 核心只有 1 个或 2 个的情况。\n```\n增量模式在 Java8 已经不推荐使用。\n\n目前我了解到的是，在所有的并发或并行收集器中，都提供了控制垃圾收集线程数量的参数设置。\n```\n\n### 何时使用 CMS 收集器\n适用于应用程序要求低停顿，同时能接受在垃圾收集阶段和垃圾收集线程一起共享 CPU 资源的场景，典型的就是 web 应用了。\n```\n在 web 应用中，低延时非常重要，所以 CMS 几乎就是唯一选择，直到后来 G1 的出现。\n```\n\n### 使用 CMS 收集器\n显示指定：-XX:+UseConcMarkSweepGC\n\n如果需要增量模式：–XX:+CMSIncrementalModeoption\n\n# GC 触发时机\n什么时候进行垃圾回收？\n## Minor GC触发条件\n\n当Eden区满时，触发Minor GC。\n\n## Full GC触发条件\n\n* 调用System.gc时，系统建议执行Full GC，但是不必然执行\n\n* 老年代空间不足\n\n* 方法区空间不足\n\n* 通过Minor GC后进入老年代的平均大小大于老年代的可用内存\n\n* 由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小\n\n# JVM 6-11 默认垃圾回收器\n* jdk1.7 默认垃圾收集器 Parallel Scavenge（新生代）+ Serial Old（老年代）\n* jdk1.8 默认垃圾收集器 Parallel Scavenge（新生代）+ Serial Old（老年代）\n* jdk1.9 默认垃圾收集器 G1\n* jdk1.10 默认垃圾收集器 G1\n* jdk1.11 默认垃圾收集器 G1\n\n-XX:+PrintCommandLineFlagsjvm参数可查看默认设置收集器类型\n\n-XX:+PrintGCDetails亦可通过打印的GC日志的新生代、老年代名称判断\n\n![image](http://note.youdao.com/yws/res/18836/51D70BBADA52441594797E8CD748FCA8)\n-XX:+UseG1GC：使用 G1 垃圾收集器。\n\n## 垃圾收集器搭配\n垃圾收集器:\n\n* 新生代收集器: Serial, ParNew, Parallel Scavenge (MaxGCPauseMillis vs. GCTimeRatio 响应时间 vs. 吞吐量)\n* 老生代收集器: Serial Old, Parallel Old, CMS\n\n垃圾收集器搭配总结:\n\n* CMS 只能配 Serial 或 ParNew\n* Parallel Scavenge 只能配 Serial Old 或 Parallel Old\n* Serial 不能配 Parallel Old\n* ParNew 不能搭配 Parallel Old\n\n搭配种类：\n* Serial + Serial Old (UseSerialGC): GC 线程在做事情时, 其他所有的用户线程都必须停止 (即 stop the world)\n* Serial + CMS: 一般不会这样配合使用\n* ParNew + CMS (UseConcMarkSweepGC): 新生代的 GC 使用 ParNew, 有多个 GC 线程同时进行 Minor GC (主要是在多核的环境用多线程效果会好); 而老生代使用 CMS (CMS 后面会重点讲)\n* ParNew + Serial Old (UseParNewGC): 新生代用 ParNew 的时候, 也可以选择老生代不用 CMS, 而用 Serial Old (实际上, 这个组合也不太常用)\n* Parallel Scavenge + Serial Old (UseParallelGC): Parallel Scavenge 收集器的目的是达到一个可控制的吞吐率 (适用于各种计算任务); 这个组合中老生代仍旧使用 Serial Old\n* Parallel Scavenge + Parallel Old (UseParallelOldGC): 新生代使用 Parallel Scavenge, 而 Parallel Old 是老年代版本的 Parallel Scavenge\n\n## 总结\n\n收集器|串行、并行or并发|新生代/老年代|算法|目标|适用场景\n---|---|---|---|---|---\nSerial|串行|新生代|复制算法|响应速度优先|单CPU环境下的Client模式\nSerial Old|串行|老年代|标记-整理|响应速度优先|单CPU环境下的Client模式、CMS的后备预案\nParNew|并行|新生代|复制算法|响应速度优先|多CPU环境时在Server模式下与CMS配合\nParallel Scavenge|并行|新生代|复制算法|吞吐量优先|在后台运算而不需要太多交互的任务\nParallel Old|并行|老年代|标记-整理|吞吐量优先|在后台运算而不需要太多交互的任务\nCMS|并发|老年代|标记-清除|响应速度优先|集中在互联网站或B/S系统服务端上的Java应用\nG1|并发|both|标记-整理+复制算法|响应速度优先|面向服务端应用，将来替换CMS\n\nParNew 和 Parallel Scavenge 区别：\n* 两者都是复制算法，都是并行处理，但是不同的是，paralel scavenge 可以设置最大gc停顿时间（-XX:MaxGCPauseMills）以及gc时间占比(-XX:GCTimeRatio)\n* \n说明：\n* GCTimeRatio参数的值应当是一个大于0且小于100的整数，也就是垃圾收集时间占总时间的比率，相当于是吞吐量的倒数。如果把此参数设置为19，那允许的最大GC时间就占总时间的5%（即1 /（1+19）），默认值为99，就是允许最大1%（即1 /（1+99））的垃圾收集时间。\n* MaxGCPauseMillis参数允许的值是一个大于0的毫秒数，收集器将尽可能地保证内存回收花费的时间不超过设定值。不过大家不要认为如果把这个参数的值设置得稍小一点就能使得系统的垃圾收集速度变得更快，GC停顿时间缩短是以牺牲吞吐量和新生代空间来换取的：系统把新生代调小一些，收集300MB新生代肯定比收集500MB快吧，这也直接导致垃圾收集发生得更频繁一些，原来10秒收集一次、每次停顿100毫秒，现在变成5秒收集一次、每次停顿70毫秒。停顿时间的确在下降，但吞吐量也降下来了。\n\n# 小结\n串行收集器：在年轻代和老年代都采用单线程，年轻代中使用 stop-the-world、复制 算法；老年代使用 stop-the-world、标记 -> 清理 -> 压缩 算法。\n\n适用情况：数据量比较小（100M左右）；单处理器下并且对响应时间无要求的应用\n\n并行收集器：在年轻代中使用 并行、stop-the-world、复制 算法；老年代使用串行收集器的 串行、stop-the-world、标记 -> 清理 -> 压缩 算法。\n\n适用情况：“对吞吐量有高要求”，多CPU、对应用响应时间无要求的中、大型应用。举例：后台处理、科学计算。\n\n并行压缩收集器：在年轻代中使用并行收集器的 并行、stop-the-world、复制 算法；老年代使用 并行、stop-the-world、标记 -> 清理 -> 压缩 算法。和并行收集器的区别是老年代使用了并行。\n\nCMS 收集器：在年轻使用并行收集器的 并行、stop-the-world、复制 算法；老年代使用 并发、标记 -> 清理 算法，不压缩。本文介绍的唯一一个并发收集器，也是唯一一个不对老年代进行压缩的收集器。\n\n适用情况：“对响应时间有高要求”，多CPU、对应用响应时间有较高要求的中、大型应用。举例：Web服务器/应用服务器、电信交换、集成开发环境。\n\n# 参考\n* [Hotspot JVM 内存管理](https://www.javadoop.com/post/jvm-memory-management)\n* [官方垃圾收集器策略](https://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html)\n","slug":"hotspot-jvm","published":1,"updated":"2019-03-29T09:45:32.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb7mrmcf000kljy8of62dzsa","content":"<h1 id=\"垃圾收集概念\"><a href=\"#垃圾收集概念\" class=\"headerlink\" title=\"垃圾收集概念\"></a>垃圾收集概念</h1><p>GC 需要做 3 件事情：</p>\n<ul>\n<li>分配内存，为每个新建的对象分配空间</li>\n<li>确保还在使用的对象的内存一直还在，不能把有用的空间当垃圾回收了</li>\n<li>释放不再使用的对象所占用的空间<br>我们把还被 GC Roots 引用的对象称为活的，把不再被引用的对象认为是死的，也就是我们说的垃圾，GC 的工作就是找到死的对象，回收它们占用的空间。<br>在这里，我们总结一下 GC Roots 有哪些：</li>\n<li>当前各线程执行方法中的局部变量（包括形参）引用的对象</li>\n<li>已被加载的类的 static 域引用的对象</li>\n<li>方法区中常量引用的对象</li>\n<li>JNI 引用<br>我们把 GC 管理的内存称为 堆（heap），垃圾收集启动的时机取决于各个垃圾收集器，通常，垃圾收集发生于整个堆或堆的部分已经被使用光了，或者使用的空间达到了某个百分比阈值。这些后面都会具体说，这里的每一句话都是对应了某些场景的。</li>\n</ul>\n<p>对于内存分配请求，实现的难点在于在堆中找到一块没有被使用的确定大小的内存空间。所以，对于大部分垃圾回收算法来说避免内存碎片化是非常重要的，它将使得空间分配更加高效。</p>\n<h2 id=\"垃圾收集器的理想特征\"><a href=\"#垃圾收集器的理想特征\" class=\"headerlink\" title=\"垃圾收集器的理想特征\"></a>垃圾收集器的理想特征</h2><ol>\n<li>安全和全面：活的对象一定不能被清理掉，死的对象一定不能在几个回收周期结束后还在内存中。</li>\n<li>高效：不能将我们的应用程序挂起太长时间。我们需要在时间、空间、频次上作出权衡。比如，如果堆内存很小，每次垃圾收集就会很快，但是频次会增加。如果堆内存很大，很久才会被填满，但是每一次回收需要的时间很长</li>\n<li>尽量少的内存碎片：每次将垃圾对象释放以后，这些空间可能分布在各个地方，最糟糕的情况就是，内存中到处都是碎片，在给一个大对象分配空间的时候没有内存可用，实际上内存是够的。消除碎片的方式就是压缩</li>\n<li>可扩展性：在多核多线程应用中，内存分配和垃圾回收都不应该成为可扩展性的瓶颈。原文提到的这一点，我的理解是：单线程垃圾回收在多核系统中会浪费 CPU 资源<h2 id=\"设计上的权衡\"><a href=\"#设计上的权衡\" class=\"headerlink\" title=\"设计上的权衡\"></a>设计上的权衡</h2>往下看之前，我们需要先分清楚这里的两个概念：并发和并行</li>\n</ol>\n<ul>\n<li>并行：多个垃圾回收线程同时工作，而不是只有一个垃圾回收线程在工作</li>\n<li>并发：垃圾回收线程和应用程序线程同时工作，应用程序不需要挂起<br>在设计或选择垃圾回收算法的时候，我们需要作出以下几个权衡：</li>\n<li>串行 vs 并行<br>串行收集的情况，即使是多核 CPU，也只有一个核心参与收集。使用并行收集器的话，垃圾收集的工作将分配给多个线程在不同的 CPU 上同时进行。并行可以让收集工作更快，缺点是带来的复杂性和内存碎片问题。</li>\n<li>并发 vs Stop-the-world<br>当 stop-the-world 垃圾收集器工作的时候，应用将完全被挂起。与之相对的，并发收集器在大部分工作中都是并发进行的，也许会有少量的 stop-the-world。</li>\n</ul>\n<p>stop-the-world 垃圾收集器比并发收集器简单很多，因为应用挂起后堆空间不再发生变化，它的缺点是在某些场景下挂起的时间我们是不能接受的（如 web 应用）。</p>\n<p>相应的，并发收集器能够降低挂起时间，但是也更加复杂，因为在收集的过程中，也会有新的垃圾产生，同时，需要有额外的空间用于在垃圾收集过程中应用程序的继续使用。</p>\n<ul>\n<li>压缩 vs 不压缩 vs 复制<br>当垃圾收集器标记出内存中哪些是活的，哪些是垃圾对象后，收集器可以进行压缩，将所有活的对象移到一起，这样新的内存分配就可以在剩余的空间中进行了。经过压缩后，分配新对象的内存空间是非常简单快速的。</li>\n</ul>\n<p>相对的，不压缩的收集器只会就地释放空间，不会移动存活对象。优点就是快速完成垃圾收集，缺点就是潜在的碎片问题。通常，这种情况下，分配对象空间会比较慢比较复杂，比如为新的一个大对象找到合适的空间。</p>\n<p>还有一个选择就是复制收集器，将活的对象复制到另一块空间中，优点就是原空间被清空了，这样后续分配对象空间非常迅速，缺点就是需要进行复制操作和占用额外的空间。</p>\n<h2 id=\"性能指标\"><a href=\"#性能指标\" class=\"headerlink\" title=\"性能指标\"></a>性能指标</h2><ul>\n<li>吞吐量：应用程序的执行时间占总时间的百分比，当然是越高越好</li>\n<li>垃圾收集开销：垃圾收集时间占总时间的百分比（1 - 吞吐量）</li>\n<li>停顿时间：垃圾收集过程中导致的应用程序挂起时间</li>\n<li>频次：相对于应用程序来说，垃圾收集的频次</li>\n<li>空间：垃圾收集占用的内存</li>\n<li>及时性：一个对象从成为垃圾到该对象空间再次可用的时间<br>在交互式程序中，通常希望是低延时的，而对于非交互式程序，总运行时间比较重要。实时应用程序既要求每次停顿时间足够短，也要求总的花费在收集的时间足够短。在小型个人计算机和嵌入式系统中，则希望占用更小的空间。</li>\n</ul>\n<h2 id=\"分代收集介绍\"><a href=\"#分代收集介绍\" class=\"headerlink\" title=\"分代收集介绍\"></a>分代收集介绍</h2><p>当我们使用分代垃圾收集器时，内存将被分为不同的代(generation)，最常见的就是分为年轻代和老年代。</p>\n<p>在不同的分代中，可以根据不同的特点使用不同的算法。分代垃圾收集基于 weak generational hypothesis 假设（即「弱分代」假设）：</p>\n<ul>\n<li>大部分对象都是短命的，它们在年轻的时候就会死去</li>\n<li>极少老年对象对年轻对象的引用</li>\n<li>年轻代中的收集是非常频繁的、高效的、快速的，因为年轻代空间中，通常都是小对象，同时有非常多的不再被引用的对象。</li>\n</ul>\n<p>那些经历过多次年轻代垃圾收集还存活的对象会晋升到老年代中，老年代的空间更大，而且占用空间增长比较慢。这样，老年代的垃圾收集是不频繁的，但是进行一次垃圾收集需要的时间更长。</p>\n<p>对于新生代，需要选择速度比较快的垃圾回收算法，因为新生代的垃圾回收是频繁的。</p>\n<p>对于老年代，需要考虑的是空间，因为老年代占用了大部分堆内存，而且针对该部分的垃圾回收算法，需要考虑到这个区域的垃圾密度比较低。</p>\n<h1 id=\"J2SE-5-0-HotSpot-JVM-中的垃圾收集器\"><a href=\"#J2SE-5-0-HotSpot-JVM-中的垃圾收集器\" class=\"headerlink\" title=\"J2SE 5.0 HotSpot JVM 中的垃圾收集器\"></a>J2SE 5.0 HotSpot JVM 中的垃圾收集器</h1><p>J2SE 5.0 HotSpot 虚拟机包含四种垃圾收集器，都是采用分代算法。包括串行收集器、并行收集器、并行压缩收集器 和 CMS 垃圾收集器。</p>\n<h2 id=\"HotSpot-分代\"><a href=\"#HotSpot-分代\" class=\"headerlink\" title=\"HotSpot 分代\"></a>HotSpot 分代</h2><p>在 HotSpot 虚拟机中，内存被组织成三个分代：年轻代、老年代、永久代。</p>\n<p>大部分对象初始化的时候都是在年轻代中的。</p>\n<p>老年代存放经过了几次年轻代垃圾收集依然还活着的对象，还有部分大对象因为比较大所以分配的时候直接在老年代分配。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如 -XX:PretenureSizeThreshold=1024，这样大于 1k 的对象就会直接分配在老年代</span><br></pre></td></tr></table></figure>\n<p>永久代，通常也叫 方法区，用于存储已加载类的元数据，以及存储运行时常量池等。</p>\n<h2 id=\"垃圾回收类型\"><a href=\"#垃圾回收类型\" class=\"headerlink\" title=\"垃圾回收类型\"></a>垃圾回收类型</h2><p>当年轻代被填满后，会进行一次年轻代垃圾收集（也叫做 minor GC）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：&quot;minor gc 收集年轻代，full gc 收集老年代&quot; 这句话是错的。</span><br></pre></td></tr></table></figure>\n<p>当老年代或永久代被填满了，会触发 full GC（也叫做 major GC），full GC 会收集所有区域，先进行年轻代的收集，使用年轻代专用的垃圾回收算法，然后使用老年代的垃圾回收算法回收老年代和永久代。如果算法带有压缩，每个代分别独立地进行压缩。</p>\n<p>如果先进行年轻代垃圾收集，会使得老年代不能容纳要晋升上来的对象，这种情况下，不会先进行 young gc，所有的收集器都会（除了 CMS）直接采用老年代收集算法对整个堆进行收集（CMS 收集器比较特殊，因为它不能收集年轻代的垃圾）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基于统计，计算出每次年轻代晋升到老年代的平均大小，if (老年代剩余空间 &lt; 平均大小) 触发 full gc。</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速分配\"><a href=\"#快速分配\" class=\"headerlink\" title=\"快速分配\"></a>快速分配</h2><p>如果垃圾收集完成后，存在大片连续的内存可用于分配给新对象，这种情况下分配空间是非常简单快速的，只要一个简单的指针碰撞就可以了（bump-the-pointer），每次分配对象空间只要检测一下是否有足够的空间，如果有，指针往前移动 N 位就分配好空间了，然后就可以初始化这个对象了。</p>\n<p>对于多线程应用，对象分配必须要保证线程安全性，如果使用全局锁，那么分配空间将成为瓶颈并降低程序性能。HotSpot 使用了称之为 Thread-Local Allocation Buffers (TLABs) 的技术，该技术能改善多线程空间分配的吞吐量。首先，给予每个线程一部分内存作为缓存区，每个线程都在自己的缓存区中进行指针碰撞，这样就不用获取全局锁了。只有当一个线程使用完了它的 TLAB，它才需要使用同步来获取一个新的缓冲区。HotSpot 使用了多项技术来降低 TLAB 对于内存的浪费。比如，TLAB 的平均大小被限制在 Eden 区大小的 1% 之内。TLABs 和使用指针碰撞的线性分配结合，使得内存分配非常简单高效，只需要大概 10 条机器指令就可以完成。</p>\n<h2 id=\"串行收集器\"><a href=\"#串行收集器\" class=\"headerlink\" title=\"串行收集器\"></a>串行收集器</h2><p>使用串行收集器，年轻代和老年代都使用单线程进行收集（使用一个 CPU），收集过程中会 stop-the-world。所以当在垃圾收集的时候，应用程序是完全停止的。</p>\n<h3 id=\"年轻代中使用串行收集器\"><a href=\"#年轻代中使用串行收集器\" class=\"headerlink\" title=\"年轻代中使用串行收集器\"></a>年轻代中使用串行收集器</h3><p>下图展示了年轻代中使用串行收集器的流程。<br><img src=\"https://www.javadoop.com/blogimages/jvm-memory-management/3.png\" alt></p>\n<p>年轻代分为一个 Eden 区和两个 Survivor 区（From 区和 To 区）。年轻代垃圾收集时，将 Eden 中活着的对象复制到空的 Survivor-To 区，Survivor-From 区的对象分两类，一类是年轻的，也是复制到 Survivor-To 区，还有一类是老家伙，晋升到老年代中。</p>\n<p>如果复制的过程中，发现 Survivor-To 空间满了，将剩下还没复制到 Survivor-To 的来自于 Eden 和 Survivor-From 区的对象直接晋升到老年代。</p>\n<p>年轻代垃圾收集完成后，Eden 区和 Survivor-From 就干净了，此时，将 Survivor-From 和 Survivor-To 交换一下角色。得到下面这个样子：</p>\n<p><img src=\"https://www.javadoop.com/blogimages/jvm-memory-management/4.png\" alt></p>\n<h3 id=\"老年代中使用串行收集器\"><a href=\"#老年代中使用串行收集器\" class=\"headerlink\" title=\"老年代中使用串行收集器\"></a>老年代中使用串行收集器</h3><p>如果使用串行收集器，在老年代和永久代将通过使用 标记 -&gt; 清除 -&gt; 压缩 算法。标记阶段，收集器识别出哪些对象是活的；清除阶段将遍历一下老年代和永久代，识别出哪些是垃圾；然后执行压缩，将活的对象左移到老年代的起始端（永久代类似），这样就留下了右边一片连续可用的空间，后续就可以通过指针碰撞的方式快速分配对象空间。</p>\n<p><img src=\"https://www.javadoop.com/blogimages/jvm-memory-management/5.png\" alt></p>\n<h3 id=\"何时应该使用串行收集器\"><a href=\"#何时应该使用串行收集器\" class=\"headerlink\" title=\"何时应该使用串行收集器\"></a>何时应该使用串行收集器</h3><p>串行收集器适用于运行在 client 模式下的大部分程序，它们不要求低延时。在现代硬件条件下，串行收集器可以高效管理 64M 堆内存，并且能将 full GC 控制在半秒内完成。</p>\n<h3 id=\"使用串行收集器\"><a href=\"#使用串行收集器\" class=\"headerlink\" title=\"使用串行收集器\"></a>使用串行收集器</h3><p>它是 J2SE 5.0 版本 HotSpot 虚拟机在非服务器级别硬件的默认选择。你也可以使用 -XX:+UseSerialGC 来强制使用串行收集器。</p>\n<h2 id=\"并行收集器\"><a href=\"#并行收集器\" class=\"headerlink\" title=\"并行收集器\"></a>并行收集器</h2><p>现在大多数 Java 应用都运行在大内存、多核环境中，并行收集器，也就是大家熟知的吞吐量收集器，利用多核的优势来进行垃圾收集，而不是像串行收集器一样将程序挂起后只使用单线程来收集垃圾。</p>\n<h3 id=\"在年轻代中使用并行收集器\"><a href=\"#在年轻代中使用并行收集器\" class=\"headerlink\" title=\"在年轻代中使用并行收集器\"></a>在年轻代中使用并行收集器</h3><p>并行收集器在年轻代中其实就是串行收集器收集算法的并行版本。它仍然使用 stop-the-world 和复制算法，只不过使用了多核的优势并行执行，降低垃圾收集的时间，从而提高吞吐量。下图示意了在年轻代中，串行收集器和并行收集器的区别：</p>\n<p><img src=\"https://www.javadoop.com/blogimages/jvm-memory-management/6.png\" alt></p>\n<h3 id=\"在老年代中使用并行收集器\"><a href=\"#在老年代中使用并行收集器\" class=\"headerlink\" title=\"在老年代中使用并行收集器\"></a>在老年代中使用并行收集器</h3><p>在老年代中，并行收集器使用的是和串行收集器一样的算法：单线程，标记 -&gt; 清除 -&gt; 压缩。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是的，并行收集器只能在年轻代中并行</span><br></pre></td></tr></table></figure>\n<h3 id=\"何时使用并行收集器\"><a href=\"#何时使用并行收集器\" class=\"headerlink\" title=\"何时使用并行收集器\"></a>何时使用并行收集器</h3><p>其适用于多核、不要求低停顿的应用，因为老年代的收集虽然不频繁，但是每次老年代的单线程垃圾收集依然可能会需要很长时间。比如说，它可以应用在批处理、账单计算、科学计算等。</p>\n<h3 id=\"使用并行收集器\"><a href=\"#使用并行收集器\" class=\"headerlink\" title=\"使用并行收集器\"></a>使用并行收集器</h3><p>前面我们说了，J2SE 5.0 中 client 模式自动选择使用串行收集器，如果是 server 模式，那么将自动使用并行收集器。在其他版本中，显示使用 -XX:+UseParallelGC 可以指定并行收集器。</p>\n<h2 id=\"并行压缩收集器\"><a href=\"#并行压缩收集器\" class=\"headerlink\" title=\"并行压缩收集器\"></a>并行压缩收集器</h2><p>并行压缩收集器于 J2SE 5.0 update 6 引入，和并行收集器的区别在于它在老年代也使用并行收集算法。注意：并行压缩收集器终将会取代并行收集器。</p>\n<h3 id=\"在年轻代中使用并行压缩收集器\"><a href=\"#在年轻代中使用并行压缩收集器\" class=\"headerlink\" title=\"在年轻代中使用并行压缩收集器\"></a>在年轻代中使用并行压缩收集器</h3><p>并行压缩收集器在年轻代中使用了和并行收集器一样的算法。即使用 并行、stop-the-world、复制 算法。</p>\n<h3 id=\"在老年代中使用并行压缩收集器\"><a href=\"#在老年代中使用并行压缩收集器\" class=\"headerlink\" title=\"在老年代中使用并行压缩收集器\"></a>在老年代中使用并行压缩收集器</h3><p>在老年代和永久代中，其使用 并行、stop-the-world、滑动压缩 算法。</p>\n<p>一次收集分三个阶段，首先，将老年代或永久代逻辑上分为固定大小的区块。</p>\n<ol>\n<li><p>标记阶段，将 GC Roots 分给多个垃圾收集线程，每个线程并行地去标记存活的对象，一旦标记一个存活对象，在该对象所在的区块记录这个对象的大小和对象所在的位置。</p>\n</li>\n<li><p>汇总阶段，此阶段针对区块进行。由于之前的垃圾回收影响，老年代和永久代的左侧是 存活对象密集区，对这部分区域直接进行压缩的代价是不值得的，能清理出来的空间有限。所以第一件事就是，检查每个区块的密度，从左边第一个开始，直到找到一个区块满足：对右侧的所有区块进行压缩获得的空间抵得上压缩它们的成本。这个区块左边的区域过于密集，不会有对象移动到这个区域中。然后，计算并保存右侧区域中每个区块被压缩后的新位置首字节地址。</p>\n</li>\n</ol>\n<p>右侧的区域将被压缩，对于右侧的每个区块，由于每个区块中保存了该区块的存活对象信息，所以很容易计算每个区块的新位置。注意：汇总阶段目前被实现为串行进行，这个阶段修改为并行也是可行的，不过没有在标记阶段和下面的压缩阶段并行那么重要。</p>\n<ol start=\"3\">\n<li>压缩阶段，在汇总阶段已经完成了每个区块新位置的计算，所以压缩阶段每个回收线程并行将每个区块复制到新位置即可。压缩结束后，就清出来了右侧一大片连续可用的空间。</li>\n</ol>\n<h3 id=\"何时使用并行压缩收集器\"><a href=\"#何时使用并行压缩收集器\" class=\"headerlink\" title=\"何时使用并行压缩收集器\"></a>何时使用并行压缩收集器</h3><p>首先是多核上的并行优势，这个就不重复了。其次，前面的并行收集器对于老年代和永久代使用串行，而并行压缩收集器在这些区域使用并行，能降低停顿时间。</p>\n<p>并行压缩收集器不适合运行在大型共享主机上（如 SunRays），因为它在收集的时候会独占几个 CPU，在这种机器上，可以考虑减少垃圾收集的线程数（通过 –XX:ParallelGCThreads=n），或者就选择其他收集器。</p>\n<h3 id=\"使用并行压缩收集器\"><a href=\"#使用并行压缩收集器\" class=\"headerlink\" title=\"使用并行压缩收集器\"></a>使用并行压缩收集器</h3><p>显示指定：-XX:+UseParallelOldGC</p>\n<h2 id=\"Concurrent-Mark-Sweep（CMS）收集器\"><a href=\"#Concurrent-Mark-Sweep（CMS）收集器\" class=\"headerlink\" title=\"Concurrent Mark-Sweep（CMS）收集器\"></a>Concurrent Mark-Sweep（CMS）收集器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重头戏 CMS 登场了，至少对于我这个 web 开发者来说，目前 CMS 最常用（使用 JDK8 的应用一般都切换到 G1 收集器了）。前面介绍的都是并行收集，这里要介绍并发收集了，也就是垃圾回收线程和应用程序线程同时运行。</span><br></pre></td></tr></table></figure>\n<p>JDK8 一般使用 G1 收集器。</p>\n<p>对于许多程序来说，吞吐量不如响应时间来得重要。通常年轻代的垃圾收集不会停顿多长时间，但是，老年代垃圾回收，虽然不频繁，但是可能导致长时间的停顿，尤其当堆内存比较大的时候。为了解决这个问题，HotSpot 虚拟机提供了 CMS 收集器，也叫做 低延时收集器。</p>\n<h3 id=\"在年轻代中使用-CMS-收集器\"><a href=\"#在年轻代中使用-CMS-收集器\" class=\"headerlink\" title=\"在年轻代中使用 CMS 收集器\"></a>在年轻代中使用 CMS 收集器</h3><p>在年轻代中，CMS 和 并行收集器 一样，即：并行、stop-the-world、复制。</p>\n<h3 id=\"在老年代中使用-CMS-收集器\"><a href=\"#在老年代中使用-CMS-收集器\" class=\"headerlink\" title=\"在老年代中使用 CMS 收集器\"></a>在老年代中使用 CMS 收集器</h3><p>在老年代的垃圾收集过程中，大部分收集任务是和应用程序并发执行的。</p>\n<p>CMS 收集过程首先是一段小停顿 stop-the-world，叫做 初始标记阶段（initial mark），用于确定 GC Roots。然后是 并发标记阶段（concurrent mark），标记 GC Roots 可达的所有存活对象，由于这个阶段应用程序同时也在运行，所以并发标记阶段结束后，并不能标记出所有的存活对象。为了解决这个问题，需要再次停顿应用程序，称为 再次标记阶段（remark），遍历在并发标记阶段应用程序修改的对象（标记出应用程序在这个期间的活对象），由于这次停顿比初始标记要长得多，所以会使用多线程并行执行来增加效率。</p>\n<p>再次标记阶段结束后，能保证所有存活对象都被标记完成，所以接下来的 并发清理阶段（concurrent sweep） 将就地回收垃圾对象所占空间。下图示意了老年代中 串行、标记 -&gt; 清理 -&gt; 压缩收集器和 CMS 收集器的区别：</p>\n<p><img src=\"https://www.javadoop.com/blogimages/jvm-memory-management/7.png\" alt></p>\n<p>CMS 收集器是唯一不进行压缩的收集器，在它释放了垃圾对象占用的空间后，它不会移动存活对象到一边去。<br><img src=\"https://www.javadoop.com/blogimages/jvm-memory-management/8.png\" alt></p>\n<p>这将节省垃圾回收的时间，但是由于之后空闲空间不是连续的，所以也就不能使用简单的 指针碰撞（bump-the-pointer） 进行对象空间分配了。它需要维护一个 空闲列表，将所有的空闲区域连接起来，当分配空间时，需要寻找到一个可以容纳该对象的区域。显然，它比使用简单的指针碰撞成本要高。同时它也会加大年轻代垃圾收集的负载，因为年轻代中的对象如果要晋升到老年代中，需要老年代进行空间分配。</p>\n<p>另外一个缺点就是，CMS 收集器相比其他收集器需要使用更大的堆内存。因为在并发标记阶段，程序还需要执行，所以需要留足够的空间给应用程序。另外，虽然收集器能保证在标记阶段识别出所有的存活对象，但是由于应用程序并发运行，所以刚刚标记的存活对象很可能立马成为垃圾，而且这部分由于已经被标记为存活对象，所以只能到下次老年代收集才会被清理，这部分垃圾称为 浮动垃圾。</p>\n<p>最后，由于缺少压缩环节，堆将会出现碎片化问题。为了解决这个问题，CMS 收集器需要追踪统计最常用的对象大小，评估将来的分配需求，可能还需要分割或合并空闲区域。</p>\n<p>不像其他垃圾收集器，CMS 收集器不能等到老年代满了才开始收集。否则的话，CMS 收集器将退化到使用更加耗时的 stop-the-world、标记-清除-压缩 算法。为了避免这个，CMS 收集器需要统计之前每次垃圾收集的时间和老年代空间被消耗的速度。另外，如果老年代空间被消耗了 预设占用率（initiating occupancy），也将会触发一次垃圾收集，这个占用率通过 –XX:CMSInitiatingOccupancyFraction=n 进行设置，n 为老年代空间的占用百分比，默认值是 68。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个数字到 Java8 的时候已经变为默认 92 了。如果老年代空间不足以容纳从新生代垃圾回收晋升上来的对象，那么就会发生 concurrent mode failure，此时会退化到发生 Full GC，清除老年代中的所有无效对象，这个过程是单线程的，比较耗时</span><br><span class=\"line\"></span><br><span class=\"line\">另外，即使在晋升的时候判断出老年代有足够的空间，但是由于老年代的碎片化问题，其实最终没法容纳晋升上来的对象，那么此时也会发生 Full GC，这次的耗时将更加严重，因为需要对整个堆进行压缩，压缩后年轻代彻底就空了。</span><br></pre></td></tr></table></figure>\n<p>总结下来，和并行收集器相比，CMS 收集器降低了老年代收集时的停顿时间（有时是显著降低），稍微增加了一些年轻代收集的时间、降低了吞吐量 以及 需要更多的堆内存。</p>\n<h3 id=\"增量模式\"><a href=\"#增量模式\" class=\"headerlink\" title=\"增量模式\"></a>增量模式</h3><p>CMS 收集器可以使用增量模式，在并发标记阶段，周期性地将自己的 CPU 时钟周期让出来给应用程序。这个功能适用于需要 CMS 的低延时，但是 CPU 核心只有 1 个或 2 个的情况。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增量模式在 Java8 已经不推荐使用。</span><br><span class=\"line\"></span><br><span class=\"line\">目前我了解到的是，在所有的并发或并行收集器中，都提供了控制垃圾收集线程数量的参数设置。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"何时使用-CMS-收集器\"><a href=\"#何时使用-CMS-收集器\" class=\"headerlink\" title=\"何时使用 CMS 收集器\"></a>何时使用 CMS 收集器</h3><p>适用于应用程序要求低停顿，同时能接受在垃圾收集阶段和垃圾收集线程一起共享 CPU 资源的场景，典型的就是 web 应用了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 web 应用中，低延时非常重要，所以 CMS 几乎就是唯一选择，直到后来 G1 的出现。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-CMS-收集器\"><a href=\"#使用-CMS-收集器\" class=\"headerlink\" title=\"使用 CMS 收集器\"></a>使用 CMS 收集器</h3><p>显示指定：-XX:+UseConcMarkSweepGC</p>\n<p>如果需要增量模式：–XX:+CMSIncrementalModeoption</p>\n<h1 id=\"GC-触发时机\"><a href=\"#GC-触发时机\" class=\"headerlink\" title=\"GC 触发时机\"></a>GC 触发时机</h1><p>什么时候进行垃圾回收？</p>\n<h2 id=\"Minor-GC触发条件\"><a href=\"#Minor-GC触发条件\" class=\"headerlink\" title=\"Minor GC触发条件\"></a>Minor GC触发条件</h2><p>当Eden区满时，触发Minor GC。</p>\n<h2 id=\"Full-GC触发条件\"><a href=\"#Full-GC触发条件\" class=\"headerlink\" title=\"Full GC触发条件\"></a>Full GC触发条件</h2><ul>\n<li><p>调用System.gc时，系统建议执行Full GC，但是不必然执行</p>\n</li>\n<li><p>老年代空间不足</p>\n</li>\n<li><p>方法区空间不足</p>\n</li>\n<li><p>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</p>\n</li>\n<li><p>由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</p>\n</li>\n</ul>\n<h1 id=\"JVM-6-11-默认垃圾回收器\"><a href=\"#JVM-6-11-默认垃圾回收器\" class=\"headerlink\" title=\"JVM 6-11 默认垃圾回收器\"></a>JVM 6-11 默认垃圾回收器</h1><ul>\n<li>jdk1.7 默认垃圾收集器 Parallel Scavenge（新生代）+ Serial Old（老年代）</li>\n<li>jdk1.8 默认垃圾收集器 Parallel Scavenge（新生代）+ Serial Old（老年代）</li>\n<li>jdk1.9 默认垃圾收集器 G1</li>\n<li>jdk1.10 默认垃圾收集器 G1</li>\n<li>jdk1.11 默认垃圾收集器 G1</li>\n</ul>\n<p>-XX:+PrintCommandLineFlagsjvm参数可查看默认设置收集器类型</p>\n<p>-XX:+PrintGCDetails亦可通过打印的GC日志的新生代、老年代名称判断</p>\n<p><img src=\"http://note.youdao.com/yws/res/18836/51D70BBADA52441594797E8CD748FCA8\" alt=\"image\"><br>-XX:+UseG1GC：使用 G1 垃圾收集器。</p>\n<h2 id=\"垃圾收集器搭配\"><a href=\"#垃圾收集器搭配\" class=\"headerlink\" title=\"垃圾收集器搭配\"></a>垃圾收集器搭配</h2><p>垃圾收集器:</p>\n<ul>\n<li>新生代收集器: Serial, ParNew, Parallel Scavenge (MaxGCPauseMillis vs. GCTimeRatio 响应时间 vs. 吞吐量)</li>\n<li>老生代收集器: Serial Old, Parallel Old, CMS</li>\n</ul>\n<p>垃圾收集器搭配总结:</p>\n<ul>\n<li>CMS 只能配 Serial 或 ParNew</li>\n<li>Parallel Scavenge 只能配 Serial Old 或 Parallel Old</li>\n<li>Serial 不能配 Parallel Old</li>\n<li>ParNew 不能搭配 Parallel Old</li>\n</ul>\n<p>搭配种类：</p>\n<ul>\n<li>Serial + Serial Old (UseSerialGC): GC 线程在做事情时, 其他所有的用户线程都必须停止 (即 stop the world)</li>\n<li>Serial + CMS: 一般不会这样配合使用</li>\n<li>ParNew + CMS (UseConcMarkSweepGC): 新生代的 GC 使用 ParNew, 有多个 GC 线程同时进行 Minor GC (主要是在多核的环境用多线程效果会好); 而老生代使用 CMS (CMS 后面会重点讲)</li>\n<li>ParNew + Serial Old (UseParNewGC): 新生代用 ParNew 的时候, 也可以选择老生代不用 CMS, 而用 Serial Old (实际上, 这个组合也不太常用)</li>\n<li>Parallel Scavenge + Serial Old (UseParallelGC): Parallel Scavenge 收集器的目的是达到一个可控制的吞吐率 (适用于各种计算任务); 这个组合中老生代仍旧使用 Serial Old</li>\n<li>Parallel Scavenge + Parallel Old (UseParallelOldGC): 新生代使用 Parallel Scavenge, 而 Parallel Old 是老年代版本的 Parallel Scavenge</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th>收集器</th>\n<th>串行、并行or并发</th>\n<th>新生代/老年代</th>\n<th>算法</th>\n<th>目标</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Serial</td>\n<td>串行</td>\n<td>新生代</td>\n<td>复制算法</td>\n<td>响应速度优先</td>\n<td>单CPU环境下的Client模式</td>\n</tr>\n<tr>\n<td>Serial Old</td>\n<td>串行</td>\n<td>老年代</td>\n<td>标记-整理</td>\n<td>响应速度优先</td>\n<td>单CPU环境下的Client模式、CMS的后备预案</td>\n</tr>\n<tr>\n<td>ParNew</td>\n<td>并行</td>\n<td>新生代</td>\n<td>复制算法</td>\n<td>响应速度优先</td>\n<td>多CPU环境时在Server模式下与CMS配合</td>\n</tr>\n<tr>\n<td>Parallel Scavenge</td>\n<td>并行</td>\n<td>新生代</td>\n<td>复制算法</td>\n<td>吞吐量优先</td>\n<td>在后台运算而不需要太多交互的任务</td>\n</tr>\n<tr>\n<td>Parallel Old</td>\n<td>并行</td>\n<td>老年代</td>\n<td>标记-整理</td>\n<td>吞吐量优先</td>\n<td>在后台运算而不需要太多交互的任务</td>\n</tr>\n<tr>\n<td>CMS</td>\n<td>并发</td>\n<td>老年代</td>\n<td>标记-清除</td>\n<td>响应速度优先</td>\n<td>集中在互联网站或B/S系统服务端上的Java应用</td>\n</tr>\n<tr>\n<td>G1</td>\n<td>并发</td>\n<td>both</td>\n<td>标记-整理+复制算法</td>\n<td>响应速度优先</td>\n<td>面向服务端应用，将来替换CMS</td>\n</tr>\n</tbody>\n</table>\n<p>ParNew 和 Parallel Scavenge 区别：</p>\n<ul>\n<li>两者都是复制算法，都是并行处理，但是不同的是，paralel scavenge 可以设置最大gc停顿时间（-XX:MaxGCPauseMills）以及gc时间占比(-XX:GCTimeRatio)</li>\n<li>说明：</li>\n<li>GCTimeRatio参数的值应当是一个大于0且小于100的整数，也就是垃圾收集时间占总时间的比率，相当于是吞吐量的倒数。如果把此参数设置为19，那允许的最大GC时间就占总时间的5%（即1 /（1+19）），默认值为99，就是允许最大1%（即1 /（1+99））的垃圾收集时间。</li>\n<li>MaxGCPauseMillis参数允许的值是一个大于0的毫秒数，收集器将尽可能地保证内存回收花费的时间不超过设定值。不过大家不要认为如果把这个参数的值设置得稍小一点就能使得系统的垃圾收集速度变得更快，GC停顿时间缩短是以牺牲吞吐量和新生代空间来换取的：系统把新生代调小一些，收集300MB新生代肯定比收集500MB快吧，这也直接导致垃圾收集发生得更频繁一些，原来10秒收集一次、每次停顿100毫秒，现在变成5秒收集一次、每次停顿70毫秒。停顿时间的确在下降，但吞吐量也降下来了。</li>\n</ul>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>串行收集器：在年轻代和老年代都采用单线程，年轻代中使用 stop-the-world、复制 算法；老年代使用 stop-the-world、标记 -&gt; 清理 -&gt; 压缩 算法。</p>\n<p>适用情况：数据量比较小（100M左右）；单处理器下并且对响应时间无要求的应用</p>\n<p>并行收集器：在年轻代中使用 并行、stop-the-world、复制 算法；老年代使用串行收集器的 串行、stop-the-world、标记 -&gt; 清理 -&gt; 压缩 算法。</p>\n<p>适用情况：“对吞吐量有高要求”，多CPU、对应用响应时间无要求的中、大型应用。举例：后台处理、科学计算。</p>\n<p>并行压缩收集器：在年轻代中使用并行收集器的 并行、stop-the-world、复制 算法；老年代使用 并行、stop-the-world、标记 -&gt; 清理 -&gt; 压缩 算法。和并行收集器的区别是老年代使用了并行。</p>\n<p>CMS 收集器：在年轻使用并行收集器的 并行、stop-the-world、复制 算法；老年代使用 并发、标记 -&gt; 清理 算法，不压缩。本文介绍的唯一一个并发收集器，也是唯一一个不对老年代进行压缩的收集器。</p>\n<p>适用情况：“对响应时间有高要求”，多CPU、对应用响应时间有较高要求的中、大型应用。举例：Web服务器/应用服务器、电信交换、集成开发环境。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.javadoop.com/post/jvm-memory-management\" target=\"_blank\" rel=\"noopener\">Hotspot JVM 内存管理</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html\" target=\"_blank\" rel=\"noopener\">官方垃圾收集器策略</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"垃圾收集概念\"><a href=\"#垃圾收集概念\" class=\"headerlink\" title=\"垃圾收集概念\"></a>垃圾收集概念</h1><p>GC 需要做 3 件事情：</p>\n<ul>\n<li>分配内存，为每个新建的对象分配空间</li>\n<li>确保还在使用的对象的内存一直还在，不能把有用的空间当垃圾回收了</li>\n<li>释放不再使用的对象所占用的空间<br>我们把还被 GC Roots 引用的对象称为活的，把不再被引用的对象认为是死的，也就是我们说的垃圾，GC 的工作就是找到死的对象，回收它们占用的空间。<br>在这里，我们总结一下 GC Roots 有哪些：</li>\n<li>当前各线程执行方法中的局部变量（包括形参）引用的对象</li>\n<li>已被加载的类的 static 域引用的对象</li>\n<li>方法区中常量引用的对象</li>\n<li>JNI 引用<br>我们把 GC 管理的内存称为 堆（heap），垃圾收集启动的时机取决于各个垃圾收集器，通常，垃圾收集发生于整个堆或堆的部分已经被使用光了，或者使用的空间达到了某个百分比阈值。这些后面都会具体说，这里的每一句话都是对应了某些场景的。</li>\n</ul>\n<p>对于内存分配请求，实现的难点在于在堆中找到一块没有被使用的确定大小的内存空间。所以，对于大部分垃圾回收算法来说避免内存碎片化是非常重要的，它将使得空间分配更加高效。</p>\n<h2 id=\"垃圾收集器的理想特征\"><a href=\"#垃圾收集器的理想特征\" class=\"headerlink\" title=\"垃圾收集器的理想特征\"></a>垃圾收集器的理想特征</h2><ol>\n<li>安全和全面：活的对象一定不能被清理掉，死的对象一定不能在几个回收周期结束后还在内存中。</li>\n<li>高效：不能将我们的应用程序挂起太长时间。我们需要在时间、空间、频次上作出权衡。比如，如果堆内存很小，每次垃圾收集就会很快，但是频次会增加。如果堆内存很大，很久才会被填满，但是每一次回收需要的时间很长</li>\n<li>尽量少的内存碎片：每次将垃圾对象释放以后，这些空间可能分布在各个地方，最糟糕的情况就是，内存中到处都是碎片，在给一个大对象分配空间的时候没有内存可用，实际上内存是够的。消除碎片的方式就是压缩</li>\n<li>可扩展性：在多核多线程应用中，内存分配和垃圾回收都不应该成为可扩展性的瓶颈。原文提到的这一点，我的理解是：单线程垃圾回收在多核系统中会浪费 CPU 资源<h2 id=\"设计上的权衡\"><a href=\"#设计上的权衡\" class=\"headerlink\" title=\"设计上的权衡\"></a>设计上的权衡</h2>往下看之前，我们需要先分清楚这里的两个概念：并发和并行</li>\n</ol>\n<ul>\n<li>并行：多个垃圾回收线程同时工作，而不是只有一个垃圾回收线程在工作</li>\n<li>并发：垃圾回收线程和应用程序线程同时工作，应用程序不需要挂起<br>在设计或选择垃圾回收算法的时候，我们需要作出以下几个权衡：</li>\n<li>串行 vs 并行<br>串行收集的情况，即使是多核 CPU，也只有一个核心参与收集。使用并行收集器的话，垃圾收集的工作将分配给多个线程在不同的 CPU 上同时进行。并行可以让收集工作更快，缺点是带来的复杂性和内存碎片问题。</li>\n<li>并发 vs Stop-the-world<br>当 stop-the-world 垃圾收集器工作的时候，应用将完全被挂起。与之相对的，并发收集器在大部分工作中都是并发进行的，也许会有少量的 stop-the-world。</li>\n</ul>\n<p>stop-the-world 垃圾收集器比并发收集器简单很多，因为应用挂起后堆空间不再发生变化，它的缺点是在某些场景下挂起的时间我们是不能接受的（如 web 应用）。</p>\n<p>相应的，并发收集器能够降低挂起时间，但是也更加复杂，因为在收集的过程中，也会有新的垃圾产生，同时，需要有额外的空间用于在垃圾收集过程中应用程序的继续使用。</p>\n<ul>\n<li>压缩 vs 不压缩 vs 复制<br>当垃圾收集器标记出内存中哪些是活的，哪些是垃圾对象后，收集器可以进行压缩，将所有活的对象移到一起，这样新的内存分配就可以在剩余的空间中进行了。经过压缩后，分配新对象的内存空间是非常简单快速的。</li>\n</ul>\n<p>相对的，不压缩的收集器只会就地释放空间，不会移动存活对象。优点就是快速完成垃圾收集，缺点就是潜在的碎片问题。通常，这种情况下，分配对象空间会比较慢比较复杂，比如为新的一个大对象找到合适的空间。</p>\n<p>还有一个选择就是复制收集器，将活的对象复制到另一块空间中，优点就是原空间被清空了，这样后续分配对象空间非常迅速，缺点就是需要进行复制操作和占用额外的空间。</p>\n<h2 id=\"性能指标\"><a href=\"#性能指标\" class=\"headerlink\" title=\"性能指标\"></a>性能指标</h2><ul>\n<li>吞吐量：应用程序的执行时间占总时间的百分比，当然是越高越好</li>\n<li>垃圾收集开销：垃圾收集时间占总时间的百分比（1 - 吞吐量）</li>\n<li>停顿时间：垃圾收集过程中导致的应用程序挂起时间</li>\n<li>频次：相对于应用程序来说，垃圾收集的频次</li>\n<li>空间：垃圾收集占用的内存</li>\n<li>及时性：一个对象从成为垃圾到该对象空间再次可用的时间<br>在交互式程序中，通常希望是低延时的，而对于非交互式程序，总运行时间比较重要。实时应用程序既要求每次停顿时间足够短，也要求总的花费在收集的时间足够短。在小型个人计算机和嵌入式系统中，则希望占用更小的空间。</li>\n</ul>\n<h2 id=\"分代收集介绍\"><a href=\"#分代收集介绍\" class=\"headerlink\" title=\"分代收集介绍\"></a>分代收集介绍</h2><p>当我们使用分代垃圾收集器时，内存将被分为不同的代(generation)，最常见的就是分为年轻代和老年代。</p>\n<p>在不同的分代中，可以根据不同的特点使用不同的算法。分代垃圾收集基于 weak generational hypothesis 假设（即「弱分代」假设）：</p>\n<ul>\n<li>大部分对象都是短命的，它们在年轻的时候就会死去</li>\n<li>极少老年对象对年轻对象的引用</li>\n<li>年轻代中的收集是非常频繁的、高效的、快速的，因为年轻代空间中，通常都是小对象，同时有非常多的不再被引用的对象。</li>\n</ul>\n<p>那些经历过多次年轻代垃圾收集还存活的对象会晋升到老年代中，老年代的空间更大，而且占用空间增长比较慢。这样，老年代的垃圾收集是不频繁的，但是进行一次垃圾收集需要的时间更长。</p>\n<p>对于新生代，需要选择速度比较快的垃圾回收算法，因为新生代的垃圾回收是频繁的。</p>\n<p>对于老年代，需要考虑的是空间，因为老年代占用了大部分堆内存，而且针对该部分的垃圾回收算法，需要考虑到这个区域的垃圾密度比较低。</p>\n<h1 id=\"J2SE-5-0-HotSpot-JVM-中的垃圾收集器\"><a href=\"#J2SE-5-0-HotSpot-JVM-中的垃圾收集器\" class=\"headerlink\" title=\"J2SE 5.0 HotSpot JVM 中的垃圾收集器\"></a>J2SE 5.0 HotSpot JVM 中的垃圾收集器</h1><p>J2SE 5.0 HotSpot 虚拟机包含四种垃圾收集器，都是采用分代算法。包括串行收集器、并行收集器、并行压缩收集器 和 CMS 垃圾收集器。</p>\n<h2 id=\"HotSpot-分代\"><a href=\"#HotSpot-分代\" class=\"headerlink\" title=\"HotSpot 分代\"></a>HotSpot 分代</h2><p>在 HotSpot 虚拟机中，内存被组织成三个分代：年轻代、老年代、永久代。</p>\n<p>大部分对象初始化的时候都是在年轻代中的。</p>\n<p>老年代存放经过了几次年轻代垃圾收集依然还活着的对象，还有部分大对象因为比较大所以分配的时候直接在老年代分配。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如 -XX:PretenureSizeThreshold=1024，这样大于 1k 的对象就会直接分配在老年代</span><br></pre></td></tr></table></figure>\n<p>永久代，通常也叫 方法区，用于存储已加载类的元数据，以及存储运行时常量池等。</p>\n<h2 id=\"垃圾回收类型\"><a href=\"#垃圾回收类型\" class=\"headerlink\" title=\"垃圾回收类型\"></a>垃圾回收类型</h2><p>当年轻代被填满后，会进行一次年轻代垃圾收集（也叫做 minor GC）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：&quot;minor gc 收集年轻代，full gc 收集老年代&quot; 这句话是错的。</span><br></pre></td></tr></table></figure>\n<p>当老年代或永久代被填满了，会触发 full GC（也叫做 major GC），full GC 会收集所有区域，先进行年轻代的收集，使用年轻代专用的垃圾回收算法，然后使用老年代的垃圾回收算法回收老年代和永久代。如果算法带有压缩，每个代分别独立地进行压缩。</p>\n<p>如果先进行年轻代垃圾收集，会使得老年代不能容纳要晋升上来的对象，这种情况下，不会先进行 young gc，所有的收集器都会（除了 CMS）直接采用老年代收集算法对整个堆进行收集（CMS 收集器比较特殊，因为它不能收集年轻代的垃圾）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基于统计，计算出每次年轻代晋升到老年代的平均大小，if (老年代剩余空间 &lt; 平均大小) 触发 full gc。</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速分配\"><a href=\"#快速分配\" class=\"headerlink\" title=\"快速分配\"></a>快速分配</h2><p>如果垃圾收集完成后，存在大片连续的内存可用于分配给新对象，这种情况下分配空间是非常简单快速的，只要一个简单的指针碰撞就可以了（bump-the-pointer），每次分配对象空间只要检测一下是否有足够的空间，如果有，指针往前移动 N 位就分配好空间了，然后就可以初始化这个对象了。</p>\n<p>对于多线程应用，对象分配必须要保证线程安全性，如果使用全局锁，那么分配空间将成为瓶颈并降低程序性能。HotSpot 使用了称之为 Thread-Local Allocation Buffers (TLABs) 的技术，该技术能改善多线程空间分配的吞吐量。首先，给予每个线程一部分内存作为缓存区，每个线程都在自己的缓存区中进行指针碰撞，这样就不用获取全局锁了。只有当一个线程使用完了它的 TLAB，它才需要使用同步来获取一个新的缓冲区。HotSpot 使用了多项技术来降低 TLAB 对于内存的浪费。比如，TLAB 的平均大小被限制在 Eden 区大小的 1% 之内。TLABs 和使用指针碰撞的线性分配结合，使得内存分配非常简单高效，只需要大概 10 条机器指令就可以完成。</p>\n<h2 id=\"串行收集器\"><a href=\"#串行收集器\" class=\"headerlink\" title=\"串行收集器\"></a>串行收集器</h2><p>使用串行收集器，年轻代和老年代都使用单线程进行收集（使用一个 CPU），收集过程中会 stop-the-world。所以当在垃圾收集的时候，应用程序是完全停止的。</p>\n<h3 id=\"年轻代中使用串行收集器\"><a href=\"#年轻代中使用串行收集器\" class=\"headerlink\" title=\"年轻代中使用串行收集器\"></a>年轻代中使用串行收集器</h3><p>下图展示了年轻代中使用串行收集器的流程。<br><img src=\"https://www.javadoop.com/blogimages/jvm-memory-management/3.png\" alt></p>\n<p>年轻代分为一个 Eden 区和两个 Survivor 区（From 区和 To 区）。年轻代垃圾收集时，将 Eden 中活着的对象复制到空的 Survivor-To 区，Survivor-From 区的对象分两类，一类是年轻的，也是复制到 Survivor-To 区，还有一类是老家伙，晋升到老年代中。</p>\n<p>如果复制的过程中，发现 Survivor-To 空间满了，将剩下还没复制到 Survivor-To 的来自于 Eden 和 Survivor-From 区的对象直接晋升到老年代。</p>\n<p>年轻代垃圾收集完成后，Eden 区和 Survivor-From 就干净了，此时，将 Survivor-From 和 Survivor-To 交换一下角色。得到下面这个样子：</p>\n<p><img src=\"https://www.javadoop.com/blogimages/jvm-memory-management/4.png\" alt></p>\n<h3 id=\"老年代中使用串行收集器\"><a href=\"#老年代中使用串行收集器\" class=\"headerlink\" title=\"老年代中使用串行收集器\"></a>老年代中使用串行收集器</h3><p>如果使用串行收集器，在老年代和永久代将通过使用 标记 -&gt; 清除 -&gt; 压缩 算法。标记阶段，收集器识别出哪些对象是活的；清除阶段将遍历一下老年代和永久代，识别出哪些是垃圾；然后执行压缩，将活的对象左移到老年代的起始端（永久代类似），这样就留下了右边一片连续可用的空间，后续就可以通过指针碰撞的方式快速分配对象空间。</p>\n<p><img src=\"https://www.javadoop.com/blogimages/jvm-memory-management/5.png\" alt></p>\n<h3 id=\"何时应该使用串行收集器\"><a href=\"#何时应该使用串行收集器\" class=\"headerlink\" title=\"何时应该使用串行收集器\"></a>何时应该使用串行收集器</h3><p>串行收集器适用于运行在 client 模式下的大部分程序，它们不要求低延时。在现代硬件条件下，串行收集器可以高效管理 64M 堆内存，并且能将 full GC 控制在半秒内完成。</p>\n<h3 id=\"使用串行收集器\"><a href=\"#使用串行收集器\" class=\"headerlink\" title=\"使用串行收集器\"></a>使用串行收集器</h3><p>它是 J2SE 5.0 版本 HotSpot 虚拟机在非服务器级别硬件的默认选择。你也可以使用 -XX:+UseSerialGC 来强制使用串行收集器。</p>\n<h2 id=\"并行收集器\"><a href=\"#并行收集器\" class=\"headerlink\" title=\"并行收集器\"></a>并行收集器</h2><p>现在大多数 Java 应用都运行在大内存、多核环境中，并行收集器，也就是大家熟知的吞吐量收集器，利用多核的优势来进行垃圾收集，而不是像串行收集器一样将程序挂起后只使用单线程来收集垃圾。</p>\n<h3 id=\"在年轻代中使用并行收集器\"><a href=\"#在年轻代中使用并行收集器\" class=\"headerlink\" title=\"在年轻代中使用并行收集器\"></a>在年轻代中使用并行收集器</h3><p>并行收集器在年轻代中其实就是串行收集器收集算法的并行版本。它仍然使用 stop-the-world 和复制算法，只不过使用了多核的优势并行执行，降低垃圾收集的时间，从而提高吞吐量。下图示意了在年轻代中，串行收集器和并行收集器的区别：</p>\n<p><img src=\"https://www.javadoop.com/blogimages/jvm-memory-management/6.png\" alt></p>\n<h3 id=\"在老年代中使用并行收集器\"><a href=\"#在老年代中使用并行收集器\" class=\"headerlink\" title=\"在老年代中使用并行收集器\"></a>在老年代中使用并行收集器</h3><p>在老年代中，并行收集器使用的是和串行收集器一样的算法：单线程，标记 -&gt; 清除 -&gt; 压缩。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是的，并行收集器只能在年轻代中并行</span><br></pre></td></tr></table></figure>\n<h3 id=\"何时使用并行收集器\"><a href=\"#何时使用并行收集器\" class=\"headerlink\" title=\"何时使用并行收集器\"></a>何时使用并行收集器</h3><p>其适用于多核、不要求低停顿的应用，因为老年代的收集虽然不频繁，但是每次老年代的单线程垃圾收集依然可能会需要很长时间。比如说，它可以应用在批处理、账单计算、科学计算等。</p>\n<h3 id=\"使用并行收集器\"><a href=\"#使用并行收集器\" class=\"headerlink\" title=\"使用并行收集器\"></a>使用并行收集器</h3><p>前面我们说了，J2SE 5.0 中 client 模式自动选择使用串行收集器，如果是 server 模式，那么将自动使用并行收集器。在其他版本中，显示使用 -XX:+UseParallelGC 可以指定并行收集器。</p>\n<h2 id=\"并行压缩收集器\"><a href=\"#并行压缩收集器\" class=\"headerlink\" title=\"并行压缩收集器\"></a>并行压缩收集器</h2><p>并行压缩收集器于 J2SE 5.0 update 6 引入，和并行收集器的区别在于它在老年代也使用并行收集算法。注意：并行压缩收集器终将会取代并行收集器。</p>\n<h3 id=\"在年轻代中使用并行压缩收集器\"><a href=\"#在年轻代中使用并行压缩收集器\" class=\"headerlink\" title=\"在年轻代中使用并行压缩收集器\"></a>在年轻代中使用并行压缩收集器</h3><p>并行压缩收集器在年轻代中使用了和并行收集器一样的算法。即使用 并行、stop-the-world、复制 算法。</p>\n<h3 id=\"在老年代中使用并行压缩收集器\"><a href=\"#在老年代中使用并行压缩收集器\" class=\"headerlink\" title=\"在老年代中使用并行压缩收集器\"></a>在老年代中使用并行压缩收集器</h3><p>在老年代和永久代中，其使用 并行、stop-the-world、滑动压缩 算法。</p>\n<p>一次收集分三个阶段，首先，将老年代或永久代逻辑上分为固定大小的区块。</p>\n<ol>\n<li><p>标记阶段，将 GC Roots 分给多个垃圾收集线程，每个线程并行地去标记存活的对象，一旦标记一个存活对象，在该对象所在的区块记录这个对象的大小和对象所在的位置。</p>\n</li>\n<li><p>汇总阶段，此阶段针对区块进行。由于之前的垃圾回收影响，老年代和永久代的左侧是 存活对象密集区，对这部分区域直接进行压缩的代价是不值得的，能清理出来的空间有限。所以第一件事就是，检查每个区块的密度，从左边第一个开始，直到找到一个区块满足：对右侧的所有区块进行压缩获得的空间抵得上压缩它们的成本。这个区块左边的区域过于密集，不会有对象移动到这个区域中。然后，计算并保存右侧区域中每个区块被压缩后的新位置首字节地址。</p>\n</li>\n</ol>\n<p>右侧的区域将被压缩，对于右侧的每个区块，由于每个区块中保存了该区块的存活对象信息，所以很容易计算每个区块的新位置。注意：汇总阶段目前被实现为串行进行，这个阶段修改为并行也是可行的，不过没有在标记阶段和下面的压缩阶段并行那么重要。</p>\n<ol start=\"3\">\n<li>压缩阶段，在汇总阶段已经完成了每个区块新位置的计算，所以压缩阶段每个回收线程并行将每个区块复制到新位置即可。压缩结束后，就清出来了右侧一大片连续可用的空间。</li>\n</ol>\n<h3 id=\"何时使用并行压缩收集器\"><a href=\"#何时使用并行压缩收集器\" class=\"headerlink\" title=\"何时使用并行压缩收集器\"></a>何时使用并行压缩收集器</h3><p>首先是多核上的并行优势，这个就不重复了。其次，前面的并行收集器对于老年代和永久代使用串行，而并行压缩收集器在这些区域使用并行，能降低停顿时间。</p>\n<p>并行压缩收集器不适合运行在大型共享主机上（如 SunRays），因为它在收集的时候会独占几个 CPU，在这种机器上，可以考虑减少垃圾收集的线程数（通过 –XX:ParallelGCThreads=n），或者就选择其他收集器。</p>\n<h3 id=\"使用并行压缩收集器\"><a href=\"#使用并行压缩收集器\" class=\"headerlink\" title=\"使用并行压缩收集器\"></a>使用并行压缩收集器</h3><p>显示指定：-XX:+UseParallelOldGC</p>\n<h2 id=\"Concurrent-Mark-Sweep（CMS）收集器\"><a href=\"#Concurrent-Mark-Sweep（CMS）收集器\" class=\"headerlink\" title=\"Concurrent Mark-Sweep（CMS）收集器\"></a>Concurrent Mark-Sweep（CMS）收集器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重头戏 CMS 登场了，至少对于我这个 web 开发者来说，目前 CMS 最常用（使用 JDK8 的应用一般都切换到 G1 收集器了）。前面介绍的都是并行收集，这里要介绍并发收集了，也就是垃圾回收线程和应用程序线程同时运行。</span><br></pre></td></tr></table></figure>\n<p>JDK8 一般使用 G1 收集器。</p>\n<p>对于许多程序来说，吞吐量不如响应时间来得重要。通常年轻代的垃圾收集不会停顿多长时间，但是，老年代垃圾回收，虽然不频繁，但是可能导致长时间的停顿，尤其当堆内存比较大的时候。为了解决这个问题，HotSpot 虚拟机提供了 CMS 收集器，也叫做 低延时收集器。</p>\n<h3 id=\"在年轻代中使用-CMS-收集器\"><a href=\"#在年轻代中使用-CMS-收集器\" class=\"headerlink\" title=\"在年轻代中使用 CMS 收集器\"></a>在年轻代中使用 CMS 收集器</h3><p>在年轻代中，CMS 和 并行收集器 一样，即：并行、stop-the-world、复制。</p>\n<h3 id=\"在老年代中使用-CMS-收集器\"><a href=\"#在老年代中使用-CMS-收集器\" class=\"headerlink\" title=\"在老年代中使用 CMS 收集器\"></a>在老年代中使用 CMS 收集器</h3><p>在老年代的垃圾收集过程中，大部分收集任务是和应用程序并发执行的。</p>\n<p>CMS 收集过程首先是一段小停顿 stop-the-world，叫做 初始标记阶段（initial mark），用于确定 GC Roots。然后是 并发标记阶段（concurrent mark），标记 GC Roots 可达的所有存活对象，由于这个阶段应用程序同时也在运行，所以并发标记阶段结束后，并不能标记出所有的存活对象。为了解决这个问题，需要再次停顿应用程序，称为 再次标记阶段（remark），遍历在并发标记阶段应用程序修改的对象（标记出应用程序在这个期间的活对象），由于这次停顿比初始标记要长得多，所以会使用多线程并行执行来增加效率。</p>\n<p>再次标记阶段结束后，能保证所有存活对象都被标记完成，所以接下来的 并发清理阶段（concurrent sweep） 将就地回收垃圾对象所占空间。下图示意了老年代中 串行、标记 -&gt; 清理 -&gt; 压缩收集器和 CMS 收集器的区别：</p>\n<p><img src=\"https://www.javadoop.com/blogimages/jvm-memory-management/7.png\" alt></p>\n<p>CMS 收集器是唯一不进行压缩的收集器，在它释放了垃圾对象占用的空间后，它不会移动存活对象到一边去。<br><img src=\"https://www.javadoop.com/blogimages/jvm-memory-management/8.png\" alt></p>\n<p>这将节省垃圾回收的时间，但是由于之后空闲空间不是连续的，所以也就不能使用简单的 指针碰撞（bump-the-pointer） 进行对象空间分配了。它需要维护一个 空闲列表，将所有的空闲区域连接起来，当分配空间时，需要寻找到一个可以容纳该对象的区域。显然，它比使用简单的指针碰撞成本要高。同时它也会加大年轻代垃圾收集的负载，因为年轻代中的对象如果要晋升到老年代中，需要老年代进行空间分配。</p>\n<p>另外一个缺点就是，CMS 收集器相比其他收集器需要使用更大的堆内存。因为在并发标记阶段，程序还需要执行，所以需要留足够的空间给应用程序。另外，虽然收集器能保证在标记阶段识别出所有的存活对象，但是由于应用程序并发运行，所以刚刚标记的存活对象很可能立马成为垃圾，而且这部分由于已经被标记为存活对象，所以只能到下次老年代收集才会被清理，这部分垃圾称为 浮动垃圾。</p>\n<p>最后，由于缺少压缩环节，堆将会出现碎片化问题。为了解决这个问题，CMS 收集器需要追踪统计最常用的对象大小，评估将来的分配需求，可能还需要分割或合并空闲区域。</p>\n<p>不像其他垃圾收集器，CMS 收集器不能等到老年代满了才开始收集。否则的话，CMS 收集器将退化到使用更加耗时的 stop-the-world、标记-清除-压缩 算法。为了避免这个，CMS 收集器需要统计之前每次垃圾收集的时间和老年代空间被消耗的速度。另外，如果老年代空间被消耗了 预设占用率（initiating occupancy），也将会触发一次垃圾收集，这个占用率通过 –XX:CMSInitiatingOccupancyFraction=n 进行设置，n 为老年代空间的占用百分比，默认值是 68。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个数字到 Java8 的时候已经变为默认 92 了。如果老年代空间不足以容纳从新生代垃圾回收晋升上来的对象，那么就会发生 concurrent mode failure，此时会退化到发生 Full GC，清除老年代中的所有无效对象，这个过程是单线程的，比较耗时</span><br><span class=\"line\"></span><br><span class=\"line\">另外，即使在晋升的时候判断出老年代有足够的空间，但是由于老年代的碎片化问题，其实最终没法容纳晋升上来的对象，那么此时也会发生 Full GC，这次的耗时将更加严重，因为需要对整个堆进行压缩，压缩后年轻代彻底就空了。</span><br></pre></td></tr></table></figure>\n<p>总结下来，和并行收集器相比，CMS 收集器降低了老年代收集时的停顿时间（有时是显著降低），稍微增加了一些年轻代收集的时间、降低了吞吐量 以及 需要更多的堆内存。</p>\n<h3 id=\"增量模式\"><a href=\"#增量模式\" class=\"headerlink\" title=\"增量模式\"></a>增量模式</h3><p>CMS 收集器可以使用增量模式，在并发标记阶段，周期性地将自己的 CPU 时钟周期让出来给应用程序。这个功能适用于需要 CMS 的低延时，但是 CPU 核心只有 1 个或 2 个的情况。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增量模式在 Java8 已经不推荐使用。</span><br><span class=\"line\"></span><br><span class=\"line\">目前我了解到的是，在所有的并发或并行收集器中，都提供了控制垃圾收集线程数量的参数设置。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"何时使用-CMS-收集器\"><a href=\"#何时使用-CMS-收集器\" class=\"headerlink\" title=\"何时使用 CMS 收集器\"></a>何时使用 CMS 收集器</h3><p>适用于应用程序要求低停顿，同时能接受在垃圾收集阶段和垃圾收集线程一起共享 CPU 资源的场景，典型的就是 web 应用了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 web 应用中，低延时非常重要，所以 CMS 几乎就是唯一选择，直到后来 G1 的出现。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-CMS-收集器\"><a href=\"#使用-CMS-收集器\" class=\"headerlink\" title=\"使用 CMS 收集器\"></a>使用 CMS 收集器</h3><p>显示指定：-XX:+UseConcMarkSweepGC</p>\n<p>如果需要增量模式：–XX:+CMSIncrementalModeoption</p>\n<h1 id=\"GC-触发时机\"><a href=\"#GC-触发时机\" class=\"headerlink\" title=\"GC 触发时机\"></a>GC 触发时机</h1><p>什么时候进行垃圾回收？</p>\n<h2 id=\"Minor-GC触发条件\"><a href=\"#Minor-GC触发条件\" class=\"headerlink\" title=\"Minor GC触发条件\"></a>Minor GC触发条件</h2><p>当Eden区满时，触发Minor GC。</p>\n<h2 id=\"Full-GC触发条件\"><a href=\"#Full-GC触发条件\" class=\"headerlink\" title=\"Full GC触发条件\"></a>Full GC触发条件</h2><ul>\n<li><p>调用System.gc时，系统建议执行Full GC，但是不必然执行</p>\n</li>\n<li><p>老年代空间不足</p>\n</li>\n<li><p>方法区空间不足</p>\n</li>\n<li><p>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</p>\n</li>\n<li><p>由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</p>\n</li>\n</ul>\n<h1 id=\"JVM-6-11-默认垃圾回收器\"><a href=\"#JVM-6-11-默认垃圾回收器\" class=\"headerlink\" title=\"JVM 6-11 默认垃圾回收器\"></a>JVM 6-11 默认垃圾回收器</h1><ul>\n<li>jdk1.7 默认垃圾收集器 Parallel Scavenge（新生代）+ Serial Old（老年代）</li>\n<li>jdk1.8 默认垃圾收集器 Parallel Scavenge（新生代）+ Serial Old（老年代）</li>\n<li>jdk1.9 默认垃圾收集器 G1</li>\n<li>jdk1.10 默认垃圾收集器 G1</li>\n<li>jdk1.11 默认垃圾收集器 G1</li>\n</ul>\n<p>-XX:+PrintCommandLineFlagsjvm参数可查看默认设置收集器类型</p>\n<p>-XX:+PrintGCDetails亦可通过打印的GC日志的新生代、老年代名称判断</p>\n<p><img src=\"http://note.youdao.com/yws/res/18836/51D70BBADA52441594797E8CD748FCA8\" alt=\"image\"><br>-XX:+UseG1GC：使用 G1 垃圾收集器。</p>\n<h2 id=\"垃圾收集器搭配\"><a href=\"#垃圾收集器搭配\" class=\"headerlink\" title=\"垃圾收集器搭配\"></a>垃圾收集器搭配</h2><p>垃圾收集器:</p>\n<ul>\n<li>新生代收集器: Serial, ParNew, Parallel Scavenge (MaxGCPauseMillis vs. GCTimeRatio 响应时间 vs. 吞吐量)</li>\n<li>老生代收集器: Serial Old, Parallel Old, CMS</li>\n</ul>\n<p>垃圾收集器搭配总结:</p>\n<ul>\n<li>CMS 只能配 Serial 或 ParNew</li>\n<li>Parallel Scavenge 只能配 Serial Old 或 Parallel Old</li>\n<li>Serial 不能配 Parallel Old</li>\n<li>ParNew 不能搭配 Parallel Old</li>\n</ul>\n<p>搭配种类：</p>\n<ul>\n<li>Serial + Serial Old (UseSerialGC): GC 线程在做事情时, 其他所有的用户线程都必须停止 (即 stop the world)</li>\n<li>Serial + CMS: 一般不会这样配合使用</li>\n<li>ParNew + CMS (UseConcMarkSweepGC): 新生代的 GC 使用 ParNew, 有多个 GC 线程同时进行 Minor GC (主要是在多核的环境用多线程效果会好); 而老生代使用 CMS (CMS 后面会重点讲)</li>\n<li>ParNew + Serial Old (UseParNewGC): 新生代用 ParNew 的时候, 也可以选择老生代不用 CMS, 而用 Serial Old (实际上, 这个组合也不太常用)</li>\n<li>Parallel Scavenge + Serial Old (UseParallelGC): Parallel Scavenge 收集器的目的是达到一个可控制的吞吐率 (适用于各种计算任务); 这个组合中老生代仍旧使用 Serial Old</li>\n<li>Parallel Scavenge + Parallel Old (UseParallelOldGC): 新生代使用 Parallel Scavenge, 而 Parallel Old 是老年代版本的 Parallel Scavenge</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th>收集器</th>\n<th>串行、并行or并发</th>\n<th>新生代/老年代</th>\n<th>算法</th>\n<th>目标</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Serial</td>\n<td>串行</td>\n<td>新生代</td>\n<td>复制算法</td>\n<td>响应速度优先</td>\n<td>单CPU环境下的Client模式</td>\n</tr>\n<tr>\n<td>Serial Old</td>\n<td>串行</td>\n<td>老年代</td>\n<td>标记-整理</td>\n<td>响应速度优先</td>\n<td>单CPU环境下的Client模式、CMS的后备预案</td>\n</tr>\n<tr>\n<td>ParNew</td>\n<td>并行</td>\n<td>新生代</td>\n<td>复制算法</td>\n<td>响应速度优先</td>\n<td>多CPU环境时在Server模式下与CMS配合</td>\n</tr>\n<tr>\n<td>Parallel Scavenge</td>\n<td>并行</td>\n<td>新生代</td>\n<td>复制算法</td>\n<td>吞吐量优先</td>\n<td>在后台运算而不需要太多交互的任务</td>\n</tr>\n<tr>\n<td>Parallel Old</td>\n<td>并行</td>\n<td>老年代</td>\n<td>标记-整理</td>\n<td>吞吐量优先</td>\n<td>在后台运算而不需要太多交互的任务</td>\n</tr>\n<tr>\n<td>CMS</td>\n<td>并发</td>\n<td>老年代</td>\n<td>标记-清除</td>\n<td>响应速度优先</td>\n<td>集中在互联网站或B/S系统服务端上的Java应用</td>\n</tr>\n<tr>\n<td>G1</td>\n<td>并发</td>\n<td>both</td>\n<td>标记-整理+复制算法</td>\n<td>响应速度优先</td>\n<td>面向服务端应用，将来替换CMS</td>\n</tr>\n</tbody>\n</table>\n<p>ParNew 和 Parallel Scavenge 区别：</p>\n<ul>\n<li>两者都是复制算法，都是并行处理，但是不同的是，paralel scavenge 可以设置最大gc停顿时间（-XX:MaxGCPauseMills）以及gc时间占比(-XX:GCTimeRatio)</li>\n<li>说明：</li>\n<li>GCTimeRatio参数的值应当是一个大于0且小于100的整数，也就是垃圾收集时间占总时间的比率，相当于是吞吐量的倒数。如果把此参数设置为19，那允许的最大GC时间就占总时间的5%（即1 /（1+19）），默认值为99，就是允许最大1%（即1 /（1+99））的垃圾收集时间。</li>\n<li>MaxGCPauseMillis参数允许的值是一个大于0的毫秒数，收集器将尽可能地保证内存回收花费的时间不超过设定值。不过大家不要认为如果把这个参数的值设置得稍小一点就能使得系统的垃圾收集速度变得更快，GC停顿时间缩短是以牺牲吞吐量和新生代空间来换取的：系统把新生代调小一些，收集300MB新生代肯定比收集500MB快吧，这也直接导致垃圾收集发生得更频繁一些，原来10秒收集一次、每次停顿100毫秒，现在变成5秒收集一次、每次停顿70毫秒。停顿时间的确在下降，但吞吐量也降下来了。</li>\n</ul>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>串行收集器：在年轻代和老年代都采用单线程，年轻代中使用 stop-the-world、复制 算法；老年代使用 stop-the-world、标记 -&gt; 清理 -&gt; 压缩 算法。</p>\n<p>适用情况：数据量比较小（100M左右）；单处理器下并且对响应时间无要求的应用</p>\n<p>并行收集器：在年轻代中使用 并行、stop-the-world、复制 算法；老年代使用串行收集器的 串行、stop-the-world、标记 -&gt; 清理 -&gt; 压缩 算法。</p>\n<p>适用情况：“对吞吐量有高要求”，多CPU、对应用响应时间无要求的中、大型应用。举例：后台处理、科学计算。</p>\n<p>并行压缩收集器：在年轻代中使用并行收集器的 并行、stop-the-world、复制 算法；老年代使用 并行、stop-the-world、标记 -&gt; 清理 -&gt; 压缩 算法。和并行收集器的区别是老年代使用了并行。</p>\n<p>CMS 收集器：在年轻使用并行收集器的 并行、stop-the-world、复制 算法；老年代使用 并发、标记 -&gt; 清理 算法，不压缩。本文介绍的唯一一个并发收集器，也是唯一一个不对老年代进行压缩的收集器。</p>\n<p>适用情况：“对响应时间有高要求”，多CPU、对应用响应时间有较高要求的中、大型应用。举例：Web服务器/应用服务器、电信交换、集成开发环境。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.javadoop.com/post/jvm-memory-management\" target=\"_blank\" rel=\"noopener\">Hotspot JVM 内存管理</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html\" target=\"_blank\" rel=\"noopener\">官方垃圾收集器策略</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckb7mrm4r0000ljy8pwv88m73","category_id":"ckb7mrm580002ljy8yreqxgwo","_id":"ckb7mrm5k0009ljy81doi8rxe"},{"post_id":"ckb7mrm500001ljy8v5xwxb3h","category_id":"ckb7mrm580002ljy8yreqxgwo","_id":"ckb7mrm5l000cljy8wudybm0w"},{"post_id":"ckb7mrm5b0004ljy8lps0iihj","category_id":"ckb7mrm580002ljy8yreqxgwo","_id":"ckb7mrm5l000eljy82hgir9zw"},{"post_id":"ckb7mrmc3000fljy87dtqu6o4","category_id":"ckb7mrm580002ljy8yreqxgwo","_id":"ckb7mrmcl000mljy8bck9e0ol"},{"post_id":"ckb7mrmca000hljy8h9iquwhp","category_id":"ckb7mrm580002ljy8yreqxgwo","_id":"ckb7mrmcm000nljy85b8jimcw"},{"post_id":"ckb7mrmcf000kljy8of62dzsa","category_id":"ckb7mrm580002ljy8yreqxgwo","_id":"ckb7mrmcn000qljy8xhxpizic"}],"PostTag":[{"post_id":"ckb7mrm4r0000ljy8pwv88m73","tag_id":"ckb7mrm5a0003ljy85d4prq0o","_id":"ckb7mrm5i0007ljy80irhbym5"},{"post_id":"ckb7mrm500001ljy8v5xwxb3h","tag_id":"ckb7mrm5g0006ljy8ammiajmy","_id":"ckb7mrm5l000bljy84ffbqjes"},{"post_id":"ckb7mrm5b0004ljy8lps0iihj","tag_id":"ckb7mrm5k000aljy811u0trbl","_id":"ckb7mrm5l000dljy8v09fk2rd"},{"post_id":"ckb7mrmc3000fljy87dtqu6o4","tag_id":"ckb7mrmcf000jljy8r37kjrxo","_id":"ckb7mrmcn000pljy89lndz46r"},{"post_id":"ckb7mrmca000hljy8h9iquwhp","tag_id":"ckb7mrmcf000jljy8r37kjrxo","_id":"ckb7mrmcp000sljy8yiw5efz5"},{"post_id":"ckb7mrmcf000kljy8of62dzsa","tag_id":"ckb7mrmcf000jljy8r37kjrxo","_id":"ckb7mrmcp000tljy8g57zgu9n"}],"Tag":[{"name":"安全","_id":"ckb7mrm5a0003ljy85d4prq0o"},{"name":"算法","_id":"ckb7mrm5g0006ljy8ammiajmy"},{"name":"docker","_id":"ckb7mrm5k000aljy811u0trbl"},{"name":"JVM","_id":"ckb7mrmcf000jljy8r37kjrxo"}]}}